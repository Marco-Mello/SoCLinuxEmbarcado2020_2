
Entrega2.elf:     file format elf32-littlenios2
Entrega2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00004e1c memsz 0x00004e1c flags r-x
    LOAD off    0x00005e3c vaddr 0x00024e3c paddr 0x0002586c align 2**12
         filesz 0x00000a30 memsz 0x00000a30 flags rw-
    LOAD off    0x0000729c vaddr 0x0002629c paddr 0x0002629c align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004bc4  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00024df4  00024df4  00005df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a30  00024e3c  0002586c  00005e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  0002629c  0002629c  0000729c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000263f4  000263f4  0000686c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000686c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000009b0  00000000  00000000  00006890  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000151bb  00000000  00000000  00007240  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000057cf  00000000  00000000  0001c3fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006455  00000000  00000000  00021bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000013b0  00000000  00000000  00028020  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002550  00000000  00000000  000293d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  0002b920  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000303fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000650  00000000  00000000  00030440  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00032cbe  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00032cc1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00032ccd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00032cce  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00032ccf  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00032cda  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00032ce5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00032cf0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003c  00000000  00000000  00032cfa  2**0
                  CONTENTS, READONLY
 26 .jdi          00005089  00000000  00000000  00032d36  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00039fbb  00000000  00000000  00037dbf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00024df4 l    d  .rodata	00000000 .rodata
00024e3c l    d  .rwdata	00000000 .rwdata
0002629c l    d  .bss	00000000 .bss
000263f4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Entrega2_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00020564 l     F .text	00000008 __fp_unlock
00020578 l     F .text	0000019c __sinit.part.1
00020714 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00024e3c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00023204 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00023318 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00023344 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000235b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000236a0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002378c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023968 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00025868 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00023c0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023d48 l     F .text	00000034 alt_dev_reg
00025810 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000241a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024360 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000244c0 l     F .text	0000003c alt_get_errno
000244fc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000262c8 g     O .bss	00000004 alt_instruction_exception_handler
00022fd4 g     F .text	00000054 _isatty_r
000238a4 g     F .text	0000007c alt_main
000203f8 g     F .text	000000c0 _puts_r
000262f4 g     O .bss	00000100 alt_irq
00022cfc g     F .text	00000060 _lseek_r
0002586c g       *ABS*	00000000 __flash_rwdata_start
000263f4 g       *ABS*	00000000 __alt_heap_start
000222b0 g     F .text	0000005c __sseek
000208c4 g     F .text	00000010 __sinit
0002071c g     F .text	00000078 __sfmoreglue
00023944 g     F .text	00000024 __malloc_unlock
0002199c g     F .text	0000015c memmove
000208ac g     F .text	00000018 _cleanup
0002629c g     O .bss	00000004 n
00024744 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
000262a4 g     O .bss	00000004 edge_capture
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022f78 g     F .text	0000005c _fstat_r
000262b4 g     O .bss	00000004 errno
0002222c g     F .text	00000008 __seofread
000262c0 g     O .bss	00000004 alt_argv
0002d83c g       *ABS*	00000000 _gp
00023bdc g     F .text	00000030 usleep
00025690 g     O .rwdata	00000180 alt_fd_list
00024768 g     F .text	00000090 alt_find_dev
00021854 g     F .text	00000148 memcpy
0002056c g     F .text	0000000c _cleanup_r
00024444 g     F .text	0000007c alt_io_redirect
00024df4 g       *ABS*	00000000 __DTOR_END__
000204b8 g     F .text	00000014 puts
000249c4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00023ea8 g     F .text	000000ec altera_avalon_jtag_uart_read
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00023120 g     F .text	00000064 .hidden __udivsi3
000235f4 g     F .text	000000ac isatty
000262b0 g     O .bss	00000004 __malloc_top_pad
00020914 g     F .text	000004c8 __sfvwrite_r
00022184 g     F .text	00000054 _sbrk_r
00022f18 g     F .text	00000060 _read_r
0002585c g     O .rwdata	00000004 alt_max_fd
0002251c g     F .text	000000f0 _fclose_r
00022898 g     F .text	00000030 fflush
000262ac g     O .bss	00000004 __malloc_max_sbrked_mem
00023438 g     F .text	00000180 alt_irq_register
000237c8 g     F .text	000000dc lseek
0002583c g     O .rwdata	00000004 _global_impure_ptr
00021c20 g     F .text	00000564 _realloc_r
000263f4 g       *ABS*	00000000 __bss_end
000208e4 g     F .text	00000018 __fp_lock_all
000262b8 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00025668 g     O .rwdata	00000028 alt_dev_null
00024180 g     F .text	00000020 alt_dcache_flush_all
0002586c g       *ABS*	00000000 __ram_rwdata_end
00025854 g     O .rwdata	00000008 alt_dev_list
00023c48 g     F .text	00000100 write
00024e3c g       *ABS*	00000000 __ram_rodata_end
00023380 g     F .text	000000b8 fstat
000262a0 g     O .bss	00000004 led
00023184 g     F .text	00000058 .hidden __umodsi3
000263f4 g       *ABS*	00000000 end
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00020394 g     F .text	00000064 init_pio
00024df4 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
00023f94 g     F .text	00000094 altera_avalon_jtag_uart_write
000208d4 g     F .text	00000004 __sfp_lock_acquire
00021770 g     F .text	000000e4 memchr
000229ec g     F .text	00000310 _free_r
00024c40 g     F .text	00000180 __call_exitprocs
00025844 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
000239a4 g     F .text	00000104 read
00023db4 g     F .text	00000034 alt_sys_init
00024b28 g     F .text	00000118 __register_exitproc
000231dc g     F .text	00000028 .hidden __mulsi3
00024e3c g       *ABS*	00000000 __ram_rwdata_start
00024df4 g       *ABS*	00000000 __ram_rodata_start
000262cc g     O .bss	00000028 __malloc_current_mallinfo
00023de8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024900 g     F .text	000000c4 alt_get_fd
00024028 g     F .text	00000158 alt_busy_sleep
000224c8 g     F .text	00000054 _close_r
00024aac g     F .text	0000007c memcmp
000263f4 g       *ABS*	00000000 __alt_stack_base
00022374 g     F .text	00000154 __swsetup_r
00020794 g     F .text	00000118 __sfp
00025260 g     O .rwdata	00000408 __malloc_av_
000208e0 g     F .text	00000004 __sinit_lock_release
000221d8 g     F .text	00000054 __sread
000247f8 g     F .text	00000108 alt_find_file
000241dc g     F .text	000000a4 alt_dev_llist_insert
00023920 g     F .text	00000024 __malloc_lock
00023b2c g     F .text	000000b0 sbrk
0002283c g     F .text	0000005c _fflush_r
0002629c g       *ABS*	00000000 __bss_start
00021af8 g     F .text	00000128 memset
000202b0 g     F .text	00000040 main
000262c4 g     O .bss	00000004 alt_envp
000262a8 g     O .bss	00000004 __malloc_max_total_mem
00023e48 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002230c g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
0002260c g     F .text	00000014 fclose
00020f64 g     F .text	0000080c _malloc_r
00025860 g     O .rwdata	00000004 alt_errno
00020ddc g     F .text	000000c4 _fwalk
00023028 g     F .text	00000084 .hidden __divsi3
000228c8 g     F .text	00000124 _malloc_trim_r
00024df4 g       *ABS*	00000000 __CTOR_END__
00024df4 g       *ABS*	00000000 __flash_rodata_start
00024df4 g       *ABS*	00000000 __DTOR_LIST__
0002026c g     F .text	00000044 delay
00023d7c g     F .text	00000038 alt_irq_init
00023aa8 g     F .text	00000084 alt_release_fd
00024a60 g     F .text	00000014 atexit
00022314 g     F .text	00000060 _write_r
00025840 g     O .rwdata	00000004 _impure_ptr
000262bc g     O .bss	00000004 alt_argc
00022620 g     F .text	0000021c __sflush_r
000242e0 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
000208fc g     F .text	00000018 __fp_unlock_all
0002584c g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002586c g       *ABS*	00000000 _edata
000263f4 g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
00022234 g     F .text	0000007c __swrite
00025848 g     O .rwdata	00000004 __malloc_trim_threshold
00024a74 g     F .text	00000038 exit
00020ea0 g     F .text	000000c4 _fwalk_reent
000230ac g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000208d8 g     F .text	00000004 __sfp_lock_release
00024dc0 g     F .text	00000034 _exit
00022d5c g     F .text	000001bc __smakebuf_r
000204cc g     F .text	00000098 strlen
000245e8 g     F .text	0000015c open
00024340 g     F .text	00000020 alt_icache_flush_all
00025864 g     O .rwdata	00000004 alt_priority_mask
00024280 g     F .text	00000060 _do_ctors
000202f0 g     F .text	000000a4 handle_button_interrupts
00023240 g     F .text	000000d8 close
00023708 g     F .text	00000084 alt_load
000208dc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000b4 	movhi	r2,2
   20140:	1098bd04 	addi	r2,r2,25332
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000b4 	movhi	r2,2
   20158:	1098bd04 	addi	r2,r2,25332
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a2a317 	ldw	r2,-30068(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a2a317 	ldw	r2,-30068(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2023c:	d6b60f14 	ori	gp,gp,55356
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20244:	1098a714 	ori	r2,r2,25244

    movhi r3, %hi(__bss_end)
   20248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2024c:	18d8fd14 	ori	r3,r3,25588

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	00237080 	call	23708 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00238a40 	call	238a4 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <alt_after_alt_main>

0002026c <delay>:
#include <io.h> /* Leiutura e escrita no Avalon */
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"
#include <unistd.h>

int delay(int n){
   2026c:	defffd04 	addi	sp,sp,-12
   20270:	df000215 	stw	fp,8(sp)
   20274:	df000204 	addi	fp,sp,8
   20278:	e13fff15 	stw	r4,-4(fp)
      unsigned int delay = 0 ;
   2027c:	e03ffe15 	stw	zero,-8(fp)
      while(delay < n){
   20280:	00000306 	br	20290 <delay+0x24>
          delay++;
   20284:	e0bffe17 	ldw	r2,-8(fp)
   20288:	10800044 	addi	r2,r2,1
   2028c:	e0bffe15 	stw	r2,-8(fp)
#include "sys/alt_irq.h"
#include <unistd.h>

int delay(int n){
      unsigned int delay = 0 ;
      while(delay < n){
   20290:	e0bfff17 	ldw	r2,-4(fp)
   20294:	e0fffe17 	ldw	r3,-8(fp)
   20298:	18bffa36 	bltu	r3,r2,20284 <delay+0x18>
          delay++;
      }
}
   2029c:	0001883a 	nop
   202a0:	e037883a 	mov	sp,fp
   202a4:	df000017 	ldw	fp,0(sp)
   202a8:	dec00104 	addi	sp,sp,4
   202ac:	f800283a 	ret

000202b0 <main>:
volatile int edge_capture;
unsigned int led = 0;

void init_pio();

int main(void){
   202b0:	defffe04 	addi	sp,sp,-8
   202b4:	dfc00115 	stw	ra,4(sp)
   202b8:	df000015 	stw	fp,0(sp)
   202bc:	d839883a 	mov	fp,sp

  n = 0;
   202c0:	d0229815 	stw	zero,-30112(gp)
  init_pio();
   202c4:	00203940 	call	20394 <init_pio>
  printf("AgoraVai++ \n");
   202c8:	010000b4 	movhi	r4,2
   202cc:	21137d04 	addi	r4,r4,19956
   202d0:	00204b80 	call	204b8 <puts>
  delay(5000);
   202d4:	0104e204 	movi	r4,5000
   202d8:	002026c0 	call	2026c <delay>
  
  while(1){
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, n);
   202dc:	d0e29817 	ldw	r3,-30112(gp)
   202e0:	00800134 	movhi	r2,4
   202e4:	10840004 	addi	r2,r2,4096
   202e8:	10c00035 	stwio	r3,0(r2)


  };
   202ec:	003ffb06 	br	202dc <main+0x2c>

000202f0 <handle_button_interrupts>:
  * The value stored in *context is used to control program flow    *
  * in the rest of this program's routines.                         *
  ******************************************************************/
 
 void handle_button_interrupts(void* context, alt_u32 id)
 {
   202f0:	defffb04 	addi	sp,sp,-20
   202f4:	dfc00415 	stw	ra,16(sp)
   202f8:	df000315 	stw	fp,12(sp)
   202fc:	df000304 	addi	fp,sp,12
   20300:	e13ffe15 	stw	r4,-8(fp)
   20304:	e17fff15 	stw	r5,-4(fp)
     /* Cast context to edge_capture's type. It is important that this be 
      * declared volatile to avoid unwanted compiler optimization.
      */
     volatile int* edge_capture_ptr = (volatile int*) context;
   20308:	e0bffe17 	ldw	r2,-8(fp)
   2030c:	e0bffd15 	stw	r2,-12(fp)
     /* Store the value in the Button's edge capture register in *context. */
     *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE);
   20310:	00800134 	movhi	r2,4
   20314:	10840304 	addi	r2,r2,4108
   20318:	10c00037 	ldwio	r3,0(r2)
   2031c:	e0bffd17 	ldw	r2,-12(fp)
   20320:	10c00015 	stw	r3,0(r2)
     n++;
   20324:	d0a29817 	ldw	r2,-30112(gp)
   20328:	10800044 	addi	r2,r2,1
   2032c:	d0a29815 	stw	r2,-30112(gp)
     /* Reset the Button's edge capture register. */
     IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE, 0);
   20330:	0007883a 	mov	r3,zero
   20334:	00800134 	movhi	r2,4
   20338:	10840304 	addi	r2,r2,4108
   2033c:	10c00035 	stwio	r3,0(r2)

     if (led <= 5){
   20340:	d0a29917 	ldw	r2,-30108(gp)
   20344:	108001a8 	cmpgeui	r2,r2,6
   20348:	10000b1e 	bne	r2,zero,20378 <handle_button_interrupts+0x88>
              IOWR_32DIRECT(PIO_1_BASE, 0, 0x01 << led++);
   2034c:	d0a29917 	ldw	r2,-30108(gp)
   20350:	10c00044 	addi	r3,r2,1
   20354:	d0e29915 	stw	r3,-30108(gp)
   20358:	00c00044 	movi	r3,1
   2035c:	1886983a 	sll	r3,r3,r2
   20360:	00800134 	movhi	r2,4
   20364:	10840404 	addi	r2,r2,4112
   20368:	10c00035 	stwio	r3,0(r2)
              usleep(50000);
   2036c:	0130d414 	movui	r4,50000
   20370:	0023bdc0 	call	23bdc <usleep>
          }
          else{
              led = 0;
          }
 }
   20374:	00000106 	br	2037c <handle_button_interrupts+0x8c>
     if (led <= 5){
              IOWR_32DIRECT(PIO_1_BASE, 0, 0x01 << led++);
              usleep(50000);
          }
          else{
              led = 0;
   20378:	d0229915 	stw	zero,-30108(gp)
          }
 }
   2037c:	0001883a 	nop
   20380:	e037883a 	mov	sp,fp
   20384:	dfc00117 	ldw	ra,4(sp)
   20388:	df000017 	ldw	fp,0(sp)
   2038c:	dec00204 	addi	sp,sp,8
   20390:	f800283a 	ret

00020394 <init_pio>:
 
 /* Initialize the pio. */
 
 void init_pio()
 {
   20394:	defffd04 	addi	sp,sp,-12
   20398:	dfc00215 	stw	ra,8(sp)
   2039c:	df000115 	stw	fp,4(sp)
   203a0:	df000104 	addi	fp,sp,4
     /* Recast the edge_capture pointer to match the alt_irq_register() function
      * prototype. */
     void* edge_capture_ptr = (void*) &edge_capture;
   203a4:	d0a29a04 	addi	r2,gp,-30104
   203a8:	e0bfff15 	stw	r2,-4(fp)
     /* Enable first four interrupts. */
     IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_0_BASE, 0xf);
   203ac:	00c003c4 	movi	r3,15
   203b0:	00800134 	movhi	r2,4
   203b4:	10840204 	addi	r2,r2,4104
   203b8:	10c00035 	stwio	r3,0(r2)
     /* Reset the edge capture register. */
     IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE, 0x0);
   203bc:	0007883a 	mov	r3,zero
   203c0:	00800134 	movhi	r2,4
   203c4:	10840304 	addi	r2,r2,4108
   203c8:	10c00035 	stwio	r3,0(r2)
     /* Register the interrupt handler. */
     alt_irq_register( PIO_0_IRQ, edge_capture_ptr, handle_button_interrupts );
   203cc:	018000b4 	movhi	r6,2
   203d0:	3180bc04 	addi	r6,r6,752
   203d4:	e17fff17 	ldw	r5,-4(fp)
   203d8:	01000044 	movi	r4,1
   203dc:	00234380 	call	23438 <alt_irq_register>

 }
   203e0:	0001883a 	nop
   203e4:	e037883a 	mov	sp,fp
   203e8:	dfc00117 	ldw	ra,4(sp)
   203ec:	df000017 	ldw	fp,0(sp)
   203f0:	dec00204 	addi	sp,sp,8
   203f4:	f800283a 	ret

000203f8 <_puts_r>:
   203f8:	defff604 	addi	sp,sp,-40
   203fc:	dc000715 	stw	r16,28(sp)
   20400:	2021883a 	mov	r16,r4
   20404:	2809883a 	mov	r4,r5
   20408:	dc400815 	stw	r17,32(sp)
   2040c:	dfc00915 	stw	ra,36(sp)
   20410:	2823883a 	mov	r17,r5
   20414:	00204cc0 	call	204cc <strlen>
   20418:	10c00044 	addi	r3,r2,1
   2041c:	d8800115 	stw	r2,4(sp)
   20420:	008000b4 	movhi	r2,2
   20424:	10938004 	addi	r2,r2,19968
   20428:	d8800215 	stw	r2,8(sp)
   2042c:	00800044 	movi	r2,1
   20430:	d8800315 	stw	r2,12(sp)
   20434:	00800084 	movi	r2,2
   20438:	dc400015 	stw	r17,0(sp)
   2043c:	d8c00615 	stw	r3,24(sp)
   20440:	dec00415 	stw	sp,16(sp)
   20444:	d8800515 	stw	r2,20(sp)
   20448:	80000226 	beq	r16,zero,20454 <_puts_r+0x5c>
   2044c:	80800e17 	ldw	r2,56(r16)
   20450:	10001426 	beq	r2,zero,204a4 <_puts_r+0xac>
   20454:	81400217 	ldw	r5,8(r16)
   20458:	2880030b 	ldhu	r2,12(r5)
   2045c:	10c8000c 	andi	r3,r2,8192
   20460:	1800061e 	bne	r3,zero,2047c <_puts_r+0x84>
   20464:	29001917 	ldw	r4,100(r5)
   20468:	00f7ffc4 	movi	r3,-8193
   2046c:	10880014 	ori	r2,r2,8192
   20470:	20c6703a 	and	r3,r4,r3
   20474:	2880030d 	sth	r2,12(r5)
   20478:	28c01915 	stw	r3,100(r5)
   2047c:	d9800404 	addi	r6,sp,16
   20480:	8009883a 	mov	r4,r16
   20484:	00209140 	call	20914 <__sfvwrite_r>
   20488:	1000091e 	bne	r2,zero,204b0 <_puts_r+0xb8>
   2048c:	00800284 	movi	r2,10
   20490:	dfc00917 	ldw	ra,36(sp)
   20494:	dc400817 	ldw	r17,32(sp)
   20498:	dc000717 	ldw	r16,28(sp)
   2049c:	dec00a04 	addi	sp,sp,40
   204a0:	f800283a 	ret
   204a4:	8009883a 	mov	r4,r16
   204a8:	00208c40 	call	208c4 <__sinit>
   204ac:	003fe906 	br	20454 <_puts_r+0x5c>
   204b0:	00bfffc4 	movi	r2,-1
   204b4:	003ff606 	br	20490 <_puts_r+0x98>

000204b8 <puts>:
   204b8:	008000b4 	movhi	r2,2
   204bc:	10961004 	addi	r2,r2,22592
   204c0:	200b883a 	mov	r5,r4
   204c4:	11000017 	ldw	r4,0(r2)
   204c8:	00203f81 	jmpi	203f8 <_puts_r>

000204cc <strlen>:
   204cc:	208000cc 	andi	r2,r4,3
   204d0:	10002026 	beq	r2,zero,20554 <strlen+0x88>
   204d4:	20800007 	ldb	r2,0(r4)
   204d8:	10002026 	beq	r2,zero,2055c <strlen+0x90>
   204dc:	2005883a 	mov	r2,r4
   204e0:	00000206 	br	204ec <strlen+0x20>
   204e4:	10c00007 	ldb	r3,0(r2)
   204e8:	18001826 	beq	r3,zero,2054c <strlen+0x80>
   204ec:	10800044 	addi	r2,r2,1
   204f0:	10c000cc 	andi	r3,r2,3
   204f4:	183ffb1e 	bne	r3,zero,204e4 <strlen+0x18>
   204f8:	10c00017 	ldw	r3,0(r2)
   204fc:	01ffbff4 	movhi	r7,65279
   20500:	39ffbfc4 	addi	r7,r7,-257
   20504:	00ca303a 	nor	r5,zero,r3
   20508:	01a02074 	movhi	r6,32897
   2050c:	19c7883a 	add	r3,r3,r7
   20510:	31a02004 	addi	r6,r6,-32640
   20514:	1946703a 	and	r3,r3,r5
   20518:	1986703a 	and	r3,r3,r6
   2051c:	1800091e 	bne	r3,zero,20544 <strlen+0x78>
   20520:	10800104 	addi	r2,r2,4
   20524:	10c00017 	ldw	r3,0(r2)
   20528:	19cb883a 	add	r5,r3,r7
   2052c:	00c6303a 	nor	r3,zero,r3
   20530:	28c6703a 	and	r3,r5,r3
   20534:	1986703a 	and	r3,r3,r6
   20538:	183ff926 	beq	r3,zero,20520 <strlen+0x54>
   2053c:	00000106 	br	20544 <strlen+0x78>
   20540:	10800044 	addi	r2,r2,1
   20544:	10c00007 	ldb	r3,0(r2)
   20548:	183ffd1e 	bne	r3,zero,20540 <strlen+0x74>
   2054c:	1105c83a 	sub	r2,r2,r4
   20550:	f800283a 	ret
   20554:	2005883a 	mov	r2,r4
   20558:	003fe706 	br	204f8 <strlen+0x2c>
   2055c:	0005883a 	mov	r2,zero
   20560:	f800283a 	ret

00020564 <__fp_unlock>:
   20564:	0005883a 	mov	r2,zero
   20568:	f800283a 	ret

0002056c <_cleanup_r>:
   2056c:	014000b4 	movhi	r5,2
   20570:	29494704 	addi	r5,r5,9500
   20574:	0020ea01 	jmpi	20ea0 <_fwalk_reent>

00020578 <__sinit.part.1>:
   20578:	defff704 	addi	sp,sp,-36
   2057c:	00c000b4 	movhi	r3,2
   20580:	dfc00815 	stw	ra,32(sp)
   20584:	ddc00715 	stw	r23,28(sp)
   20588:	dd800615 	stw	r22,24(sp)
   2058c:	dd400515 	stw	r21,20(sp)
   20590:	dd000415 	stw	r20,16(sp)
   20594:	dcc00315 	stw	r19,12(sp)
   20598:	dc800215 	stw	r18,8(sp)
   2059c:	dc400115 	stw	r17,4(sp)
   205a0:	dc000015 	stw	r16,0(sp)
   205a4:	18c15b04 	addi	r3,r3,1388
   205a8:	24000117 	ldw	r16,4(r4)
   205ac:	20c00f15 	stw	r3,60(r4)
   205b0:	2080bb04 	addi	r2,r4,748
   205b4:	00c000c4 	movi	r3,3
   205b8:	20c0b915 	stw	r3,740(r4)
   205bc:	2080ba15 	stw	r2,744(r4)
   205c0:	2000b815 	stw	zero,736(r4)
   205c4:	05c00204 	movi	r23,8
   205c8:	00800104 	movi	r2,4
   205cc:	2025883a 	mov	r18,r4
   205d0:	b80d883a 	mov	r6,r23
   205d4:	81001704 	addi	r4,r16,92
   205d8:	000b883a 	mov	r5,zero
   205dc:	80000015 	stw	zero,0(r16)
   205e0:	80000115 	stw	zero,4(r16)
   205e4:	80000215 	stw	zero,8(r16)
   205e8:	8080030d 	sth	r2,12(r16)
   205ec:	80001915 	stw	zero,100(r16)
   205f0:	8000038d 	sth	zero,14(r16)
   205f4:	80000415 	stw	zero,16(r16)
   205f8:	80000515 	stw	zero,20(r16)
   205fc:	80000615 	stw	zero,24(r16)
   20600:	0021af80 	call	21af8 <memset>
   20604:	058000b4 	movhi	r22,2
   20608:	94400217 	ldw	r17,8(r18)
   2060c:	054000b4 	movhi	r21,2
   20610:	050000b4 	movhi	r20,2
   20614:	04c000b4 	movhi	r19,2
   20618:	b5887604 	addi	r22,r22,8664
   2061c:	ad488d04 	addi	r21,r21,8756
   20620:	a508ac04 	addi	r20,r20,8880
   20624:	9cc8c304 	addi	r19,r19,8972
   20628:	85800815 	stw	r22,32(r16)
   2062c:	85400915 	stw	r21,36(r16)
   20630:	85000a15 	stw	r20,40(r16)
   20634:	84c00b15 	stw	r19,44(r16)
   20638:	84000715 	stw	r16,28(r16)
   2063c:	00800284 	movi	r2,10
   20640:	8880030d 	sth	r2,12(r17)
   20644:	00800044 	movi	r2,1
   20648:	b80d883a 	mov	r6,r23
   2064c:	89001704 	addi	r4,r17,92
   20650:	000b883a 	mov	r5,zero
   20654:	88000015 	stw	zero,0(r17)
   20658:	88000115 	stw	zero,4(r17)
   2065c:	88000215 	stw	zero,8(r17)
   20660:	88001915 	stw	zero,100(r17)
   20664:	8880038d 	sth	r2,14(r17)
   20668:	88000415 	stw	zero,16(r17)
   2066c:	88000515 	stw	zero,20(r17)
   20670:	88000615 	stw	zero,24(r17)
   20674:	0021af80 	call	21af8 <memset>
   20678:	94000317 	ldw	r16,12(r18)
   2067c:	00800484 	movi	r2,18
   20680:	8c400715 	stw	r17,28(r17)
   20684:	8d800815 	stw	r22,32(r17)
   20688:	8d400915 	stw	r21,36(r17)
   2068c:	8d000a15 	stw	r20,40(r17)
   20690:	8cc00b15 	stw	r19,44(r17)
   20694:	8080030d 	sth	r2,12(r16)
   20698:	00800084 	movi	r2,2
   2069c:	80000015 	stw	zero,0(r16)
   206a0:	80000115 	stw	zero,4(r16)
   206a4:	80000215 	stw	zero,8(r16)
   206a8:	80001915 	stw	zero,100(r16)
   206ac:	8080038d 	sth	r2,14(r16)
   206b0:	80000415 	stw	zero,16(r16)
   206b4:	80000515 	stw	zero,20(r16)
   206b8:	80000615 	stw	zero,24(r16)
   206bc:	b80d883a 	mov	r6,r23
   206c0:	000b883a 	mov	r5,zero
   206c4:	81001704 	addi	r4,r16,92
   206c8:	0021af80 	call	21af8 <memset>
   206cc:	00800044 	movi	r2,1
   206d0:	84000715 	stw	r16,28(r16)
   206d4:	85800815 	stw	r22,32(r16)
   206d8:	85400915 	stw	r21,36(r16)
   206dc:	85000a15 	stw	r20,40(r16)
   206e0:	84c00b15 	stw	r19,44(r16)
   206e4:	90800e15 	stw	r2,56(r18)
   206e8:	dfc00817 	ldw	ra,32(sp)
   206ec:	ddc00717 	ldw	r23,28(sp)
   206f0:	dd800617 	ldw	r22,24(sp)
   206f4:	dd400517 	ldw	r21,20(sp)
   206f8:	dd000417 	ldw	r20,16(sp)
   206fc:	dcc00317 	ldw	r19,12(sp)
   20700:	dc800217 	ldw	r18,8(sp)
   20704:	dc400117 	ldw	r17,4(sp)
   20708:	dc000017 	ldw	r16,0(sp)
   2070c:	dec00904 	addi	sp,sp,36
   20710:	f800283a 	ret

00020714 <__fp_lock>:
   20714:	0005883a 	mov	r2,zero
   20718:	f800283a 	ret

0002071c <__sfmoreglue>:
   2071c:	defffc04 	addi	sp,sp,-16
   20720:	dc800215 	stw	r18,8(sp)
   20724:	2825883a 	mov	r18,r5
   20728:	dc000015 	stw	r16,0(sp)
   2072c:	01401a04 	movi	r5,104
   20730:	2021883a 	mov	r16,r4
   20734:	913fffc4 	addi	r4,r18,-1
   20738:	dfc00315 	stw	ra,12(sp)
   2073c:	dc400115 	stw	r17,4(sp)
   20740:	00231dc0 	call	231dc <__mulsi3>
   20744:	8009883a 	mov	r4,r16
   20748:	11401d04 	addi	r5,r2,116
   2074c:	1023883a 	mov	r17,r2
   20750:	0020f640 	call	20f64 <_malloc_r>
   20754:	1021883a 	mov	r16,r2
   20758:	10000726 	beq	r2,zero,20778 <__sfmoreglue+0x5c>
   2075c:	11000304 	addi	r4,r2,12
   20760:	10000015 	stw	zero,0(r2)
   20764:	14800115 	stw	r18,4(r2)
   20768:	11000215 	stw	r4,8(r2)
   2076c:	89801a04 	addi	r6,r17,104
   20770:	000b883a 	mov	r5,zero
   20774:	0021af80 	call	21af8 <memset>
   20778:	8005883a 	mov	r2,r16
   2077c:	dfc00317 	ldw	ra,12(sp)
   20780:	dc800217 	ldw	r18,8(sp)
   20784:	dc400117 	ldw	r17,4(sp)
   20788:	dc000017 	ldw	r16,0(sp)
   2078c:	dec00404 	addi	sp,sp,16
   20790:	f800283a 	ret

00020794 <__sfp>:
   20794:	defffb04 	addi	sp,sp,-20
   20798:	dc000015 	stw	r16,0(sp)
   2079c:	040000b4 	movhi	r16,2
   207a0:	84160f04 	addi	r16,r16,22588
   207a4:	dcc00315 	stw	r19,12(sp)
   207a8:	2027883a 	mov	r19,r4
   207ac:	81000017 	ldw	r4,0(r16)
   207b0:	dfc00415 	stw	ra,16(sp)
   207b4:	dc800215 	stw	r18,8(sp)
   207b8:	20800e17 	ldw	r2,56(r4)
   207bc:	dc400115 	stw	r17,4(sp)
   207c0:	1000021e 	bne	r2,zero,207cc <__sfp+0x38>
   207c4:	00205780 	call	20578 <__sinit.part.1>
   207c8:	81000017 	ldw	r4,0(r16)
   207cc:	2480b804 	addi	r18,r4,736
   207d0:	047fffc4 	movi	r17,-1
   207d4:	91000117 	ldw	r4,4(r18)
   207d8:	94000217 	ldw	r16,8(r18)
   207dc:	213fffc4 	addi	r4,r4,-1
   207e0:	20000a16 	blt	r4,zero,2080c <__sfp+0x78>
   207e4:	8080030f 	ldh	r2,12(r16)
   207e8:	10000c26 	beq	r2,zero,2081c <__sfp+0x88>
   207ec:	80c01d04 	addi	r3,r16,116
   207f0:	00000206 	br	207fc <__sfp+0x68>
   207f4:	18bfe60f 	ldh	r2,-104(r3)
   207f8:	10000826 	beq	r2,zero,2081c <__sfp+0x88>
   207fc:	213fffc4 	addi	r4,r4,-1
   20800:	1c3ffd04 	addi	r16,r3,-12
   20804:	18c01a04 	addi	r3,r3,104
   20808:	247ffa1e 	bne	r4,r17,207f4 <__sfp+0x60>
   2080c:	90800017 	ldw	r2,0(r18)
   20810:	10001d26 	beq	r2,zero,20888 <__sfp+0xf4>
   20814:	1025883a 	mov	r18,r2
   20818:	003fee06 	br	207d4 <__sfp+0x40>
   2081c:	00bfffc4 	movi	r2,-1
   20820:	8080038d 	sth	r2,14(r16)
   20824:	00800044 	movi	r2,1
   20828:	8080030d 	sth	r2,12(r16)
   2082c:	80001915 	stw	zero,100(r16)
   20830:	80000015 	stw	zero,0(r16)
   20834:	80000215 	stw	zero,8(r16)
   20838:	80000115 	stw	zero,4(r16)
   2083c:	80000415 	stw	zero,16(r16)
   20840:	80000515 	stw	zero,20(r16)
   20844:	80000615 	stw	zero,24(r16)
   20848:	01800204 	movi	r6,8
   2084c:	000b883a 	mov	r5,zero
   20850:	81001704 	addi	r4,r16,92
   20854:	0021af80 	call	21af8 <memset>
   20858:	8005883a 	mov	r2,r16
   2085c:	80000c15 	stw	zero,48(r16)
   20860:	80000d15 	stw	zero,52(r16)
   20864:	80001115 	stw	zero,68(r16)
   20868:	80001215 	stw	zero,72(r16)
   2086c:	dfc00417 	ldw	ra,16(sp)
   20870:	dcc00317 	ldw	r19,12(sp)
   20874:	dc800217 	ldw	r18,8(sp)
   20878:	dc400117 	ldw	r17,4(sp)
   2087c:	dc000017 	ldw	r16,0(sp)
   20880:	dec00504 	addi	sp,sp,20
   20884:	f800283a 	ret
   20888:	01400104 	movi	r5,4
   2088c:	9809883a 	mov	r4,r19
   20890:	002071c0 	call	2071c <__sfmoreglue>
   20894:	90800015 	stw	r2,0(r18)
   20898:	103fde1e 	bne	r2,zero,20814 <__sfp+0x80>
   2089c:	00800304 	movi	r2,12
   208a0:	98800015 	stw	r2,0(r19)
   208a4:	0005883a 	mov	r2,zero
   208a8:	003ff006 	br	2086c <__sfp+0xd8>

000208ac <_cleanup>:
   208ac:	008000b4 	movhi	r2,2
   208b0:	10960f04 	addi	r2,r2,22588
   208b4:	11000017 	ldw	r4,0(r2)
   208b8:	014000b4 	movhi	r5,2
   208bc:	29494704 	addi	r5,r5,9500
   208c0:	0020ea01 	jmpi	20ea0 <_fwalk_reent>

000208c4 <__sinit>:
   208c4:	20800e17 	ldw	r2,56(r4)
   208c8:	10000126 	beq	r2,zero,208d0 <__sinit+0xc>
   208cc:	f800283a 	ret
   208d0:	00205781 	jmpi	20578 <__sinit.part.1>

000208d4 <__sfp_lock_acquire>:
   208d4:	f800283a 	ret

000208d8 <__sfp_lock_release>:
   208d8:	f800283a 	ret

000208dc <__sinit_lock_acquire>:
   208dc:	f800283a 	ret

000208e0 <__sinit_lock_release>:
   208e0:	f800283a 	ret

000208e4 <__fp_lock_all>:
   208e4:	008000b4 	movhi	r2,2
   208e8:	10961004 	addi	r2,r2,22592
   208ec:	11000017 	ldw	r4,0(r2)
   208f0:	014000b4 	movhi	r5,2
   208f4:	2941c504 	addi	r5,r5,1812
   208f8:	0020ddc1 	jmpi	20ddc <_fwalk>

000208fc <__fp_unlock_all>:
   208fc:	008000b4 	movhi	r2,2
   20900:	10961004 	addi	r2,r2,22592
   20904:	11000017 	ldw	r4,0(r2)
   20908:	014000b4 	movhi	r5,2
   2090c:	29415904 	addi	r5,r5,1380
   20910:	0020ddc1 	jmpi	20ddc <_fwalk>

00020914 <__sfvwrite_r>:
   20914:	30800217 	ldw	r2,8(r6)
   20918:	10006726 	beq	r2,zero,20ab8 <__sfvwrite_r+0x1a4>
   2091c:	28c0030b 	ldhu	r3,12(r5)
   20920:	defff404 	addi	sp,sp,-48
   20924:	dd400715 	stw	r21,28(sp)
   20928:	dd000615 	stw	r20,24(sp)
   2092c:	dc000215 	stw	r16,8(sp)
   20930:	dfc00b15 	stw	ra,44(sp)
   20934:	df000a15 	stw	fp,40(sp)
   20938:	ddc00915 	stw	r23,36(sp)
   2093c:	dd800815 	stw	r22,32(sp)
   20940:	dcc00515 	stw	r19,20(sp)
   20944:	dc800415 	stw	r18,16(sp)
   20948:	dc400315 	stw	r17,12(sp)
   2094c:	1880020c 	andi	r2,r3,8
   20950:	2821883a 	mov	r16,r5
   20954:	202b883a 	mov	r21,r4
   20958:	3029883a 	mov	r20,r6
   2095c:	10002726 	beq	r2,zero,209fc <__sfvwrite_r+0xe8>
   20960:	28800417 	ldw	r2,16(r5)
   20964:	10002526 	beq	r2,zero,209fc <__sfvwrite_r+0xe8>
   20968:	1880008c 	andi	r2,r3,2
   2096c:	a4400017 	ldw	r17,0(r20)
   20970:	10002a26 	beq	r2,zero,20a1c <__sfvwrite_r+0x108>
   20974:	05a00034 	movhi	r22,32768
   20978:	0027883a 	mov	r19,zero
   2097c:	0025883a 	mov	r18,zero
   20980:	b5bf0004 	addi	r22,r22,-1024
   20984:	980d883a 	mov	r6,r19
   20988:	a809883a 	mov	r4,r21
   2098c:	90004626 	beq	r18,zero,20aa8 <__sfvwrite_r+0x194>
   20990:	900f883a 	mov	r7,r18
   20994:	b480022e 	bgeu	r22,r18,209a0 <__sfvwrite_r+0x8c>
   20998:	01e00034 	movhi	r7,32768
   2099c:	39ff0004 	addi	r7,r7,-1024
   209a0:	80800917 	ldw	r2,36(r16)
   209a4:	81400717 	ldw	r5,28(r16)
   209a8:	103ee83a 	callr	r2
   209ac:	00805a0e 	bge	zero,r2,20b18 <__sfvwrite_r+0x204>
   209b0:	a0c00217 	ldw	r3,8(r20)
   209b4:	98a7883a 	add	r19,r19,r2
   209b8:	90a5c83a 	sub	r18,r18,r2
   209bc:	1885c83a 	sub	r2,r3,r2
   209c0:	a0800215 	stw	r2,8(r20)
   209c4:	103fef1e 	bne	r2,zero,20984 <__sfvwrite_r+0x70>
   209c8:	0005883a 	mov	r2,zero
   209cc:	dfc00b17 	ldw	ra,44(sp)
   209d0:	df000a17 	ldw	fp,40(sp)
   209d4:	ddc00917 	ldw	r23,36(sp)
   209d8:	dd800817 	ldw	r22,32(sp)
   209dc:	dd400717 	ldw	r21,28(sp)
   209e0:	dd000617 	ldw	r20,24(sp)
   209e4:	dcc00517 	ldw	r19,20(sp)
   209e8:	dc800417 	ldw	r18,16(sp)
   209ec:	dc400317 	ldw	r17,12(sp)
   209f0:	dc000217 	ldw	r16,8(sp)
   209f4:	dec00c04 	addi	sp,sp,48
   209f8:	f800283a 	ret
   209fc:	800b883a 	mov	r5,r16
   20a00:	a809883a 	mov	r4,r21
   20a04:	00223740 	call	22374 <__swsetup_r>
   20a08:	1000ee1e 	bne	r2,zero,20dc4 <__sfvwrite_r+0x4b0>
   20a0c:	80c0030b 	ldhu	r3,12(r16)
   20a10:	a4400017 	ldw	r17,0(r20)
   20a14:	1880008c 	andi	r2,r3,2
   20a18:	103fd61e 	bne	r2,zero,20974 <__sfvwrite_r+0x60>
   20a1c:	1880004c 	andi	r2,r3,1
   20a20:	1000421e 	bne	r2,zero,20b2c <__sfvwrite_r+0x218>
   20a24:	0039883a 	mov	fp,zero
   20a28:	0025883a 	mov	r18,zero
   20a2c:	90001a26 	beq	r18,zero,20a98 <__sfvwrite_r+0x184>
   20a30:	1880800c 	andi	r2,r3,512
   20a34:	84c00217 	ldw	r19,8(r16)
   20a38:	10002126 	beq	r2,zero,20ac0 <__sfvwrite_r+0x1ac>
   20a3c:	982f883a 	mov	r23,r19
   20a40:	94c09636 	bltu	r18,r19,20c9c <__sfvwrite_r+0x388>
   20a44:	1881200c 	andi	r2,r3,1152
   20a48:	1000a11e 	bne	r2,zero,20cd0 <__sfvwrite_r+0x3bc>
   20a4c:	81000017 	ldw	r4,0(r16)
   20a50:	b80d883a 	mov	r6,r23
   20a54:	e00b883a 	mov	r5,fp
   20a58:	002199c0 	call	2199c <memmove>
   20a5c:	80c00217 	ldw	r3,8(r16)
   20a60:	81000017 	ldw	r4,0(r16)
   20a64:	9005883a 	mov	r2,r18
   20a68:	1ce7c83a 	sub	r19,r3,r19
   20a6c:	25cf883a 	add	r7,r4,r23
   20a70:	84c00215 	stw	r19,8(r16)
   20a74:	81c00015 	stw	r7,0(r16)
   20a78:	a0c00217 	ldw	r3,8(r20)
   20a7c:	e0b9883a 	add	fp,fp,r2
   20a80:	90a5c83a 	sub	r18,r18,r2
   20a84:	18a7c83a 	sub	r19,r3,r2
   20a88:	a4c00215 	stw	r19,8(r20)
   20a8c:	983fce26 	beq	r19,zero,209c8 <__sfvwrite_r+0xb4>
   20a90:	80c0030b 	ldhu	r3,12(r16)
   20a94:	903fe61e 	bne	r18,zero,20a30 <__sfvwrite_r+0x11c>
   20a98:	8f000017 	ldw	fp,0(r17)
   20a9c:	8c800117 	ldw	r18,4(r17)
   20aa0:	8c400204 	addi	r17,r17,8
   20aa4:	003fe106 	br	20a2c <__sfvwrite_r+0x118>
   20aa8:	8cc00017 	ldw	r19,0(r17)
   20aac:	8c800117 	ldw	r18,4(r17)
   20ab0:	8c400204 	addi	r17,r17,8
   20ab4:	003fb306 	br	20984 <__sfvwrite_r+0x70>
   20ab8:	0005883a 	mov	r2,zero
   20abc:	f800283a 	ret
   20ac0:	81000017 	ldw	r4,0(r16)
   20ac4:	80800417 	ldw	r2,16(r16)
   20ac8:	11005a36 	bltu	r2,r4,20c34 <__sfvwrite_r+0x320>
   20acc:	85c00517 	ldw	r23,20(r16)
   20ad0:	95c05836 	bltu	r18,r23,20c34 <__sfvwrite_r+0x320>
   20ad4:	00a00034 	movhi	r2,32768
   20ad8:	10bfffc4 	addi	r2,r2,-1
   20adc:	9009883a 	mov	r4,r18
   20ae0:	1480012e 	bgeu	r2,r18,20ae8 <__sfvwrite_r+0x1d4>
   20ae4:	1009883a 	mov	r4,r2
   20ae8:	b80b883a 	mov	r5,r23
   20aec:	00230280 	call	23028 <__divsi3>
   20af0:	b80b883a 	mov	r5,r23
   20af4:	1009883a 	mov	r4,r2
   20af8:	00231dc0 	call	231dc <__mulsi3>
   20afc:	81400717 	ldw	r5,28(r16)
   20b00:	80c00917 	ldw	r3,36(r16)
   20b04:	100f883a 	mov	r7,r2
   20b08:	e00d883a 	mov	r6,fp
   20b0c:	a809883a 	mov	r4,r21
   20b10:	183ee83a 	callr	r3
   20b14:	00bfd816 	blt	zero,r2,20a78 <__sfvwrite_r+0x164>
   20b18:	8080030b 	ldhu	r2,12(r16)
   20b1c:	10801014 	ori	r2,r2,64
   20b20:	8080030d 	sth	r2,12(r16)
   20b24:	00bfffc4 	movi	r2,-1
   20b28:	003fa806 	br	209cc <__sfvwrite_r+0xb8>
   20b2c:	0027883a 	mov	r19,zero
   20b30:	0011883a 	mov	r8,zero
   20b34:	0039883a 	mov	fp,zero
   20b38:	0025883a 	mov	r18,zero
   20b3c:	90001f26 	beq	r18,zero,20bbc <__sfvwrite_r+0x2a8>
   20b40:	40005a26 	beq	r8,zero,20cac <__sfvwrite_r+0x398>
   20b44:	982d883a 	mov	r22,r19
   20b48:	94c0012e 	bgeu	r18,r19,20b50 <__sfvwrite_r+0x23c>
   20b4c:	902d883a 	mov	r22,r18
   20b50:	81000017 	ldw	r4,0(r16)
   20b54:	80800417 	ldw	r2,16(r16)
   20b58:	b02f883a 	mov	r23,r22
   20b5c:	81c00517 	ldw	r7,20(r16)
   20b60:	1100032e 	bgeu	r2,r4,20b70 <__sfvwrite_r+0x25c>
   20b64:	80c00217 	ldw	r3,8(r16)
   20b68:	38c7883a 	add	r3,r7,r3
   20b6c:	1d801816 	blt	r3,r22,20bd0 <__sfvwrite_r+0x2bc>
   20b70:	b1c03e16 	blt	r22,r7,20c6c <__sfvwrite_r+0x358>
   20b74:	80800917 	ldw	r2,36(r16)
   20b78:	81400717 	ldw	r5,28(r16)
   20b7c:	e00d883a 	mov	r6,fp
   20b80:	da000115 	stw	r8,4(sp)
   20b84:	a809883a 	mov	r4,r21
   20b88:	103ee83a 	callr	r2
   20b8c:	102f883a 	mov	r23,r2
   20b90:	da000117 	ldw	r8,4(sp)
   20b94:	00bfe00e 	bge	zero,r2,20b18 <__sfvwrite_r+0x204>
   20b98:	9de7c83a 	sub	r19,r19,r23
   20b9c:	98001f26 	beq	r19,zero,20c1c <__sfvwrite_r+0x308>
   20ba0:	a0800217 	ldw	r2,8(r20)
   20ba4:	e5f9883a 	add	fp,fp,r23
   20ba8:	95e5c83a 	sub	r18,r18,r23
   20bac:	15efc83a 	sub	r23,r2,r23
   20bb0:	a5c00215 	stw	r23,8(r20)
   20bb4:	b83f8426 	beq	r23,zero,209c8 <__sfvwrite_r+0xb4>
   20bb8:	903fe11e 	bne	r18,zero,20b40 <__sfvwrite_r+0x22c>
   20bbc:	8f000017 	ldw	fp,0(r17)
   20bc0:	8c800117 	ldw	r18,4(r17)
   20bc4:	0011883a 	mov	r8,zero
   20bc8:	8c400204 	addi	r17,r17,8
   20bcc:	003fdb06 	br	20b3c <__sfvwrite_r+0x228>
   20bd0:	180d883a 	mov	r6,r3
   20bd4:	e00b883a 	mov	r5,fp
   20bd8:	da000115 	stw	r8,4(sp)
   20bdc:	d8c00015 	stw	r3,0(sp)
   20be0:	002199c0 	call	2199c <memmove>
   20be4:	d8c00017 	ldw	r3,0(sp)
   20be8:	80800017 	ldw	r2,0(r16)
   20bec:	800b883a 	mov	r5,r16
   20bf0:	a809883a 	mov	r4,r21
   20bf4:	10c5883a 	add	r2,r2,r3
   20bf8:	80800015 	stw	r2,0(r16)
   20bfc:	d8c00015 	stw	r3,0(sp)
   20c00:	002283c0 	call	2283c <_fflush_r>
   20c04:	d8c00017 	ldw	r3,0(sp)
   20c08:	da000117 	ldw	r8,4(sp)
   20c0c:	103fc21e 	bne	r2,zero,20b18 <__sfvwrite_r+0x204>
   20c10:	182f883a 	mov	r23,r3
   20c14:	9de7c83a 	sub	r19,r19,r23
   20c18:	983fe11e 	bne	r19,zero,20ba0 <__sfvwrite_r+0x28c>
   20c1c:	800b883a 	mov	r5,r16
   20c20:	a809883a 	mov	r4,r21
   20c24:	002283c0 	call	2283c <_fflush_r>
   20c28:	103fbb1e 	bne	r2,zero,20b18 <__sfvwrite_r+0x204>
   20c2c:	0011883a 	mov	r8,zero
   20c30:	003fdb06 	br	20ba0 <__sfvwrite_r+0x28c>
   20c34:	94c0012e 	bgeu	r18,r19,20c3c <__sfvwrite_r+0x328>
   20c38:	9027883a 	mov	r19,r18
   20c3c:	980d883a 	mov	r6,r19
   20c40:	e00b883a 	mov	r5,fp
   20c44:	002199c0 	call	2199c <memmove>
   20c48:	80800217 	ldw	r2,8(r16)
   20c4c:	80c00017 	ldw	r3,0(r16)
   20c50:	14c5c83a 	sub	r2,r2,r19
   20c54:	1cc7883a 	add	r3,r3,r19
   20c58:	80800215 	stw	r2,8(r16)
   20c5c:	80c00015 	stw	r3,0(r16)
   20c60:	10004326 	beq	r2,zero,20d70 <__sfvwrite_r+0x45c>
   20c64:	9805883a 	mov	r2,r19
   20c68:	003f8306 	br	20a78 <__sfvwrite_r+0x164>
   20c6c:	b00d883a 	mov	r6,r22
   20c70:	e00b883a 	mov	r5,fp
   20c74:	da000115 	stw	r8,4(sp)
   20c78:	002199c0 	call	2199c <memmove>
   20c7c:	80800217 	ldw	r2,8(r16)
   20c80:	80c00017 	ldw	r3,0(r16)
   20c84:	da000117 	ldw	r8,4(sp)
   20c88:	1585c83a 	sub	r2,r2,r22
   20c8c:	1dad883a 	add	r22,r3,r22
   20c90:	80800215 	stw	r2,8(r16)
   20c94:	85800015 	stw	r22,0(r16)
   20c98:	003fbf06 	br	20b98 <__sfvwrite_r+0x284>
   20c9c:	81000017 	ldw	r4,0(r16)
   20ca0:	9027883a 	mov	r19,r18
   20ca4:	902f883a 	mov	r23,r18
   20ca8:	003f6906 	br	20a50 <__sfvwrite_r+0x13c>
   20cac:	900d883a 	mov	r6,r18
   20cb0:	01400284 	movi	r5,10
   20cb4:	e009883a 	mov	r4,fp
   20cb8:	00217700 	call	21770 <memchr>
   20cbc:	10003e26 	beq	r2,zero,20db8 <__sfvwrite_r+0x4a4>
   20cc0:	10800044 	addi	r2,r2,1
   20cc4:	1727c83a 	sub	r19,r2,fp
   20cc8:	02000044 	movi	r8,1
   20ccc:	003f9d06 	br	20b44 <__sfvwrite_r+0x230>
   20cd0:	80800517 	ldw	r2,20(r16)
   20cd4:	81400417 	ldw	r5,16(r16)
   20cd8:	81c00017 	ldw	r7,0(r16)
   20cdc:	10a7883a 	add	r19,r2,r2
   20ce0:	9885883a 	add	r2,r19,r2
   20ce4:	1026d7fa 	srli	r19,r2,31
   20ce8:	396dc83a 	sub	r22,r7,r5
   20cec:	b1000044 	addi	r4,r22,1
   20cf0:	9885883a 	add	r2,r19,r2
   20cf4:	1027d07a 	srai	r19,r2,1
   20cf8:	2485883a 	add	r2,r4,r18
   20cfc:	980d883a 	mov	r6,r19
   20d00:	9880022e 	bgeu	r19,r2,20d0c <__sfvwrite_r+0x3f8>
   20d04:	1027883a 	mov	r19,r2
   20d08:	100d883a 	mov	r6,r2
   20d0c:	18c1000c 	andi	r3,r3,1024
   20d10:	18001c26 	beq	r3,zero,20d84 <__sfvwrite_r+0x470>
   20d14:	300b883a 	mov	r5,r6
   20d18:	a809883a 	mov	r4,r21
   20d1c:	0020f640 	call	20f64 <_malloc_r>
   20d20:	102f883a 	mov	r23,r2
   20d24:	10002926 	beq	r2,zero,20dcc <__sfvwrite_r+0x4b8>
   20d28:	81400417 	ldw	r5,16(r16)
   20d2c:	b00d883a 	mov	r6,r22
   20d30:	1009883a 	mov	r4,r2
   20d34:	00218540 	call	21854 <memcpy>
   20d38:	8080030b 	ldhu	r2,12(r16)
   20d3c:	00fedfc4 	movi	r3,-1153
   20d40:	10c4703a 	and	r2,r2,r3
   20d44:	10802014 	ori	r2,r2,128
   20d48:	8080030d 	sth	r2,12(r16)
   20d4c:	bd89883a 	add	r4,r23,r22
   20d50:	9d8fc83a 	sub	r7,r19,r22
   20d54:	85c00415 	stw	r23,16(r16)
   20d58:	84c00515 	stw	r19,20(r16)
   20d5c:	81000015 	stw	r4,0(r16)
   20d60:	9027883a 	mov	r19,r18
   20d64:	81c00215 	stw	r7,8(r16)
   20d68:	902f883a 	mov	r23,r18
   20d6c:	003f3806 	br	20a50 <__sfvwrite_r+0x13c>
   20d70:	800b883a 	mov	r5,r16
   20d74:	a809883a 	mov	r4,r21
   20d78:	002283c0 	call	2283c <_fflush_r>
   20d7c:	103fb926 	beq	r2,zero,20c64 <__sfvwrite_r+0x350>
   20d80:	003f6506 	br	20b18 <__sfvwrite_r+0x204>
   20d84:	a809883a 	mov	r4,r21
   20d88:	0021c200 	call	21c20 <_realloc_r>
   20d8c:	102f883a 	mov	r23,r2
   20d90:	103fee1e 	bne	r2,zero,20d4c <__sfvwrite_r+0x438>
   20d94:	81400417 	ldw	r5,16(r16)
   20d98:	a809883a 	mov	r4,r21
   20d9c:	00229ec0 	call	229ec <_free_r>
   20da0:	8080030b 	ldhu	r2,12(r16)
   20da4:	00ffdfc4 	movi	r3,-129
   20da8:	1884703a 	and	r2,r3,r2
   20dac:	00c00304 	movi	r3,12
   20db0:	a8c00015 	stw	r3,0(r21)
   20db4:	003f5906 	br	20b1c <__sfvwrite_r+0x208>
   20db8:	94c00044 	addi	r19,r18,1
   20dbc:	02000044 	movi	r8,1
   20dc0:	003f6006 	br	20b44 <__sfvwrite_r+0x230>
   20dc4:	00bfffc4 	movi	r2,-1
   20dc8:	003f0006 	br	209cc <__sfvwrite_r+0xb8>
   20dcc:	00800304 	movi	r2,12
   20dd0:	a8800015 	stw	r2,0(r21)
   20dd4:	8080030b 	ldhu	r2,12(r16)
   20dd8:	003f5006 	br	20b1c <__sfvwrite_r+0x208>

00020ddc <_fwalk>:
   20ddc:	defff704 	addi	sp,sp,-36
   20de0:	dd000415 	stw	r20,16(sp)
   20de4:	dfc00815 	stw	ra,32(sp)
   20de8:	ddc00715 	stw	r23,28(sp)
   20dec:	dd800615 	stw	r22,24(sp)
   20df0:	dd400515 	stw	r21,20(sp)
   20df4:	dcc00315 	stw	r19,12(sp)
   20df8:	dc800215 	stw	r18,8(sp)
   20dfc:	dc400115 	stw	r17,4(sp)
   20e00:	dc000015 	stw	r16,0(sp)
   20e04:	2500b804 	addi	r20,r4,736
   20e08:	a0002326 	beq	r20,zero,20e98 <_fwalk+0xbc>
   20e0c:	282b883a 	mov	r21,r5
   20e10:	002f883a 	mov	r23,zero
   20e14:	05800044 	movi	r22,1
   20e18:	04ffffc4 	movi	r19,-1
   20e1c:	a4400117 	ldw	r17,4(r20)
   20e20:	a4800217 	ldw	r18,8(r20)
   20e24:	8c7fffc4 	addi	r17,r17,-1
   20e28:	88000d16 	blt	r17,zero,20e60 <_fwalk+0x84>
   20e2c:	94000304 	addi	r16,r18,12
   20e30:	94800384 	addi	r18,r18,14
   20e34:	8080000b 	ldhu	r2,0(r16)
   20e38:	8c7fffc4 	addi	r17,r17,-1
   20e3c:	813ffd04 	addi	r4,r16,-12
   20e40:	b080042e 	bgeu	r22,r2,20e54 <_fwalk+0x78>
   20e44:	9080000f 	ldh	r2,0(r18)
   20e48:	14c00226 	beq	r2,r19,20e54 <_fwalk+0x78>
   20e4c:	a83ee83a 	callr	r21
   20e50:	b8aeb03a 	or	r23,r23,r2
   20e54:	84001a04 	addi	r16,r16,104
   20e58:	94801a04 	addi	r18,r18,104
   20e5c:	8cfff51e 	bne	r17,r19,20e34 <_fwalk+0x58>
   20e60:	a5000017 	ldw	r20,0(r20)
   20e64:	a03fed1e 	bne	r20,zero,20e1c <_fwalk+0x40>
   20e68:	b805883a 	mov	r2,r23
   20e6c:	dfc00817 	ldw	ra,32(sp)
   20e70:	ddc00717 	ldw	r23,28(sp)
   20e74:	dd800617 	ldw	r22,24(sp)
   20e78:	dd400517 	ldw	r21,20(sp)
   20e7c:	dd000417 	ldw	r20,16(sp)
   20e80:	dcc00317 	ldw	r19,12(sp)
   20e84:	dc800217 	ldw	r18,8(sp)
   20e88:	dc400117 	ldw	r17,4(sp)
   20e8c:	dc000017 	ldw	r16,0(sp)
   20e90:	dec00904 	addi	sp,sp,36
   20e94:	f800283a 	ret
   20e98:	002f883a 	mov	r23,zero
   20e9c:	003ff206 	br	20e68 <_fwalk+0x8c>

00020ea0 <_fwalk_reent>:
   20ea0:	defff704 	addi	sp,sp,-36
   20ea4:	dd000415 	stw	r20,16(sp)
   20ea8:	dfc00815 	stw	ra,32(sp)
   20eac:	ddc00715 	stw	r23,28(sp)
   20eb0:	dd800615 	stw	r22,24(sp)
   20eb4:	dd400515 	stw	r21,20(sp)
   20eb8:	dcc00315 	stw	r19,12(sp)
   20ebc:	dc800215 	stw	r18,8(sp)
   20ec0:	dc400115 	stw	r17,4(sp)
   20ec4:	dc000015 	stw	r16,0(sp)
   20ec8:	2500b804 	addi	r20,r4,736
   20ecc:	a0002326 	beq	r20,zero,20f5c <_fwalk_reent+0xbc>
   20ed0:	282b883a 	mov	r21,r5
   20ed4:	2027883a 	mov	r19,r4
   20ed8:	002f883a 	mov	r23,zero
   20edc:	05800044 	movi	r22,1
   20ee0:	04bfffc4 	movi	r18,-1
   20ee4:	a4400117 	ldw	r17,4(r20)
   20ee8:	a4000217 	ldw	r16,8(r20)
   20eec:	8c7fffc4 	addi	r17,r17,-1
   20ef0:	88000c16 	blt	r17,zero,20f24 <_fwalk_reent+0x84>
   20ef4:	84000304 	addi	r16,r16,12
   20ef8:	8080000b 	ldhu	r2,0(r16)
   20efc:	8c7fffc4 	addi	r17,r17,-1
   20f00:	817ffd04 	addi	r5,r16,-12
   20f04:	b080052e 	bgeu	r22,r2,20f1c <_fwalk_reent+0x7c>
   20f08:	8080008f 	ldh	r2,2(r16)
   20f0c:	9809883a 	mov	r4,r19
   20f10:	14800226 	beq	r2,r18,20f1c <_fwalk_reent+0x7c>
   20f14:	a83ee83a 	callr	r21
   20f18:	b8aeb03a 	or	r23,r23,r2
   20f1c:	84001a04 	addi	r16,r16,104
   20f20:	8cbff51e 	bne	r17,r18,20ef8 <_fwalk_reent+0x58>
   20f24:	a5000017 	ldw	r20,0(r20)
   20f28:	a03fee1e 	bne	r20,zero,20ee4 <_fwalk_reent+0x44>
   20f2c:	b805883a 	mov	r2,r23
   20f30:	dfc00817 	ldw	ra,32(sp)
   20f34:	ddc00717 	ldw	r23,28(sp)
   20f38:	dd800617 	ldw	r22,24(sp)
   20f3c:	dd400517 	ldw	r21,20(sp)
   20f40:	dd000417 	ldw	r20,16(sp)
   20f44:	dcc00317 	ldw	r19,12(sp)
   20f48:	dc800217 	ldw	r18,8(sp)
   20f4c:	dc400117 	ldw	r17,4(sp)
   20f50:	dc000017 	ldw	r16,0(sp)
   20f54:	dec00904 	addi	sp,sp,36
   20f58:	f800283a 	ret
   20f5c:	002f883a 	mov	r23,zero
   20f60:	003ff206 	br	20f2c <_fwalk_reent+0x8c>

00020f64 <_malloc_r>:
   20f64:	defff504 	addi	sp,sp,-44
   20f68:	dc800315 	stw	r18,12(sp)
   20f6c:	dfc00a15 	stw	ra,40(sp)
   20f70:	df000915 	stw	fp,36(sp)
   20f74:	ddc00815 	stw	r23,32(sp)
   20f78:	dd800715 	stw	r22,28(sp)
   20f7c:	dd400615 	stw	r21,24(sp)
   20f80:	dd000515 	stw	r20,20(sp)
   20f84:	dcc00415 	stw	r19,16(sp)
   20f88:	dc400215 	stw	r17,8(sp)
   20f8c:	dc000115 	stw	r16,4(sp)
   20f90:	288002c4 	addi	r2,r5,11
   20f94:	00c00584 	movi	r3,22
   20f98:	2025883a 	mov	r18,r4
   20f9c:	18807f2e 	bgeu	r3,r2,2119c <_malloc_r+0x238>
   20fa0:	047ffe04 	movi	r17,-8
   20fa4:	1462703a 	and	r17,r2,r17
   20fa8:	8800a316 	blt	r17,zero,21238 <_malloc_r+0x2d4>
   20fac:	8940a236 	bltu	r17,r5,21238 <_malloc_r+0x2d4>
   20fb0:	00239200 	call	23920 <__malloc_lock>
   20fb4:	00807dc4 	movi	r2,503
   20fb8:	1441e92e 	bgeu	r2,r17,21760 <_malloc_r+0x7fc>
   20fbc:	8804d27a 	srli	r2,r17,9
   20fc0:	1000a126 	beq	r2,zero,21248 <_malloc_r+0x2e4>
   20fc4:	00c00104 	movi	r3,4
   20fc8:	18811e36 	bltu	r3,r2,21444 <_malloc_r+0x4e0>
   20fcc:	8804d1ba 	srli	r2,r17,6
   20fd0:	12000e44 	addi	r8,r2,57
   20fd4:	11c00e04 	addi	r7,r2,56
   20fd8:	4209883a 	add	r4,r8,r8
   20fdc:	04c000b4 	movhi	r19,2
   20fe0:	2109883a 	add	r4,r4,r4
   20fe4:	9cd49804 	addi	r19,r19,21088
   20fe8:	2109883a 	add	r4,r4,r4
   20fec:	9909883a 	add	r4,r19,r4
   20ff0:	24000117 	ldw	r16,4(r4)
   20ff4:	213ffe04 	addi	r4,r4,-8
   20ff8:	24009726 	beq	r4,r16,21258 <_malloc_r+0x2f4>
   20ffc:	80800117 	ldw	r2,4(r16)
   21000:	01bfff04 	movi	r6,-4
   21004:	014003c4 	movi	r5,15
   21008:	1184703a 	and	r2,r2,r6
   2100c:	1447c83a 	sub	r3,r2,r17
   21010:	28c00716 	blt	r5,r3,21030 <_malloc_r+0xcc>
   21014:	1800920e 	bge	r3,zero,21260 <_malloc_r+0x2fc>
   21018:	84000317 	ldw	r16,12(r16)
   2101c:	24008e26 	beq	r4,r16,21258 <_malloc_r+0x2f4>
   21020:	80800117 	ldw	r2,4(r16)
   21024:	1184703a 	and	r2,r2,r6
   21028:	1447c83a 	sub	r3,r2,r17
   2102c:	28fff90e 	bge	r5,r3,21014 <_malloc_r+0xb0>
   21030:	3809883a 	mov	r4,r7
   21034:	018000b4 	movhi	r6,2
   21038:	9c000417 	ldw	r16,16(r19)
   2103c:	31949804 	addi	r6,r6,21088
   21040:	32000204 	addi	r8,r6,8
   21044:	82013426 	beq	r16,r8,21518 <_malloc_r+0x5b4>
   21048:	80c00117 	ldw	r3,4(r16)
   2104c:	00bfff04 	movi	r2,-4
   21050:	188e703a 	and	r7,r3,r2
   21054:	3c45c83a 	sub	r2,r7,r17
   21058:	00c003c4 	movi	r3,15
   2105c:	18811f16 	blt	r3,r2,214dc <_malloc_r+0x578>
   21060:	32000515 	stw	r8,20(r6)
   21064:	32000415 	stw	r8,16(r6)
   21068:	10007f0e 	bge	r2,zero,21268 <_malloc_r+0x304>
   2106c:	00807fc4 	movi	r2,511
   21070:	11c0fd36 	bltu	r2,r7,21468 <_malloc_r+0x504>
   21074:	3806d0fa 	srli	r3,r7,3
   21078:	01c00044 	movi	r7,1
   2107c:	30800117 	ldw	r2,4(r6)
   21080:	19400044 	addi	r5,r3,1
   21084:	294b883a 	add	r5,r5,r5
   21088:	1807d0ba 	srai	r3,r3,2
   2108c:	294b883a 	add	r5,r5,r5
   21090:	294b883a 	add	r5,r5,r5
   21094:	298b883a 	add	r5,r5,r6
   21098:	38c6983a 	sll	r3,r7,r3
   2109c:	29c00017 	ldw	r7,0(r5)
   210a0:	2a7ffe04 	addi	r9,r5,-8
   210a4:	1886b03a 	or	r3,r3,r2
   210a8:	82400315 	stw	r9,12(r16)
   210ac:	81c00215 	stw	r7,8(r16)
   210b0:	30c00115 	stw	r3,4(r6)
   210b4:	2c000015 	stw	r16,0(r5)
   210b8:	3c000315 	stw	r16,12(r7)
   210bc:	2005d0ba 	srai	r2,r4,2
   210c0:	01400044 	movi	r5,1
   210c4:	288a983a 	sll	r5,r5,r2
   210c8:	19406f36 	bltu	r3,r5,21288 <_malloc_r+0x324>
   210cc:	28c4703a 	and	r2,r5,r3
   210d0:	10000a1e 	bne	r2,zero,210fc <_malloc_r+0x198>
   210d4:	00bfff04 	movi	r2,-4
   210d8:	294b883a 	add	r5,r5,r5
   210dc:	2088703a 	and	r4,r4,r2
   210e0:	28c4703a 	and	r2,r5,r3
   210e4:	21000104 	addi	r4,r4,4
   210e8:	1000041e 	bne	r2,zero,210fc <_malloc_r+0x198>
   210ec:	294b883a 	add	r5,r5,r5
   210f0:	28c4703a 	and	r2,r5,r3
   210f4:	21000104 	addi	r4,r4,4
   210f8:	103ffc26 	beq	r2,zero,210ec <_malloc_r+0x188>
   210fc:	02bfff04 	movi	r10,-4
   21100:	024003c4 	movi	r9,15
   21104:	21800044 	addi	r6,r4,1
   21108:	318d883a 	add	r6,r6,r6
   2110c:	318d883a 	add	r6,r6,r6
   21110:	318d883a 	add	r6,r6,r6
   21114:	998d883a 	add	r6,r19,r6
   21118:	333ffe04 	addi	r12,r6,-8
   2111c:	2017883a 	mov	r11,r4
   21120:	31800104 	addi	r6,r6,4
   21124:	34000017 	ldw	r16,0(r6)
   21128:	31fffd04 	addi	r7,r6,-12
   2112c:	81c0041e 	bne	r16,r7,21140 <_malloc_r+0x1dc>
   21130:	0000fb06 	br	21520 <_malloc_r+0x5bc>
   21134:	1801030e 	bge	r3,zero,21544 <_malloc_r+0x5e0>
   21138:	84000317 	ldw	r16,12(r16)
   2113c:	81c0f826 	beq	r16,r7,21520 <_malloc_r+0x5bc>
   21140:	80800117 	ldw	r2,4(r16)
   21144:	1284703a 	and	r2,r2,r10
   21148:	1447c83a 	sub	r3,r2,r17
   2114c:	48fff90e 	bge	r9,r3,21134 <_malloc_r+0x1d0>
   21150:	80800317 	ldw	r2,12(r16)
   21154:	81000217 	ldw	r4,8(r16)
   21158:	89400054 	ori	r5,r17,1
   2115c:	81400115 	stw	r5,4(r16)
   21160:	20800315 	stw	r2,12(r4)
   21164:	11000215 	stw	r4,8(r2)
   21168:	8463883a 	add	r17,r16,r17
   2116c:	9c400515 	stw	r17,20(r19)
   21170:	9c400415 	stw	r17,16(r19)
   21174:	18800054 	ori	r2,r3,1
   21178:	88800115 	stw	r2,4(r17)
   2117c:	8a000315 	stw	r8,12(r17)
   21180:	8a000215 	stw	r8,8(r17)
   21184:	88e3883a 	add	r17,r17,r3
   21188:	88c00015 	stw	r3,0(r17)
   2118c:	9009883a 	mov	r4,r18
   21190:	00239440 	call	23944 <__malloc_unlock>
   21194:	80800204 	addi	r2,r16,8
   21198:	00001b06 	br	21208 <_malloc_r+0x2a4>
   2119c:	04400404 	movi	r17,16
   211a0:	89402536 	bltu	r17,r5,21238 <_malloc_r+0x2d4>
   211a4:	00239200 	call	23920 <__malloc_lock>
   211a8:	00800184 	movi	r2,6
   211ac:	01000084 	movi	r4,2
   211b0:	04c000b4 	movhi	r19,2
   211b4:	1085883a 	add	r2,r2,r2
   211b8:	9cd49804 	addi	r19,r19,21088
   211bc:	1085883a 	add	r2,r2,r2
   211c0:	9885883a 	add	r2,r19,r2
   211c4:	14000117 	ldw	r16,4(r2)
   211c8:	10fffe04 	addi	r3,r2,-8
   211cc:	80c0d926 	beq	r16,r3,21534 <_malloc_r+0x5d0>
   211d0:	80c00117 	ldw	r3,4(r16)
   211d4:	81000317 	ldw	r4,12(r16)
   211d8:	00bfff04 	movi	r2,-4
   211dc:	1884703a 	and	r2,r3,r2
   211e0:	81400217 	ldw	r5,8(r16)
   211e4:	8085883a 	add	r2,r16,r2
   211e8:	10c00117 	ldw	r3,4(r2)
   211ec:	29000315 	stw	r4,12(r5)
   211f0:	21400215 	stw	r5,8(r4)
   211f4:	18c00054 	ori	r3,r3,1
   211f8:	10c00115 	stw	r3,4(r2)
   211fc:	9009883a 	mov	r4,r18
   21200:	00239440 	call	23944 <__malloc_unlock>
   21204:	80800204 	addi	r2,r16,8
   21208:	dfc00a17 	ldw	ra,40(sp)
   2120c:	df000917 	ldw	fp,36(sp)
   21210:	ddc00817 	ldw	r23,32(sp)
   21214:	dd800717 	ldw	r22,28(sp)
   21218:	dd400617 	ldw	r21,24(sp)
   2121c:	dd000517 	ldw	r20,20(sp)
   21220:	dcc00417 	ldw	r19,16(sp)
   21224:	dc800317 	ldw	r18,12(sp)
   21228:	dc400217 	ldw	r17,8(sp)
   2122c:	dc000117 	ldw	r16,4(sp)
   21230:	dec00b04 	addi	sp,sp,44
   21234:	f800283a 	ret
   21238:	00800304 	movi	r2,12
   2123c:	90800015 	stw	r2,0(r18)
   21240:	0005883a 	mov	r2,zero
   21244:	003ff006 	br	21208 <_malloc_r+0x2a4>
   21248:	01002004 	movi	r4,128
   2124c:	02001004 	movi	r8,64
   21250:	01c00fc4 	movi	r7,63
   21254:	003f6106 	br	20fdc <_malloc_r+0x78>
   21258:	4009883a 	mov	r4,r8
   2125c:	003f7506 	br	21034 <_malloc_r+0xd0>
   21260:	81000317 	ldw	r4,12(r16)
   21264:	003fde06 	br	211e0 <_malloc_r+0x27c>
   21268:	81c5883a 	add	r2,r16,r7
   2126c:	11400117 	ldw	r5,4(r2)
   21270:	9009883a 	mov	r4,r18
   21274:	29400054 	ori	r5,r5,1
   21278:	11400115 	stw	r5,4(r2)
   2127c:	00239440 	call	23944 <__malloc_unlock>
   21280:	80800204 	addi	r2,r16,8
   21284:	003fe006 	br	21208 <_malloc_r+0x2a4>
   21288:	9c000217 	ldw	r16,8(r19)
   2128c:	00bfff04 	movi	r2,-4
   21290:	85800117 	ldw	r22,4(r16)
   21294:	b0ac703a 	and	r22,r22,r2
   21298:	b4400336 	bltu	r22,r17,212a8 <_malloc_r+0x344>
   2129c:	b445c83a 	sub	r2,r22,r17
   212a0:	00c003c4 	movi	r3,15
   212a4:	18805d16 	blt	r3,r2,2141c <_malloc_r+0x4b8>
   212a8:	05c000b4 	movhi	r23,2
   212ac:	008000b4 	movhi	r2,2
   212b0:	1098ac04 	addi	r2,r2,25264
   212b4:	bdd61104 	addi	r23,r23,22596
   212b8:	15400017 	ldw	r21,0(r2)
   212bc:	b8c00017 	ldw	r3,0(r23)
   212c0:	00bfffc4 	movi	r2,-1
   212c4:	858d883a 	add	r6,r16,r22
   212c8:	8d6b883a 	add	r21,r17,r21
   212cc:	1880ea26 	beq	r3,r2,21678 <_malloc_r+0x714>
   212d0:	ad4403c4 	addi	r21,r21,4111
   212d4:	00bc0004 	movi	r2,-4096
   212d8:	a8aa703a 	and	r21,r21,r2
   212dc:	a80b883a 	mov	r5,r21
   212e0:	9009883a 	mov	r4,r18
   212e4:	d9800015 	stw	r6,0(sp)
   212e8:	00221840 	call	22184 <_sbrk_r>
   212ec:	1029883a 	mov	r20,r2
   212f0:	00bfffc4 	movi	r2,-1
   212f4:	d9800017 	ldw	r6,0(sp)
   212f8:	a080e826 	beq	r20,r2,2169c <_malloc_r+0x738>
   212fc:	a180a636 	bltu	r20,r6,21598 <_malloc_r+0x634>
   21300:	070000b4 	movhi	fp,2
   21304:	e718b304 	addi	fp,fp,25292
   21308:	e0800017 	ldw	r2,0(fp)
   2130c:	a887883a 	add	r3,r21,r2
   21310:	e0c00015 	stw	r3,0(fp)
   21314:	3500e626 	beq	r6,r20,216b0 <_malloc_r+0x74c>
   21318:	b9000017 	ldw	r4,0(r23)
   2131c:	00bfffc4 	movi	r2,-1
   21320:	2080ee26 	beq	r4,r2,216dc <_malloc_r+0x778>
   21324:	a185c83a 	sub	r2,r20,r6
   21328:	10c5883a 	add	r2,r2,r3
   2132c:	e0800015 	stw	r2,0(fp)
   21330:	a0c001cc 	andi	r3,r20,7
   21334:	1800bc26 	beq	r3,zero,21628 <_malloc_r+0x6c4>
   21338:	a0e9c83a 	sub	r20,r20,r3
   2133c:	00840204 	movi	r2,4104
   21340:	a5000204 	addi	r20,r20,8
   21344:	10c7c83a 	sub	r3,r2,r3
   21348:	a545883a 	add	r2,r20,r21
   2134c:	1083ffcc 	andi	r2,r2,4095
   21350:	18abc83a 	sub	r21,r3,r2
   21354:	a80b883a 	mov	r5,r21
   21358:	9009883a 	mov	r4,r18
   2135c:	00221840 	call	22184 <_sbrk_r>
   21360:	00ffffc4 	movi	r3,-1
   21364:	10c0e126 	beq	r2,r3,216ec <_malloc_r+0x788>
   21368:	1505c83a 	sub	r2,r2,r20
   2136c:	1545883a 	add	r2,r2,r21
   21370:	10800054 	ori	r2,r2,1
   21374:	e0c00017 	ldw	r3,0(fp)
   21378:	9d000215 	stw	r20,8(r19)
   2137c:	a0800115 	stw	r2,4(r20)
   21380:	a8c7883a 	add	r3,r21,r3
   21384:	e0c00015 	stw	r3,0(fp)
   21388:	84c00e26 	beq	r16,r19,213c4 <_malloc_r+0x460>
   2138c:	018003c4 	movi	r6,15
   21390:	3580a72e 	bgeu	r6,r22,21630 <_malloc_r+0x6cc>
   21394:	81400117 	ldw	r5,4(r16)
   21398:	013ffe04 	movi	r4,-8
   2139c:	b0bffd04 	addi	r2,r22,-12
   213a0:	1104703a 	and	r2,r2,r4
   213a4:	2900004c 	andi	r4,r5,1
   213a8:	2088b03a 	or	r4,r4,r2
   213ac:	81000115 	stw	r4,4(r16)
   213b0:	01400144 	movi	r5,5
   213b4:	8089883a 	add	r4,r16,r2
   213b8:	21400115 	stw	r5,4(r4)
   213bc:	21400215 	stw	r5,8(r4)
   213c0:	3080cd36 	bltu	r6,r2,216f8 <_malloc_r+0x794>
   213c4:	008000b4 	movhi	r2,2
   213c8:	1098ab04 	addi	r2,r2,25260
   213cc:	11000017 	ldw	r4,0(r2)
   213d0:	20c0012e 	bgeu	r4,r3,213d8 <_malloc_r+0x474>
   213d4:	10c00015 	stw	r3,0(r2)
   213d8:	008000b4 	movhi	r2,2
   213dc:	1098aa04 	addi	r2,r2,25256
   213e0:	11000017 	ldw	r4,0(r2)
   213e4:	9c000217 	ldw	r16,8(r19)
   213e8:	20c0012e 	bgeu	r4,r3,213f0 <_malloc_r+0x48c>
   213ec:	10c00015 	stw	r3,0(r2)
   213f0:	80c00117 	ldw	r3,4(r16)
   213f4:	00bfff04 	movi	r2,-4
   213f8:	1886703a 	and	r3,r3,r2
   213fc:	1c45c83a 	sub	r2,r3,r17
   21400:	1c400236 	bltu	r3,r17,2140c <_malloc_r+0x4a8>
   21404:	00c003c4 	movi	r3,15
   21408:	18800416 	blt	r3,r2,2141c <_malloc_r+0x4b8>
   2140c:	9009883a 	mov	r4,r18
   21410:	00239440 	call	23944 <__malloc_unlock>
   21414:	0005883a 	mov	r2,zero
   21418:	003f7b06 	br	21208 <_malloc_r+0x2a4>
   2141c:	88c00054 	ori	r3,r17,1
   21420:	80c00115 	stw	r3,4(r16)
   21424:	8463883a 	add	r17,r16,r17
   21428:	10800054 	ori	r2,r2,1
   2142c:	9c400215 	stw	r17,8(r19)
   21430:	88800115 	stw	r2,4(r17)
   21434:	9009883a 	mov	r4,r18
   21438:	00239440 	call	23944 <__malloc_unlock>
   2143c:	80800204 	addi	r2,r16,8
   21440:	003f7106 	br	21208 <_malloc_r+0x2a4>
   21444:	00c00504 	movi	r3,20
   21448:	18804a2e 	bgeu	r3,r2,21574 <_malloc_r+0x610>
   2144c:	00c01504 	movi	r3,84
   21450:	18806e36 	bltu	r3,r2,2160c <_malloc_r+0x6a8>
   21454:	8804d33a 	srli	r2,r17,12
   21458:	12001bc4 	addi	r8,r2,111
   2145c:	11c01b84 	addi	r7,r2,110
   21460:	4209883a 	add	r4,r8,r8
   21464:	003edd06 	br	20fdc <_malloc_r+0x78>
   21468:	3804d27a 	srli	r2,r7,9
   2146c:	00c00104 	movi	r3,4
   21470:	1880442e 	bgeu	r3,r2,21584 <_malloc_r+0x620>
   21474:	00c00504 	movi	r3,20
   21478:	18808136 	bltu	r3,r2,21680 <_malloc_r+0x71c>
   2147c:	11401704 	addi	r5,r2,92
   21480:	10c016c4 	addi	r3,r2,91
   21484:	294b883a 	add	r5,r5,r5
   21488:	294b883a 	add	r5,r5,r5
   2148c:	294b883a 	add	r5,r5,r5
   21490:	994b883a 	add	r5,r19,r5
   21494:	28800017 	ldw	r2,0(r5)
   21498:	018000b4 	movhi	r6,2
   2149c:	297ffe04 	addi	r5,r5,-8
   214a0:	31949804 	addi	r6,r6,21088
   214a4:	28806526 	beq	r5,r2,2163c <_malloc_r+0x6d8>
   214a8:	01bfff04 	movi	r6,-4
   214ac:	10c00117 	ldw	r3,4(r2)
   214b0:	1986703a 	and	r3,r3,r6
   214b4:	38c0022e 	bgeu	r7,r3,214c0 <_malloc_r+0x55c>
   214b8:	10800217 	ldw	r2,8(r2)
   214bc:	28bffb1e 	bne	r5,r2,214ac <_malloc_r+0x548>
   214c0:	11400317 	ldw	r5,12(r2)
   214c4:	98c00117 	ldw	r3,4(r19)
   214c8:	81400315 	stw	r5,12(r16)
   214cc:	80800215 	stw	r2,8(r16)
   214d0:	2c000215 	stw	r16,8(r5)
   214d4:	14000315 	stw	r16,12(r2)
   214d8:	003ef806 	br	210bc <_malloc_r+0x158>
   214dc:	88c00054 	ori	r3,r17,1
   214e0:	80c00115 	stw	r3,4(r16)
   214e4:	8463883a 	add	r17,r16,r17
   214e8:	34400515 	stw	r17,20(r6)
   214ec:	34400415 	stw	r17,16(r6)
   214f0:	10c00054 	ori	r3,r2,1
   214f4:	8a000315 	stw	r8,12(r17)
   214f8:	8a000215 	stw	r8,8(r17)
   214fc:	88c00115 	stw	r3,4(r17)
   21500:	88a3883a 	add	r17,r17,r2
   21504:	88800015 	stw	r2,0(r17)
   21508:	9009883a 	mov	r4,r18
   2150c:	00239440 	call	23944 <__malloc_unlock>
   21510:	80800204 	addi	r2,r16,8
   21514:	003f3c06 	br	21208 <_malloc_r+0x2a4>
   21518:	30c00117 	ldw	r3,4(r6)
   2151c:	003ee706 	br	210bc <_malloc_r+0x158>
   21520:	5ac00044 	addi	r11,r11,1
   21524:	588000cc 	andi	r2,r11,3
   21528:	31800204 	addi	r6,r6,8
   2152c:	103efd1e 	bne	r2,zero,21124 <_malloc_r+0x1c0>
   21530:	00002406 	br	215c4 <_malloc_r+0x660>
   21534:	14000317 	ldw	r16,12(r2)
   21538:	143f251e 	bne	r2,r16,211d0 <_malloc_r+0x26c>
   2153c:	21000084 	addi	r4,r4,2
   21540:	003ebc06 	br	21034 <_malloc_r+0xd0>
   21544:	8085883a 	add	r2,r16,r2
   21548:	10c00117 	ldw	r3,4(r2)
   2154c:	81000317 	ldw	r4,12(r16)
   21550:	81400217 	ldw	r5,8(r16)
   21554:	18c00054 	ori	r3,r3,1
   21558:	10c00115 	stw	r3,4(r2)
   2155c:	29000315 	stw	r4,12(r5)
   21560:	21400215 	stw	r5,8(r4)
   21564:	9009883a 	mov	r4,r18
   21568:	00239440 	call	23944 <__malloc_unlock>
   2156c:	80800204 	addi	r2,r16,8
   21570:	003f2506 	br	21208 <_malloc_r+0x2a4>
   21574:	12001704 	addi	r8,r2,92
   21578:	11c016c4 	addi	r7,r2,91
   2157c:	4209883a 	add	r4,r8,r8
   21580:	003e9606 	br	20fdc <_malloc_r+0x78>
   21584:	3804d1ba 	srli	r2,r7,6
   21588:	11400e44 	addi	r5,r2,57
   2158c:	10c00e04 	addi	r3,r2,56
   21590:	294b883a 	add	r5,r5,r5
   21594:	003fbc06 	br	21488 <_malloc_r+0x524>
   21598:	84ff5926 	beq	r16,r19,21300 <_malloc_r+0x39c>
   2159c:	008000b4 	movhi	r2,2
   215a0:	10949804 	addi	r2,r2,21088
   215a4:	14000217 	ldw	r16,8(r2)
   215a8:	00bfff04 	movi	r2,-4
   215ac:	80c00117 	ldw	r3,4(r16)
   215b0:	1886703a 	and	r3,r3,r2
   215b4:	003f9106 	br	213fc <_malloc_r+0x498>
   215b8:	60800217 	ldw	r2,8(r12)
   215bc:	213fffc4 	addi	r4,r4,-1
   215c0:	1300651e 	bne	r2,r12,21758 <_malloc_r+0x7f4>
   215c4:	208000cc 	andi	r2,r4,3
   215c8:	633ffe04 	addi	r12,r12,-8
   215cc:	103ffa1e 	bne	r2,zero,215b8 <_malloc_r+0x654>
   215d0:	98800117 	ldw	r2,4(r19)
   215d4:	0146303a 	nor	r3,zero,r5
   215d8:	1884703a 	and	r2,r3,r2
   215dc:	98800115 	stw	r2,4(r19)
   215e0:	294b883a 	add	r5,r5,r5
   215e4:	117f2836 	bltu	r2,r5,21288 <_malloc_r+0x324>
   215e8:	283f2726 	beq	r5,zero,21288 <_malloc_r+0x324>
   215ec:	2886703a 	and	r3,r5,r2
   215f0:	5809883a 	mov	r4,r11
   215f4:	183ec31e 	bne	r3,zero,21104 <_malloc_r+0x1a0>
   215f8:	294b883a 	add	r5,r5,r5
   215fc:	2886703a 	and	r3,r5,r2
   21600:	21000104 	addi	r4,r4,4
   21604:	183ffc26 	beq	r3,zero,215f8 <_malloc_r+0x694>
   21608:	003ebe06 	br	21104 <_malloc_r+0x1a0>
   2160c:	00c05504 	movi	r3,340
   21610:	18801236 	bltu	r3,r2,2165c <_malloc_r+0x6f8>
   21614:	8804d3fa 	srli	r2,r17,15
   21618:	12001e04 	addi	r8,r2,120
   2161c:	11c01dc4 	addi	r7,r2,119
   21620:	4209883a 	add	r4,r8,r8
   21624:	003e6d06 	br	20fdc <_malloc_r+0x78>
   21628:	00c40004 	movi	r3,4096
   2162c:	003f4606 	br	21348 <_malloc_r+0x3e4>
   21630:	00800044 	movi	r2,1
   21634:	a0800115 	stw	r2,4(r20)
   21638:	003f7406 	br	2140c <_malloc_r+0x4a8>
   2163c:	1805d0ba 	srai	r2,r3,2
   21640:	01c00044 	movi	r7,1
   21644:	30c00117 	ldw	r3,4(r6)
   21648:	388e983a 	sll	r7,r7,r2
   2164c:	2805883a 	mov	r2,r5
   21650:	38c6b03a 	or	r3,r7,r3
   21654:	30c00115 	stw	r3,4(r6)
   21658:	003f9b06 	br	214c8 <_malloc_r+0x564>
   2165c:	00c15504 	movi	r3,1364
   21660:	18801a36 	bltu	r3,r2,216cc <_malloc_r+0x768>
   21664:	8804d4ba 	srli	r2,r17,18
   21668:	12001f44 	addi	r8,r2,125
   2166c:	11c01f04 	addi	r7,r2,124
   21670:	4209883a 	add	r4,r8,r8
   21674:	003e5906 	br	20fdc <_malloc_r+0x78>
   21678:	ad400404 	addi	r21,r21,16
   2167c:	003f1706 	br	212dc <_malloc_r+0x378>
   21680:	00c01504 	movi	r3,84
   21684:	18802336 	bltu	r3,r2,21714 <_malloc_r+0x7b0>
   21688:	3804d33a 	srli	r2,r7,12
   2168c:	11401bc4 	addi	r5,r2,111
   21690:	10c01b84 	addi	r3,r2,110
   21694:	294b883a 	add	r5,r5,r5
   21698:	003f7b06 	br	21488 <_malloc_r+0x524>
   2169c:	9c000217 	ldw	r16,8(r19)
   216a0:	00bfff04 	movi	r2,-4
   216a4:	80c00117 	ldw	r3,4(r16)
   216a8:	1886703a 	and	r3,r3,r2
   216ac:	003f5306 	br	213fc <_malloc_r+0x498>
   216b0:	3083ffcc 	andi	r2,r6,4095
   216b4:	103f181e 	bne	r2,zero,21318 <_malloc_r+0x3b4>
   216b8:	99000217 	ldw	r4,8(r19)
   216bc:	b545883a 	add	r2,r22,r21
   216c0:	10800054 	ori	r2,r2,1
   216c4:	20800115 	stw	r2,4(r4)
   216c8:	003f3e06 	br	213c4 <_malloc_r+0x460>
   216cc:	01003f84 	movi	r4,254
   216d0:	02001fc4 	movi	r8,127
   216d4:	01c01f84 	movi	r7,126
   216d8:	003e4006 	br	20fdc <_malloc_r+0x78>
   216dc:	008000b4 	movhi	r2,2
   216e0:	10961104 	addi	r2,r2,22596
   216e4:	15000015 	stw	r20,0(r2)
   216e8:	003f1106 	br	21330 <_malloc_r+0x3cc>
   216ec:	00800044 	movi	r2,1
   216f0:	002b883a 	mov	r21,zero
   216f4:	003f1f06 	br	21374 <_malloc_r+0x410>
   216f8:	81400204 	addi	r5,r16,8
   216fc:	9009883a 	mov	r4,r18
   21700:	00229ec0 	call	229ec <_free_r>
   21704:	008000b4 	movhi	r2,2
   21708:	1098b304 	addi	r2,r2,25292
   2170c:	10c00017 	ldw	r3,0(r2)
   21710:	003f2c06 	br	213c4 <_malloc_r+0x460>
   21714:	00c05504 	movi	r3,340
   21718:	18800536 	bltu	r3,r2,21730 <_malloc_r+0x7cc>
   2171c:	3804d3fa 	srli	r2,r7,15
   21720:	11401e04 	addi	r5,r2,120
   21724:	10c01dc4 	addi	r3,r2,119
   21728:	294b883a 	add	r5,r5,r5
   2172c:	003f5606 	br	21488 <_malloc_r+0x524>
   21730:	00c15504 	movi	r3,1364
   21734:	18800536 	bltu	r3,r2,2174c <_malloc_r+0x7e8>
   21738:	3804d4ba 	srli	r2,r7,18
   2173c:	11401f44 	addi	r5,r2,125
   21740:	10c01f04 	addi	r3,r2,124
   21744:	294b883a 	add	r5,r5,r5
   21748:	003f4f06 	br	21488 <_malloc_r+0x524>
   2174c:	01403f84 	movi	r5,254
   21750:	00c01f84 	movi	r3,126
   21754:	003f4c06 	br	21488 <_malloc_r+0x524>
   21758:	98800117 	ldw	r2,4(r19)
   2175c:	003fa006 	br	215e0 <_malloc_r+0x67c>
   21760:	8808d0fa 	srli	r4,r17,3
   21764:	20800044 	addi	r2,r4,1
   21768:	1085883a 	add	r2,r2,r2
   2176c:	003e9006 	br	211b0 <_malloc_r+0x24c>

00021770 <memchr>:
   21770:	208000cc 	andi	r2,r4,3
   21774:	280f883a 	mov	r7,r5
   21778:	10003426 	beq	r2,zero,2184c <memchr+0xdc>
   2177c:	30bfffc4 	addi	r2,r6,-1
   21780:	30001a26 	beq	r6,zero,217ec <memchr+0x7c>
   21784:	20c00003 	ldbu	r3,0(r4)
   21788:	29803fcc 	andi	r6,r5,255
   2178c:	30c0051e 	bne	r6,r3,217a4 <memchr+0x34>
   21790:	00001806 	br	217f4 <memchr+0x84>
   21794:	10001526 	beq	r2,zero,217ec <memchr+0x7c>
   21798:	20c00003 	ldbu	r3,0(r4)
   2179c:	10bfffc4 	addi	r2,r2,-1
   217a0:	30c01426 	beq	r6,r3,217f4 <memchr+0x84>
   217a4:	21000044 	addi	r4,r4,1
   217a8:	20c000cc 	andi	r3,r4,3
   217ac:	183ff91e 	bne	r3,zero,21794 <memchr+0x24>
   217b0:	020000c4 	movi	r8,3
   217b4:	40801136 	bltu	r8,r2,217fc <memchr+0x8c>
   217b8:	10000c26 	beq	r2,zero,217ec <memchr+0x7c>
   217bc:	20c00003 	ldbu	r3,0(r4)
   217c0:	29403fcc 	andi	r5,r5,255
   217c4:	28c00b26 	beq	r5,r3,217f4 <memchr+0x84>
   217c8:	20c00044 	addi	r3,r4,1
   217cc:	39803fcc 	andi	r6,r7,255
   217d0:	2089883a 	add	r4,r4,r2
   217d4:	00000306 	br	217e4 <memchr+0x74>
   217d8:	18c00044 	addi	r3,r3,1
   217dc:	197fffc3 	ldbu	r5,-1(r3)
   217e0:	31400526 	beq	r6,r5,217f8 <memchr+0x88>
   217e4:	1805883a 	mov	r2,r3
   217e8:	20fffb1e 	bne	r4,r3,217d8 <memchr+0x68>
   217ec:	0005883a 	mov	r2,zero
   217f0:	f800283a 	ret
   217f4:	2005883a 	mov	r2,r4
   217f8:	f800283a 	ret
   217fc:	28c03fcc 	andi	r3,r5,255
   21800:	1812923a 	slli	r9,r3,8
   21804:	02ffbff4 	movhi	r11,65279
   21808:	02a02074 	movhi	r10,32897
   2180c:	48d2b03a 	or	r9,r9,r3
   21810:	4806943a 	slli	r3,r9,16
   21814:	5affbfc4 	addi	r11,r11,-257
   21818:	52a02004 	addi	r10,r10,-32640
   2181c:	48d2b03a 	or	r9,r9,r3
   21820:	20c00017 	ldw	r3,0(r4)
   21824:	48c6f03a 	xor	r3,r9,r3
   21828:	1acd883a 	add	r6,r3,r11
   2182c:	00c6303a 	nor	r3,zero,r3
   21830:	30c6703a 	and	r3,r6,r3
   21834:	1a86703a 	and	r3,r3,r10
   21838:	183fe01e 	bne	r3,zero,217bc <memchr+0x4c>
   2183c:	10bfff04 	addi	r2,r2,-4
   21840:	21000104 	addi	r4,r4,4
   21844:	40bff636 	bltu	r8,r2,21820 <memchr+0xb0>
   21848:	003fdb06 	br	217b8 <memchr+0x48>
   2184c:	3005883a 	mov	r2,r6
   21850:	003fd706 	br	217b0 <memchr+0x40>

00021854 <memcpy>:
   21854:	defffd04 	addi	sp,sp,-12
   21858:	dfc00215 	stw	ra,8(sp)
   2185c:	dc400115 	stw	r17,4(sp)
   21860:	dc000015 	stw	r16,0(sp)
   21864:	00c003c4 	movi	r3,15
   21868:	2005883a 	mov	r2,r4
   2186c:	1980452e 	bgeu	r3,r6,21984 <memcpy+0x130>
   21870:	2906b03a 	or	r3,r5,r4
   21874:	18c000cc 	andi	r3,r3,3
   21878:	1800441e 	bne	r3,zero,2198c <memcpy+0x138>
   2187c:	347ffc04 	addi	r17,r6,-16
   21880:	8822d13a 	srli	r17,r17,4
   21884:	28c00104 	addi	r3,r5,4
   21888:	23400104 	addi	r13,r4,4
   2188c:	8820913a 	slli	r16,r17,4
   21890:	2b000204 	addi	r12,r5,8
   21894:	22c00204 	addi	r11,r4,8
   21898:	84000504 	addi	r16,r16,20
   2189c:	2a800304 	addi	r10,r5,12
   218a0:	22400304 	addi	r9,r4,12
   218a4:	2c21883a 	add	r16,r5,r16
   218a8:	2811883a 	mov	r8,r5
   218ac:	200f883a 	mov	r7,r4
   218b0:	41000017 	ldw	r4,0(r8)
   218b4:	1fc00017 	ldw	ra,0(r3)
   218b8:	63c00017 	ldw	r15,0(r12)
   218bc:	39000015 	stw	r4,0(r7)
   218c0:	53800017 	ldw	r14,0(r10)
   218c4:	6fc00015 	stw	ra,0(r13)
   218c8:	5bc00015 	stw	r15,0(r11)
   218cc:	4b800015 	stw	r14,0(r9)
   218d0:	18c00404 	addi	r3,r3,16
   218d4:	39c00404 	addi	r7,r7,16
   218d8:	42000404 	addi	r8,r8,16
   218dc:	6b400404 	addi	r13,r13,16
   218e0:	63000404 	addi	r12,r12,16
   218e4:	5ac00404 	addi	r11,r11,16
   218e8:	52800404 	addi	r10,r10,16
   218ec:	4a400404 	addi	r9,r9,16
   218f0:	1c3fef1e 	bne	r3,r16,218b0 <memcpy+0x5c>
   218f4:	89c00044 	addi	r7,r17,1
   218f8:	380e913a 	slli	r7,r7,4
   218fc:	310003cc 	andi	r4,r6,15
   21900:	02c000c4 	movi	r11,3
   21904:	11c7883a 	add	r3,r2,r7
   21908:	29cb883a 	add	r5,r5,r7
   2190c:	5900212e 	bgeu	r11,r4,21994 <memcpy+0x140>
   21910:	1813883a 	mov	r9,r3
   21914:	2811883a 	mov	r8,r5
   21918:	200f883a 	mov	r7,r4
   2191c:	42800017 	ldw	r10,0(r8)
   21920:	4a400104 	addi	r9,r9,4
   21924:	39ffff04 	addi	r7,r7,-4
   21928:	4abfff15 	stw	r10,-4(r9)
   2192c:	42000104 	addi	r8,r8,4
   21930:	59fffa36 	bltu	r11,r7,2191c <memcpy+0xc8>
   21934:	213fff04 	addi	r4,r4,-4
   21938:	2008d0ba 	srli	r4,r4,2
   2193c:	318000cc 	andi	r6,r6,3
   21940:	21000044 	addi	r4,r4,1
   21944:	2109883a 	add	r4,r4,r4
   21948:	2109883a 	add	r4,r4,r4
   2194c:	1907883a 	add	r3,r3,r4
   21950:	290b883a 	add	r5,r5,r4
   21954:	30000626 	beq	r6,zero,21970 <memcpy+0x11c>
   21958:	198d883a 	add	r6,r3,r6
   2195c:	29c00003 	ldbu	r7,0(r5)
   21960:	18c00044 	addi	r3,r3,1
   21964:	29400044 	addi	r5,r5,1
   21968:	19ffffc5 	stb	r7,-1(r3)
   2196c:	19bffb1e 	bne	r3,r6,2195c <memcpy+0x108>
   21970:	dfc00217 	ldw	ra,8(sp)
   21974:	dc400117 	ldw	r17,4(sp)
   21978:	dc000017 	ldw	r16,0(sp)
   2197c:	dec00304 	addi	sp,sp,12
   21980:	f800283a 	ret
   21984:	2007883a 	mov	r3,r4
   21988:	003ff206 	br	21954 <memcpy+0x100>
   2198c:	2007883a 	mov	r3,r4
   21990:	003ff106 	br	21958 <memcpy+0x104>
   21994:	200d883a 	mov	r6,r4
   21998:	003fee06 	br	21954 <memcpy+0x100>

0002199c <memmove>:
   2199c:	2005883a 	mov	r2,r4
   219a0:	29000b2e 	bgeu	r5,r4,219d0 <memmove+0x34>
   219a4:	298f883a 	add	r7,r5,r6
   219a8:	21c0092e 	bgeu	r4,r7,219d0 <memmove+0x34>
   219ac:	2187883a 	add	r3,r4,r6
   219b0:	198bc83a 	sub	r5,r3,r6
   219b4:	30004826 	beq	r6,zero,21ad8 <memmove+0x13c>
   219b8:	39ffffc4 	addi	r7,r7,-1
   219bc:	39000003 	ldbu	r4,0(r7)
   219c0:	18ffffc4 	addi	r3,r3,-1
   219c4:	19000005 	stb	r4,0(r3)
   219c8:	28fffb1e 	bne	r5,r3,219b8 <memmove+0x1c>
   219cc:	f800283a 	ret
   219d0:	00c003c4 	movi	r3,15
   219d4:	1980412e 	bgeu	r3,r6,21adc <memmove+0x140>
   219d8:	2886b03a 	or	r3,r5,r2
   219dc:	18c000cc 	andi	r3,r3,3
   219e0:	1800401e 	bne	r3,zero,21ae4 <memmove+0x148>
   219e4:	33fffc04 	addi	r15,r6,-16
   219e8:	781ed13a 	srli	r15,r15,4
   219ec:	28c00104 	addi	r3,r5,4
   219f0:	13400104 	addi	r13,r2,4
   219f4:	781c913a 	slli	r14,r15,4
   219f8:	2b000204 	addi	r12,r5,8
   219fc:	12c00204 	addi	r11,r2,8
   21a00:	73800504 	addi	r14,r14,20
   21a04:	2a800304 	addi	r10,r5,12
   21a08:	12400304 	addi	r9,r2,12
   21a0c:	2b9d883a 	add	r14,r5,r14
   21a10:	2811883a 	mov	r8,r5
   21a14:	100f883a 	mov	r7,r2
   21a18:	41000017 	ldw	r4,0(r8)
   21a1c:	39c00404 	addi	r7,r7,16
   21a20:	18c00404 	addi	r3,r3,16
   21a24:	393ffc15 	stw	r4,-16(r7)
   21a28:	193ffc17 	ldw	r4,-16(r3)
   21a2c:	6b400404 	addi	r13,r13,16
   21a30:	5ac00404 	addi	r11,r11,16
   21a34:	693ffc15 	stw	r4,-16(r13)
   21a38:	61000017 	ldw	r4,0(r12)
   21a3c:	4a400404 	addi	r9,r9,16
   21a40:	42000404 	addi	r8,r8,16
   21a44:	593ffc15 	stw	r4,-16(r11)
   21a48:	51000017 	ldw	r4,0(r10)
   21a4c:	63000404 	addi	r12,r12,16
   21a50:	52800404 	addi	r10,r10,16
   21a54:	493ffc15 	stw	r4,-16(r9)
   21a58:	1bbfef1e 	bne	r3,r14,21a18 <memmove+0x7c>
   21a5c:	79000044 	addi	r4,r15,1
   21a60:	2008913a 	slli	r4,r4,4
   21a64:	328003cc 	andi	r10,r6,15
   21a68:	02c000c4 	movi	r11,3
   21a6c:	1107883a 	add	r3,r2,r4
   21a70:	290b883a 	add	r5,r5,r4
   21a74:	5a801e2e 	bgeu	r11,r10,21af0 <memmove+0x154>
   21a78:	1813883a 	mov	r9,r3
   21a7c:	2811883a 	mov	r8,r5
   21a80:	500f883a 	mov	r7,r10
   21a84:	41000017 	ldw	r4,0(r8)
   21a88:	4a400104 	addi	r9,r9,4
   21a8c:	39ffff04 	addi	r7,r7,-4
   21a90:	493fff15 	stw	r4,-4(r9)
   21a94:	42000104 	addi	r8,r8,4
   21a98:	59fffa36 	bltu	r11,r7,21a84 <memmove+0xe8>
   21a9c:	513fff04 	addi	r4,r10,-4
   21aa0:	2008d0ba 	srli	r4,r4,2
   21aa4:	318000cc 	andi	r6,r6,3
   21aa8:	21000044 	addi	r4,r4,1
   21aac:	2109883a 	add	r4,r4,r4
   21ab0:	2109883a 	add	r4,r4,r4
   21ab4:	1907883a 	add	r3,r3,r4
   21ab8:	290b883a 	add	r5,r5,r4
   21abc:	30000b26 	beq	r6,zero,21aec <memmove+0x150>
   21ac0:	198d883a 	add	r6,r3,r6
   21ac4:	29c00003 	ldbu	r7,0(r5)
   21ac8:	18c00044 	addi	r3,r3,1
   21acc:	29400044 	addi	r5,r5,1
   21ad0:	19ffffc5 	stb	r7,-1(r3)
   21ad4:	19bffb1e 	bne	r3,r6,21ac4 <memmove+0x128>
   21ad8:	f800283a 	ret
   21adc:	1007883a 	mov	r3,r2
   21ae0:	003ff606 	br	21abc <memmove+0x120>
   21ae4:	1007883a 	mov	r3,r2
   21ae8:	003ff506 	br	21ac0 <memmove+0x124>
   21aec:	f800283a 	ret
   21af0:	500d883a 	mov	r6,r10
   21af4:	003ff106 	br	21abc <memmove+0x120>

00021af8 <memset>:
   21af8:	20c000cc 	andi	r3,r4,3
   21afc:	2005883a 	mov	r2,r4
   21b00:	18004426 	beq	r3,zero,21c14 <memset+0x11c>
   21b04:	31ffffc4 	addi	r7,r6,-1
   21b08:	30004026 	beq	r6,zero,21c0c <memset+0x114>
   21b0c:	2813883a 	mov	r9,r5
   21b10:	200d883a 	mov	r6,r4
   21b14:	2007883a 	mov	r3,r4
   21b18:	00000406 	br	21b2c <memset+0x34>
   21b1c:	3a3fffc4 	addi	r8,r7,-1
   21b20:	31800044 	addi	r6,r6,1
   21b24:	38003926 	beq	r7,zero,21c0c <memset+0x114>
   21b28:	400f883a 	mov	r7,r8
   21b2c:	18c00044 	addi	r3,r3,1
   21b30:	32400005 	stb	r9,0(r6)
   21b34:	1a0000cc 	andi	r8,r3,3
   21b38:	403ff81e 	bne	r8,zero,21b1c <memset+0x24>
   21b3c:	010000c4 	movi	r4,3
   21b40:	21c02d2e 	bgeu	r4,r7,21bf8 <memset+0x100>
   21b44:	29003fcc 	andi	r4,r5,255
   21b48:	200c923a 	slli	r6,r4,8
   21b4c:	3108b03a 	or	r4,r6,r4
   21b50:	200c943a 	slli	r6,r4,16
   21b54:	218cb03a 	or	r6,r4,r6
   21b58:	010003c4 	movi	r4,15
   21b5c:	21c0182e 	bgeu	r4,r7,21bc0 <memset+0xc8>
   21b60:	3b3ffc04 	addi	r12,r7,-16
   21b64:	6018d13a 	srli	r12,r12,4
   21b68:	1a000104 	addi	r8,r3,4
   21b6c:	1ac00204 	addi	r11,r3,8
   21b70:	6008913a 	slli	r4,r12,4
   21b74:	1a800304 	addi	r10,r3,12
   21b78:	1813883a 	mov	r9,r3
   21b7c:	21000504 	addi	r4,r4,20
   21b80:	1909883a 	add	r4,r3,r4
   21b84:	49800015 	stw	r6,0(r9)
   21b88:	41800015 	stw	r6,0(r8)
   21b8c:	59800015 	stw	r6,0(r11)
   21b90:	51800015 	stw	r6,0(r10)
   21b94:	42000404 	addi	r8,r8,16
   21b98:	4a400404 	addi	r9,r9,16
   21b9c:	5ac00404 	addi	r11,r11,16
   21ba0:	52800404 	addi	r10,r10,16
   21ba4:	413ff71e 	bne	r8,r4,21b84 <memset+0x8c>
   21ba8:	63000044 	addi	r12,r12,1
   21bac:	6018913a 	slli	r12,r12,4
   21bb0:	39c003cc 	andi	r7,r7,15
   21bb4:	010000c4 	movi	r4,3
   21bb8:	1b07883a 	add	r3,r3,r12
   21bbc:	21c00e2e 	bgeu	r4,r7,21bf8 <memset+0x100>
   21bc0:	1813883a 	mov	r9,r3
   21bc4:	3811883a 	mov	r8,r7
   21bc8:	010000c4 	movi	r4,3
   21bcc:	49800015 	stw	r6,0(r9)
   21bd0:	423fff04 	addi	r8,r8,-4
   21bd4:	4a400104 	addi	r9,r9,4
   21bd8:	223ffc36 	bltu	r4,r8,21bcc <memset+0xd4>
   21bdc:	393fff04 	addi	r4,r7,-4
   21be0:	2008d0ba 	srli	r4,r4,2
   21be4:	39c000cc 	andi	r7,r7,3
   21be8:	21000044 	addi	r4,r4,1
   21bec:	2109883a 	add	r4,r4,r4
   21bf0:	2109883a 	add	r4,r4,r4
   21bf4:	1907883a 	add	r3,r3,r4
   21bf8:	38000526 	beq	r7,zero,21c10 <memset+0x118>
   21bfc:	19cf883a 	add	r7,r3,r7
   21c00:	19400005 	stb	r5,0(r3)
   21c04:	18c00044 	addi	r3,r3,1
   21c08:	38fffd1e 	bne	r7,r3,21c00 <memset+0x108>
   21c0c:	f800283a 	ret
   21c10:	f800283a 	ret
   21c14:	2007883a 	mov	r3,r4
   21c18:	300f883a 	mov	r7,r6
   21c1c:	003fc706 	br	21b3c <memset+0x44>

00021c20 <_realloc_r>:
   21c20:	defff604 	addi	sp,sp,-40
   21c24:	dc800215 	stw	r18,8(sp)
   21c28:	dfc00915 	stw	ra,36(sp)
   21c2c:	df000815 	stw	fp,32(sp)
   21c30:	ddc00715 	stw	r23,28(sp)
   21c34:	dd800615 	stw	r22,24(sp)
   21c38:	dd400515 	stw	r21,20(sp)
   21c3c:	dd000415 	stw	r20,16(sp)
   21c40:	dcc00315 	stw	r19,12(sp)
   21c44:	dc400115 	stw	r17,4(sp)
   21c48:	dc000015 	stw	r16,0(sp)
   21c4c:	3025883a 	mov	r18,r6
   21c50:	2800b726 	beq	r5,zero,21f30 <_realloc_r+0x310>
   21c54:	282b883a 	mov	r21,r5
   21c58:	2029883a 	mov	r20,r4
   21c5c:	00239200 	call	23920 <__malloc_lock>
   21c60:	a8bfff17 	ldw	r2,-4(r21)
   21c64:	043fff04 	movi	r16,-4
   21c68:	90c002c4 	addi	r3,r18,11
   21c6c:	01000584 	movi	r4,22
   21c70:	acfffe04 	addi	r19,r21,-8
   21c74:	1420703a 	and	r16,r2,r16
   21c78:	20c0332e 	bgeu	r4,r3,21d48 <_realloc_r+0x128>
   21c7c:	047ffe04 	movi	r17,-8
   21c80:	1c62703a 	and	r17,r3,r17
   21c84:	8807883a 	mov	r3,r17
   21c88:	88005816 	blt	r17,zero,21dec <_realloc_r+0x1cc>
   21c8c:	8c805736 	bltu	r17,r18,21dec <_realloc_r+0x1cc>
   21c90:	80c0300e 	bge	r16,r3,21d54 <_realloc_r+0x134>
   21c94:	070000b4 	movhi	fp,2
   21c98:	e7149804 	addi	fp,fp,21088
   21c9c:	e1c00217 	ldw	r7,8(fp)
   21ca0:	9c09883a 	add	r4,r19,r16
   21ca4:	22000117 	ldw	r8,4(r4)
   21ca8:	21c06326 	beq	r4,r7,21e38 <_realloc_r+0x218>
   21cac:	017fff84 	movi	r5,-2
   21cb0:	414a703a 	and	r5,r8,r5
   21cb4:	214b883a 	add	r5,r4,r5
   21cb8:	29800117 	ldw	r6,4(r5)
   21cbc:	3180004c 	andi	r6,r6,1
   21cc0:	30003f26 	beq	r6,zero,21dc0 <_realloc_r+0x1a0>
   21cc4:	1080004c 	andi	r2,r2,1
   21cc8:	10008326 	beq	r2,zero,21ed8 <_realloc_r+0x2b8>
   21ccc:	900b883a 	mov	r5,r18
   21cd0:	a009883a 	mov	r4,r20
   21cd4:	0020f640 	call	20f64 <_malloc_r>
   21cd8:	1025883a 	mov	r18,r2
   21cdc:	10011e26 	beq	r2,zero,22158 <_realloc_r+0x538>
   21ce0:	a93fff17 	ldw	r4,-4(r21)
   21ce4:	10fffe04 	addi	r3,r2,-8
   21ce8:	00bfff84 	movi	r2,-2
   21cec:	2084703a 	and	r2,r4,r2
   21cf0:	9885883a 	add	r2,r19,r2
   21cf4:	1880ee26 	beq	r3,r2,220b0 <_realloc_r+0x490>
   21cf8:	81bfff04 	addi	r6,r16,-4
   21cfc:	00800904 	movi	r2,36
   21d00:	1180b836 	bltu	r2,r6,21fe4 <_realloc_r+0x3c4>
   21d04:	00c004c4 	movi	r3,19
   21d08:	19809636 	bltu	r3,r6,21f64 <_realloc_r+0x344>
   21d0c:	9005883a 	mov	r2,r18
   21d10:	a807883a 	mov	r3,r21
   21d14:	19000017 	ldw	r4,0(r3)
   21d18:	11000015 	stw	r4,0(r2)
   21d1c:	19000117 	ldw	r4,4(r3)
   21d20:	11000115 	stw	r4,4(r2)
   21d24:	18c00217 	ldw	r3,8(r3)
   21d28:	10c00215 	stw	r3,8(r2)
   21d2c:	a80b883a 	mov	r5,r21
   21d30:	a009883a 	mov	r4,r20
   21d34:	00229ec0 	call	229ec <_free_r>
   21d38:	a009883a 	mov	r4,r20
   21d3c:	00239440 	call	23944 <__malloc_unlock>
   21d40:	9005883a 	mov	r2,r18
   21d44:	00001206 	br	21d90 <_realloc_r+0x170>
   21d48:	00c00404 	movi	r3,16
   21d4c:	1823883a 	mov	r17,r3
   21d50:	003fce06 	br	21c8c <_realloc_r+0x6c>
   21d54:	a825883a 	mov	r18,r21
   21d58:	8445c83a 	sub	r2,r16,r17
   21d5c:	00c003c4 	movi	r3,15
   21d60:	18802636 	bltu	r3,r2,21dfc <_realloc_r+0x1dc>
   21d64:	99800117 	ldw	r6,4(r19)
   21d68:	9c07883a 	add	r3,r19,r16
   21d6c:	3180004c 	andi	r6,r6,1
   21d70:	3420b03a 	or	r16,r6,r16
   21d74:	9c000115 	stw	r16,4(r19)
   21d78:	18800117 	ldw	r2,4(r3)
   21d7c:	10800054 	ori	r2,r2,1
   21d80:	18800115 	stw	r2,4(r3)
   21d84:	a009883a 	mov	r4,r20
   21d88:	00239440 	call	23944 <__malloc_unlock>
   21d8c:	9005883a 	mov	r2,r18
   21d90:	dfc00917 	ldw	ra,36(sp)
   21d94:	df000817 	ldw	fp,32(sp)
   21d98:	ddc00717 	ldw	r23,28(sp)
   21d9c:	dd800617 	ldw	r22,24(sp)
   21da0:	dd400517 	ldw	r21,20(sp)
   21da4:	dd000417 	ldw	r20,16(sp)
   21da8:	dcc00317 	ldw	r19,12(sp)
   21dac:	dc800217 	ldw	r18,8(sp)
   21db0:	dc400117 	ldw	r17,4(sp)
   21db4:	dc000017 	ldw	r16,0(sp)
   21db8:	dec00a04 	addi	sp,sp,40
   21dbc:	f800283a 	ret
   21dc0:	017fff04 	movi	r5,-4
   21dc4:	414a703a 	and	r5,r8,r5
   21dc8:	814d883a 	add	r6,r16,r5
   21dcc:	30c01f16 	blt	r6,r3,21e4c <_realloc_r+0x22c>
   21dd0:	20800317 	ldw	r2,12(r4)
   21dd4:	20c00217 	ldw	r3,8(r4)
   21dd8:	a825883a 	mov	r18,r21
   21ddc:	3021883a 	mov	r16,r6
   21de0:	18800315 	stw	r2,12(r3)
   21de4:	10c00215 	stw	r3,8(r2)
   21de8:	003fdb06 	br	21d58 <_realloc_r+0x138>
   21dec:	00800304 	movi	r2,12
   21df0:	a0800015 	stw	r2,0(r20)
   21df4:	0005883a 	mov	r2,zero
   21df8:	003fe506 	br	21d90 <_realloc_r+0x170>
   21dfc:	98c00117 	ldw	r3,4(r19)
   21e00:	9c4b883a 	add	r5,r19,r17
   21e04:	11000054 	ori	r4,r2,1
   21e08:	18c0004c 	andi	r3,r3,1
   21e0c:	1c62b03a 	or	r17,r3,r17
   21e10:	9c400115 	stw	r17,4(r19)
   21e14:	29000115 	stw	r4,4(r5)
   21e18:	2885883a 	add	r2,r5,r2
   21e1c:	10c00117 	ldw	r3,4(r2)
   21e20:	29400204 	addi	r5,r5,8
   21e24:	a009883a 	mov	r4,r20
   21e28:	18c00054 	ori	r3,r3,1
   21e2c:	10c00115 	stw	r3,4(r2)
   21e30:	00229ec0 	call	229ec <_free_r>
   21e34:	003fd306 	br	21d84 <_realloc_r+0x164>
   21e38:	017fff04 	movi	r5,-4
   21e3c:	414a703a 	and	r5,r8,r5
   21e40:	89800404 	addi	r6,r17,16
   21e44:	8151883a 	add	r8,r16,r5
   21e48:	4180590e 	bge	r8,r6,21fb0 <_realloc_r+0x390>
   21e4c:	1080004c 	andi	r2,r2,1
   21e50:	103f9e1e 	bne	r2,zero,21ccc <_realloc_r+0xac>
   21e54:	adbffe17 	ldw	r22,-8(r21)
   21e58:	00bfff04 	movi	r2,-4
   21e5c:	9dadc83a 	sub	r22,r19,r22
   21e60:	b1800117 	ldw	r6,4(r22)
   21e64:	3084703a 	and	r2,r6,r2
   21e68:	20002026 	beq	r4,zero,21eec <_realloc_r+0x2cc>
   21e6c:	80af883a 	add	r23,r16,r2
   21e70:	b96f883a 	add	r23,r23,r5
   21e74:	21c05f26 	beq	r4,r7,21ff4 <_realloc_r+0x3d4>
   21e78:	b8c01c16 	blt	r23,r3,21eec <_realloc_r+0x2cc>
   21e7c:	20800317 	ldw	r2,12(r4)
   21e80:	20c00217 	ldw	r3,8(r4)
   21e84:	81bfff04 	addi	r6,r16,-4
   21e88:	01000904 	movi	r4,36
   21e8c:	18800315 	stw	r2,12(r3)
   21e90:	10c00215 	stw	r3,8(r2)
   21e94:	b0c00217 	ldw	r3,8(r22)
   21e98:	b0800317 	ldw	r2,12(r22)
   21e9c:	b4800204 	addi	r18,r22,8
   21ea0:	18800315 	stw	r2,12(r3)
   21ea4:	10c00215 	stw	r3,8(r2)
   21ea8:	21801b36 	bltu	r4,r6,21f18 <_realloc_r+0x2f8>
   21eac:	008004c4 	movi	r2,19
   21eb0:	1180352e 	bgeu	r2,r6,21f88 <_realloc_r+0x368>
   21eb4:	a8800017 	ldw	r2,0(r21)
   21eb8:	b0800215 	stw	r2,8(r22)
   21ebc:	a8800117 	ldw	r2,4(r21)
   21ec0:	b0800315 	stw	r2,12(r22)
   21ec4:	008006c4 	movi	r2,27
   21ec8:	11807f36 	bltu	r2,r6,220c8 <_realloc_r+0x4a8>
   21ecc:	b0800404 	addi	r2,r22,16
   21ed0:	ad400204 	addi	r21,r21,8
   21ed4:	00002d06 	br	21f8c <_realloc_r+0x36c>
   21ed8:	adbffe17 	ldw	r22,-8(r21)
   21edc:	00bfff04 	movi	r2,-4
   21ee0:	9dadc83a 	sub	r22,r19,r22
   21ee4:	b1000117 	ldw	r4,4(r22)
   21ee8:	2084703a 	and	r2,r4,r2
   21eec:	b03f7726 	beq	r22,zero,21ccc <_realloc_r+0xac>
   21ef0:	80af883a 	add	r23,r16,r2
   21ef4:	b8ff7516 	blt	r23,r3,21ccc <_realloc_r+0xac>
   21ef8:	b0800317 	ldw	r2,12(r22)
   21efc:	b0c00217 	ldw	r3,8(r22)
   21f00:	81bfff04 	addi	r6,r16,-4
   21f04:	01000904 	movi	r4,36
   21f08:	18800315 	stw	r2,12(r3)
   21f0c:	10c00215 	stw	r3,8(r2)
   21f10:	b4800204 	addi	r18,r22,8
   21f14:	21bfe52e 	bgeu	r4,r6,21eac <_realloc_r+0x28c>
   21f18:	a80b883a 	mov	r5,r21
   21f1c:	9009883a 	mov	r4,r18
   21f20:	002199c0 	call	2199c <memmove>
   21f24:	b821883a 	mov	r16,r23
   21f28:	b027883a 	mov	r19,r22
   21f2c:	003f8a06 	br	21d58 <_realloc_r+0x138>
   21f30:	300b883a 	mov	r5,r6
   21f34:	dfc00917 	ldw	ra,36(sp)
   21f38:	df000817 	ldw	fp,32(sp)
   21f3c:	ddc00717 	ldw	r23,28(sp)
   21f40:	dd800617 	ldw	r22,24(sp)
   21f44:	dd400517 	ldw	r21,20(sp)
   21f48:	dd000417 	ldw	r20,16(sp)
   21f4c:	dcc00317 	ldw	r19,12(sp)
   21f50:	dc800217 	ldw	r18,8(sp)
   21f54:	dc400117 	ldw	r17,4(sp)
   21f58:	dc000017 	ldw	r16,0(sp)
   21f5c:	dec00a04 	addi	sp,sp,40
   21f60:	0020f641 	jmpi	20f64 <_malloc_r>
   21f64:	a8c00017 	ldw	r3,0(r21)
   21f68:	90c00015 	stw	r3,0(r18)
   21f6c:	a8c00117 	ldw	r3,4(r21)
   21f70:	90c00115 	stw	r3,4(r18)
   21f74:	00c006c4 	movi	r3,27
   21f78:	19804536 	bltu	r3,r6,22090 <_realloc_r+0x470>
   21f7c:	90800204 	addi	r2,r18,8
   21f80:	a8c00204 	addi	r3,r21,8
   21f84:	003f6306 	br	21d14 <_realloc_r+0xf4>
   21f88:	9005883a 	mov	r2,r18
   21f8c:	a8c00017 	ldw	r3,0(r21)
   21f90:	b821883a 	mov	r16,r23
   21f94:	b027883a 	mov	r19,r22
   21f98:	10c00015 	stw	r3,0(r2)
   21f9c:	a8c00117 	ldw	r3,4(r21)
   21fa0:	10c00115 	stw	r3,4(r2)
   21fa4:	a8c00217 	ldw	r3,8(r21)
   21fa8:	10c00215 	stw	r3,8(r2)
   21fac:	003f6a06 	br	21d58 <_realloc_r+0x138>
   21fb0:	9c67883a 	add	r19,r19,r17
   21fb4:	4445c83a 	sub	r2,r8,r17
   21fb8:	e4c00215 	stw	r19,8(fp)
   21fbc:	10800054 	ori	r2,r2,1
   21fc0:	98800115 	stw	r2,4(r19)
   21fc4:	a8bfff17 	ldw	r2,-4(r21)
   21fc8:	a009883a 	mov	r4,r20
   21fcc:	1080004c 	andi	r2,r2,1
   21fd0:	1462b03a 	or	r17,r2,r17
   21fd4:	ac7fff15 	stw	r17,-4(r21)
   21fd8:	00239440 	call	23944 <__malloc_unlock>
   21fdc:	a805883a 	mov	r2,r21
   21fe0:	003f6b06 	br	21d90 <_realloc_r+0x170>
   21fe4:	a80b883a 	mov	r5,r21
   21fe8:	9009883a 	mov	r4,r18
   21fec:	002199c0 	call	2199c <memmove>
   21ff0:	003f4e06 	br	21d2c <_realloc_r+0x10c>
   21ff4:	89000404 	addi	r4,r17,16
   21ff8:	b93fbc16 	blt	r23,r4,21eec <_realloc_r+0x2cc>
   21ffc:	b0800317 	ldw	r2,12(r22)
   22000:	b0c00217 	ldw	r3,8(r22)
   22004:	81bfff04 	addi	r6,r16,-4
   22008:	01000904 	movi	r4,36
   2200c:	18800315 	stw	r2,12(r3)
   22010:	10c00215 	stw	r3,8(r2)
   22014:	b4800204 	addi	r18,r22,8
   22018:	21804336 	bltu	r4,r6,22128 <_realloc_r+0x508>
   2201c:	008004c4 	movi	r2,19
   22020:	11803f2e 	bgeu	r2,r6,22120 <_realloc_r+0x500>
   22024:	a8800017 	ldw	r2,0(r21)
   22028:	b0800215 	stw	r2,8(r22)
   2202c:	a8800117 	ldw	r2,4(r21)
   22030:	b0800315 	stw	r2,12(r22)
   22034:	008006c4 	movi	r2,27
   22038:	11803f36 	bltu	r2,r6,22138 <_realloc_r+0x518>
   2203c:	b0800404 	addi	r2,r22,16
   22040:	ad400204 	addi	r21,r21,8
   22044:	a8c00017 	ldw	r3,0(r21)
   22048:	10c00015 	stw	r3,0(r2)
   2204c:	a8c00117 	ldw	r3,4(r21)
   22050:	10c00115 	stw	r3,4(r2)
   22054:	a8c00217 	ldw	r3,8(r21)
   22058:	10c00215 	stw	r3,8(r2)
   2205c:	b447883a 	add	r3,r22,r17
   22060:	bc45c83a 	sub	r2,r23,r17
   22064:	e0c00215 	stw	r3,8(fp)
   22068:	10800054 	ori	r2,r2,1
   2206c:	18800115 	stw	r2,4(r3)
   22070:	b0800117 	ldw	r2,4(r22)
   22074:	a009883a 	mov	r4,r20
   22078:	1080004c 	andi	r2,r2,1
   2207c:	1462b03a 	or	r17,r2,r17
   22080:	b4400115 	stw	r17,4(r22)
   22084:	00239440 	call	23944 <__malloc_unlock>
   22088:	9005883a 	mov	r2,r18
   2208c:	003f4006 	br	21d90 <_realloc_r+0x170>
   22090:	a8c00217 	ldw	r3,8(r21)
   22094:	90c00215 	stw	r3,8(r18)
   22098:	a8c00317 	ldw	r3,12(r21)
   2209c:	90c00315 	stw	r3,12(r18)
   220a0:	30801126 	beq	r6,r2,220e8 <_realloc_r+0x4c8>
   220a4:	90800404 	addi	r2,r18,16
   220a8:	a8c00404 	addi	r3,r21,16
   220ac:	003f1906 	br	21d14 <_realloc_r+0xf4>
   220b0:	90ffff17 	ldw	r3,-4(r18)
   220b4:	00bfff04 	movi	r2,-4
   220b8:	a825883a 	mov	r18,r21
   220bc:	1884703a 	and	r2,r3,r2
   220c0:	80a1883a 	add	r16,r16,r2
   220c4:	003f2406 	br	21d58 <_realloc_r+0x138>
   220c8:	a8800217 	ldw	r2,8(r21)
   220cc:	b0800415 	stw	r2,16(r22)
   220d0:	a8800317 	ldw	r2,12(r21)
   220d4:	b0800515 	stw	r2,20(r22)
   220d8:	31000a26 	beq	r6,r4,22104 <_realloc_r+0x4e4>
   220dc:	b0800604 	addi	r2,r22,24
   220e0:	ad400404 	addi	r21,r21,16
   220e4:	003fa906 	br	21f8c <_realloc_r+0x36c>
   220e8:	a9000417 	ldw	r4,16(r21)
   220ec:	90800604 	addi	r2,r18,24
   220f0:	a8c00604 	addi	r3,r21,24
   220f4:	91000415 	stw	r4,16(r18)
   220f8:	a9000517 	ldw	r4,20(r21)
   220fc:	91000515 	stw	r4,20(r18)
   22100:	003f0406 	br	21d14 <_realloc_r+0xf4>
   22104:	a8c00417 	ldw	r3,16(r21)
   22108:	ad400604 	addi	r21,r21,24
   2210c:	b0800804 	addi	r2,r22,32
   22110:	b0c00615 	stw	r3,24(r22)
   22114:	a8ffff17 	ldw	r3,-4(r21)
   22118:	b0c00715 	stw	r3,28(r22)
   2211c:	003f9b06 	br	21f8c <_realloc_r+0x36c>
   22120:	9005883a 	mov	r2,r18
   22124:	003fc706 	br	22044 <_realloc_r+0x424>
   22128:	a80b883a 	mov	r5,r21
   2212c:	9009883a 	mov	r4,r18
   22130:	002199c0 	call	2199c <memmove>
   22134:	003fc906 	br	2205c <_realloc_r+0x43c>
   22138:	a8800217 	ldw	r2,8(r21)
   2213c:	b0800415 	stw	r2,16(r22)
   22140:	a8800317 	ldw	r2,12(r21)
   22144:	b0800515 	stw	r2,20(r22)
   22148:	31000726 	beq	r6,r4,22168 <_realloc_r+0x548>
   2214c:	b0800604 	addi	r2,r22,24
   22150:	ad400404 	addi	r21,r21,16
   22154:	003fbb06 	br	22044 <_realloc_r+0x424>
   22158:	a009883a 	mov	r4,r20
   2215c:	00239440 	call	23944 <__malloc_unlock>
   22160:	0005883a 	mov	r2,zero
   22164:	003f0a06 	br	21d90 <_realloc_r+0x170>
   22168:	a8c00417 	ldw	r3,16(r21)
   2216c:	ad400604 	addi	r21,r21,24
   22170:	b0800804 	addi	r2,r22,32
   22174:	b0c00615 	stw	r3,24(r22)
   22178:	a8ffff17 	ldw	r3,-4(r21)
   2217c:	b0c00715 	stw	r3,28(r22)
   22180:	003fb006 	br	22044 <_realloc_r+0x424>

00022184 <_sbrk_r>:
   22184:	defffd04 	addi	sp,sp,-12
   22188:	dc000015 	stw	r16,0(sp)
   2218c:	040000b4 	movhi	r16,2
   22190:	dc400115 	stw	r17,4(sp)
   22194:	8418ad04 	addi	r16,r16,25268
   22198:	2023883a 	mov	r17,r4
   2219c:	2809883a 	mov	r4,r5
   221a0:	dfc00215 	stw	ra,8(sp)
   221a4:	80000015 	stw	zero,0(r16)
   221a8:	0023b2c0 	call	23b2c <sbrk>
   221ac:	00ffffc4 	movi	r3,-1
   221b0:	10c00526 	beq	r2,r3,221c8 <_sbrk_r+0x44>
   221b4:	dfc00217 	ldw	ra,8(sp)
   221b8:	dc400117 	ldw	r17,4(sp)
   221bc:	dc000017 	ldw	r16,0(sp)
   221c0:	dec00304 	addi	sp,sp,12
   221c4:	f800283a 	ret
   221c8:	80c00017 	ldw	r3,0(r16)
   221cc:	183ff926 	beq	r3,zero,221b4 <_sbrk_r+0x30>
   221d0:	88c00015 	stw	r3,0(r17)
   221d4:	003ff706 	br	221b4 <_sbrk_r+0x30>

000221d8 <__sread>:
   221d8:	defffe04 	addi	sp,sp,-8
   221dc:	dc000015 	stw	r16,0(sp)
   221e0:	2821883a 	mov	r16,r5
   221e4:	2940038f 	ldh	r5,14(r5)
   221e8:	dfc00115 	stw	ra,4(sp)
   221ec:	0022f180 	call	22f18 <_read_r>
   221f0:	10000716 	blt	r2,zero,22210 <__sread+0x38>
   221f4:	80c01417 	ldw	r3,80(r16)
   221f8:	1887883a 	add	r3,r3,r2
   221fc:	80c01415 	stw	r3,80(r16)
   22200:	dfc00117 	ldw	ra,4(sp)
   22204:	dc000017 	ldw	r16,0(sp)
   22208:	dec00204 	addi	sp,sp,8
   2220c:	f800283a 	ret
   22210:	80c0030b 	ldhu	r3,12(r16)
   22214:	18fbffcc 	andi	r3,r3,61439
   22218:	80c0030d 	sth	r3,12(r16)
   2221c:	dfc00117 	ldw	ra,4(sp)
   22220:	dc000017 	ldw	r16,0(sp)
   22224:	dec00204 	addi	sp,sp,8
   22228:	f800283a 	ret

0002222c <__seofread>:
   2222c:	0005883a 	mov	r2,zero
   22230:	f800283a 	ret

00022234 <__swrite>:
   22234:	2880030b 	ldhu	r2,12(r5)
   22238:	defffb04 	addi	sp,sp,-20
   2223c:	dcc00315 	stw	r19,12(sp)
   22240:	dc800215 	stw	r18,8(sp)
   22244:	dc400115 	stw	r17,4(sp)
   22248:	dc000015 	stw	r16,0(sp)
   2224c:	dfc00415 	stw	ra,16(sp)
   22250:	10c0400c 	andi	r3,r2,256
   22254:	2821883a 	mov	r16,r5
   22258:	2023883a 	mov	r17,r4
   2225c:	3025883a 	mov	r18,r6
   22260:	3827883a 	mov	r19,r7
   22264:	18000526 	beq	r3,zero,2227c <__swrite+0x48>
   22268:	2940038f 	ldh	r5,14(r5)
   2226c:	01c00084 	movi	r7,2
   22270:	000d883a 	mov	r6,zero
   22274:	0022cfc0 	call	22cfc <_lseek_r>
   22278:	8080030b 	ldhu	r2,12(r16)
   2227c:	8140038f 	ldh	r5,14(r16)
   22280:	10bbffcc 	andi	r2,r2,61439
   22284:	980f883a 	mov	r7,r19
   22288:	900d883a 	mov	r6,r18
   2228c:	8809883a 	mov	r4,r17
   22290:	8080030d 	sth	r2,12(r16)
   22294:	dfc00417 	ldw	ra,16(sp)
   22298:	dcc00317 	ldw	r19,12(sp)
   2229c:	dc800217 	ldw	r18,8(sp)
   222a0:	dc400117 	ldw	r17,4(sp)
   222a4:	dc000017 	ldw	r16,0(sp)
   222a8:	dec00504 	addi	sp,sp,20
   222ac:	00223141 	jmpi	22314 <_write_r>

000222b0 <__sseek>:
   222b0:	defffe04 	addi	sp,sp,-8
   222b4:	dc000015 	stw	r16,0(sp)
   222b8:	2821883a 	mov	r16,r5
   222bc:	2940038f 	ldh	r5,14(r5)
   222c0:	dfc00115 	stw	ra,4(sp)
   222c4:	0022cfc0 	call	22cfc <_lseek_r>
   222c8:	00ffffc4 	movi	r3,-1
   222cc:	10c00826 	beq	r2,r3,222f0 <__sseek+0x40>
   222d0:	80c0030b 	ldhu	r3,12(r16)
   222d4:	80801415 	stw	r2,80(r16)
   222d8:	18c40014 	ori	r3,r3,4096
   222dc:	80c0030d 	sth	r3,12(r16)
   222e0:	dfc00117 	ldw	ra,4(sp)
   222e4:	dc000017 	ldw	r16,0(sp)
   222e8:	dec00204 	addi	sp,sp,8
   222ec:	f800283a 	ret
   222f0:	80c0030b 	ldhu	r3,12(r16)
   222f4:	18fbffcc 	andi	r3,r3,61439
   222f8:	80c0030d 	sth	r3,12(r16)
   222fc:	dfc00117 	ldw	ra,4(sp)
   22300:	dc000017 	ldw	r16,0(sp)
   22304:	dec00204 	addi	sp,sp,8
   22308:	f800283a 	ret

0002230c <__sclose>:
   2230c:	2940038f 	ldh	r5,14(r5)
   22310:	00224c81 	jmpi	224c8 <_close_r>

00022314 <_write_r>:
   22314:	defffd04 	addi	sp,sp,-12
   22318:	2805883a 	mov	r2,r5
   2231c:	dc000015 	stw	r16,0(sp)
   22320:	040000b4 	movhi	r16,2
   22324:	dc400115 	stw	r17,4(sp)
   22328:	300b883a 	mov	r5,r6
   2232c:	8418ad04 	addi	r16,r16,25268
   22330:	2023883a 	mov	r17,r4
   22334:	380d883a 	mov	r6,r7
   22338:	1009883a 	mov	r4,r2
   2233c:	dfc00215 	stw	ra,8(sp)
   22340:	80000015 	stw	zero,0(r16)
   22344:	0023c480 	call	23c48 <write>
   22348:	00ffffc4 	movi	r3,-1
   2234c:	10c00526 	beq	r2,r3,22364 <_write_r+0x50>
   22350:	dfc00217 	ldw	ra,8(sp)
   22354:	dc400117 	ldw	r17,4(sp)
   22358:	dc000017 	ldw	r16,0(sp)
   2235c:	dec00304 	addi	sp,sp,12
   22360:	f800283a 	ret
   22364:	80c00017 	ldw	r3,0(r16)
   22368:	183ff926 	beq	r3,zero,22350 <_write_r+0x3c>
   2236c:	88c00015 	stw	r3,0(r17)
   22370:	003ff706 	br	22350 <_write_r+0x3c>

00022374 <__swsetup_r>:
   22374:	008000b4 	movhi	r2,2
   22378:	defffd04 	addi	sp,sp,-12
   2237c:	10961004 	addi	r2,r2,22592
   22380:	dc400115 	stw	r17,4(sp)
   22384:	2023883a 	mov	r17,r4
   22388:	11000017 	ldw	r4,0(r2)
   2238c:	dc000015 	stw	r16,0(sp)
   22390:	dfc00215 	stw	ra,8(sp)
   22394:	2821883a 	mov	r16,r5
   22398:	20000226 	beq	r4,zero,223a4 <__swsetup_r+0x30>
   2239c:	20800e17 	ldw	r2,56(r4)
   223a0:	10003126 	beq	r2,zero,22468 <__swsetup_r+0xf4>
   223a4:	8080030b 	ldhu	r2,12(r16)
   223a8:	10c0020c 	andi	r3,r2,8
   223ac:	1009883a 	mov	r4,r2
   223b0:	18000f26 	beq	r3,zero,223f0 <__swsetup_r+0x7c>
   223b4:	80c00417 	ldw	r3,16(r16)
   223b8:	18001526 	beq	r3,zero,22410 <__swsetup_r+0x9c>
   223bc:	1100004c 	andi	r4,r2,1
   223c0:	20001c1e 	bne	r4,zero,22434 <__swsetup_r+0xc0>
   223c4:	1080008c 	andi	r2,r2,2
   223c8:	1000291e 	bne	r2,zero,22470 <__swsetup_r+0xfc>
   223cc:	80800517 	ldw	r2,20(r16)
   223d0:	80800215 	stw	r2,8(r16)
   223d4:	18001c26 	beq	r3,zero,22448 <__swsetup_r+0xd4>
   223d8:	0005883a 	mov	r2,zero
   223dc:	dfc00217 	ldw	ra,8(sp)
   223e0:	dc400117 	ldw	r17,4(sp)
   223e4:	dc000017 	ldw	r16,0(sp)
   223e8:	dec00304 	addi	sp,sp,12
   223ec:	f800283a 	ret
   223f0:	2080040c 	andi	r2,r4,16
   223f4:	10002e26 	beq	r2,zero,224b0 <__swsetup_r+0x13c>
   223f8:	2080010c 	andi	r2,r4,4
   223fc:	10001e1e 	bne	r2,zero,22478 <__swsetup_r+0x104>
   22400:	80c00417 	ldw	r3,16(r16)
   22404:	20800214 	ori	r2,r4,8
   22408:	8080030d 	sth	r2,12(r16)
   2240c:	183feb1e 	bne	r3,zero,223bc <__swsetup_r+0x48>
   22410:	1100a00c 	andi	r4,r2,640
   22414:	01408004 	movi	r5,512
   22418:	217fe826 	beq	r4,r5,223bc <__swsetup_r+0x48>
   2241c:	800b883a 	mov	r5,r16
   22420:	8809883a 	mov	r4,r17
   22424:	0022d5c0 	call	22d5c <__smakebuf_r>
   22428:	8080030b 	ldhu	r2,12(r16)
   2242c:	80c00417 	ldw	r3,16(r16)
   22430:	003fe206 	br	223bc <__swsetup_r+0x48>
   22434:	80800517 	ldw	r2,20(r16)
   22438:	80000215 	stw	zero,8(r16)
   2243c:	0085c83a 	sub	r2,zero,r2
   22440:	80800615 	stw	r2,24(r16)
   22444:	183fe41e 	bne	r3,zero,223d8 <__swsetup_r+0x64>
   22448:	80c0030b 	ldhu	r3,12(r16)
   2244c:	0005883a 	mov	r2,zero
   22450:	1900200c 	andi	r4,r3,128
   22454:	203fe126 	beq	r4,zero,223dc <__swsetup_r+0x68>
   22458:	18c01014 	ori	r3,r3,64
   2245c:	80c0030d 	sth	r3,12(r16)
   22460:	00bfffc4 	movi	r2,-1
   22464:	003fdd06 	br	223dc <__swsetup_r+0x68>
   22468:	00208c40 	call	208c4 <__sinit>
   2246c:	003fcd06 	br	223a4 <__swsetup_r+0x30>
   22470:	0005883a 	mov	r2,zero
   22474:	003fd606 	br	223d0 <__swsetup_r+0x5c>
   22478:	81400c17 	ldw	r5,48(r16)
   2247c:	28000626 	beq	r5,zero,22498 <__swsetup_r+0x124>
   22480:	80801004 	addi	r2,r16,64
   22484:	28800326 	beq	r5,r2,22494 <__swsetup_r+0x120>
   22488:	8809883a 	mov	r4,r17
   2248c:	00229ec0 	call	229ec <_free_r>
   22490:	8100030b 	ldhu	r4,12(r16)
   22494:	80000c15 	stw	zero,48(r16)
   22498:	80c00417 	ldw	r3,16(r16)
   2249c:	00bff6c4 	movi	r2,-37
   224a0:	1108703a 	and	r4,r2,r4
   224a4:	80000115 	stw	zero,4(r16)
   224a8:	80c00015 	stw	r3,0(r16)
   224ac:	003fd506 	br	22404 <__swsetup_r+0x90>
   224b0:	00800244 	movi	r2,9
   224b4:	88800015 	stw	r2,0(r17)
   224b8:	20801014 	ori	r2,r4,64
   224bc:	8080030d 	sth	r2,12(r16)
   224c0:	00bfffc4 	movi	r2,-1
   224c4:	003fc506 	br	223dc <__swsetup_r+0x68>

000224c8 <_close_r>:
   224c8:	defffd04 	addi	sp,sp,-12
   224cc:	dc000015 	stw	r16,0(sp)
   224d0:	040000b4 	movhi	r16,2
   224d4:	dc400115 	stw	r17,4(sp)
   224d8:	8418ad04 	addi	r16,r16,25268
   224dc:	2023883a 	mov	r17,r4
   224e0:	2809883a 	mov	r4,r5
   224e4:	dfc00215 	stw	ra,8(sp)
   224e8:	80000015 	stw	zero,0(r16)
   224ec:	00232400 	call	23240 <close>
   224f0:	00ffffc4 	movi	r3,-1
   224f4:	10c00526 	beq	r2,r3,2250c <_close_r+0x44>
   224f8:	dfc00217 	ldw	ra,8(sp)
   224fc:	dc400117 	ldw	r17,4(sp)
   22500:	dc000017 	ldw	r16,0(sp)
   22504:	dec00304 	addi	sp,sp,12
   22508:	f800283a 	ret
   2250c:	80c00017 	ldw	r3,0(r16)
   22510:	183ff926 	beq	r3,zero,224f8 <_close_r+0x30>
   22514:	88c00015 	stw	r3,0(r17)
   22518:	003ff706 	br	224f8 <_close_r+0x30>

0002251c <_fclose_r>:
   2251c:	28003926 	beq	r5,zero,22604 <_fclose_r+0xe8>
   22520:	defffc04 	addi	sp,sp,-16
   22524:	dc400115 	stw	r17,4(sp)
   22528:	dc000015 	stw	r16,0(sp)
   2252c:	dfc00315 	stw	ra,12(sp)
   22530:	dc800215 	stw	r18,8(sp)
   22534:	2023883a 	mov	r17,r4
   22538:	2821883a 	mov	r16,r5
   2253c:	20000226 	beq	r4,zero,22548 <_fclose_r+0x2c>
   22540:	20800e17 	ldw	r2,56(r4)
   22544:	10002726 	beq	r2,zero,225e4 <_fclose_r+0xc8>
   22548:	8080030f 	ldh	r2,12(r16)
   2254c:	1000071e 	bne	r2,zero,2256c <_fclose_r+0x50>
   22550:	0005883a 	mov	r2,zero
   22554:	dfc00317 	ldw	ra,12(sp)
   22558:	dc800217 	ldw	r18,8(sp)
   2255c:	dc400117 	ldw	r17,4(sp)
   22560:	dc000017 	ldw	r16,0(sp)
   22564:	dec00404 	addi	sp,sp,16
   22568:	f800283a 	ret
   2256c:	800b883a 	mov	r5,r16
   22570:	8809883a 	mov	r4,r17
   22574:	00226200 	call	22620 <__sflush_r>
   22578:	1025883a 	mov	r18,r2
   2257c:	80800b17 	ldw	r2,44(r16)
   22580:	10000426 	beq	r2,zero,22594 <_fclose_r+0x78>
   22584:	81400717 	ldw	r5,28(r16)
   22588:	8809883a 	mov	r4,r17
   2258c:	103ee83a 	callr	r2
   22590:	10001616 	blt	r2,zero,225ec <_fclose_r+0xd0>
   22594:	8080030b 	ldhu	r2,12(r16)
   22598:	1080200c 	andi	r2,r2,128
   2259c:	1000151e 	bne	r2,zero,225f4 <_fclose_r+0xd8>
   225a0:	81400c17 	ldw	r5,48(r16)
   225a4:	28000526 	beq	r5,zero,225bc <_fclose_r+0xa0>
   225a8:	80801004 	addi	r2,r16,64
   225ac:	28800226 	beq	r5,r2,225b8 <_fclose_r+0x9c>
   225b0:	8809883a 	mov	r4,r17
   225b4:	00229ec0 	call	229ec <_free_r>
   225b8:	80000c15 	stw	zero,48(r16)
   225bc:	81401117 	ldw	r5,68(r16)
   225c0:	28000326 	beq	r5,zero,225d0 <_fclose_r+0xb4>
   225c4:	8809883a 	mov	r4,r17
   225c8:	00229ec0 	call	229ec <_free_r>
   225cc:	80001115 	stw	zero,68(r16)
   225d0:	00208d40 	call	208d4 <__sfp_lock_acquire>
   225d4:	8000030d 	sth	zero,12(r16)
   225d8:	00208d80 	call	208d8 <__sfp_lock_release>
   225dc:	9005883a 	mov	r2,r18
   225e0:	003fdc06 	br	22554 <_fclose_r+0x38>
   225e4:	00208c40 	call	208c4 <__sinit>
   225e8:	003fd706 	br	22548 <_fclose_r+0x2c>
   225ec:	04bfffc4 	movi	r18,-1
   225f0:	003fe806 	br	22594 <_fclose_r+0x78>
   225f4:	81400417 	ldw	r5,16(r16)
   225f8:	8809883a 	mov	r4,r17
   225fc:	00229ec0 	call	229ec <_free_r>
   22600:	003fe706 	br	225a0 <_fclose_r+0x84>
   22604:	0005883a 	mov	r2,zero
   22608:	f800283a 	ret

0002260c <fclose>:
   2260c:	008000b4 	movhi	r2,2
   22610:	10961004 	addi	r2,r2,22592
   22614:	200b883a 	mov	r5,r4
   22618:	11000017 	ldw	r4,0(r2)
   2261c:	002251c1 	jmpi	2251c <_fclose_r>

00022620 <__sflush_r>:
   22620:	2880030b 	ldhu	r2,12(r5)
   22624:	defffb04 	addi	sp,sp,-20
   22628:	dcc00315 	stw	r19,12(sp)
   2262c:	dc400115 	stw	r17,4(sp)
   22630:	dfc00415 	stw	ra,16(sp)
   22634:	dc800215 	stw	r18,8(sp)
   22638:	dc000015 	stw	r16,0(sp)
   2263c:	10c0020c 	andi	r3,r2,8
   22640:	2823883a 	mov	r17,r5
   22644:	2027883a 	mov	r19,r4
   22648:	1800311e 	bne	r3,zero,22710 <__sflush_r+0xf0>
   2264c:	28c00117 	ldw	r3,4(r5)
   22650:	10820014 	ori	r2,r2,2048
   22654:	2880030d 	sth	r2,12(r5)
   22658:	00c04b0e 	bge	zero,r3,22788 <__sflush_r+0x168>
   2265c:	8a000a17 	ldw	r8,40(r17)
   22660:	40002326 	beq	r8,zero,226f0 <__sflush_r+0xd0>
   22664:	9c000017 	ldw	r16,0(r19)
   22668:	10c4000c 	andi	r3,r2,4096
   2266c:	98000015 	stw	zero,0(r19)
   22670:	18004826 	beq	r3,zero,22794 <__sflush_r+0x174>
   22674:	89801417 	ldw	r6,80(r17)
   22678:	10c0010c 	andi	r3,r2,4
   2267c:	18000626 	beq	r3,zero,22698 <__sflush_r+0x78>
   22680:	88c00117 	ldw	r3,4(r17)
   22684:	88800c17 	ldw	r2,48(r17)
   22688:	30cdc83a 	sub	r6,r6,r3
   2268c:	10000226 	beq	r2,zero,22698 <__sflush_r+0x78>
   22690:	88800f17 	ldw	r2,60(r17)
   22694:	308dc83a 	sub	r6,r6,r2
   22698:	89400717 	ldw	r5,28(r17)
   2269c:	000f883a 	mov	r7,zero
   226a0:	9809883a 	mov	r4,r19
   226a4:	403ee83a 	callr	r8
   226a8:	00ffffc4 	movi	r3,-1
   226ac:	10c04426 	beq	r2,r3,227c0 <__sflush_r+0x1a0>
   226b0:	88c0030b 	ldhu	r3,12(r17)
   226b4:	89000417 	ldw	r4,16(r17)
   226b8:	88000115 	stw	zero,4(r17)
   226bc:	197dffcc 	andi	r5,r3,63487
   226c0:	8940030d 	sth	r5,12(r17)
   226c4:	89000015 	stw	r4,0(r17)
   226c8:	18c4000c 	andi	r3,r3,4096
   226cc:	18002c1e 	bne	r3,zero,22780 <__sflush_r+0x160>
   226d0:	89400c17 	ldw	r5,48(r17)
   226d4:	9c000015 	stw	r16,0(r19)
   226d8:	28000526 	beq	r5,zero,226f0 <__sflush_r+0xd0>
   226dc:	88801004 	addi	r2,r17,64
   226e0:	28800226 	beq	r5,r2,226ec <__sflush_r+0xcc>
   226e4:	9809883a 	mov	r4,r19
   226e8:	00229ec0 	call	229ec <_free_r>
   226ec:	88000c15 	stw	zero,48(r17)
   226f0:	0005883a 	mov	r2,zero
   226f4:	dfc00417 	ldw	ra,16(sp)
   226f8:	dcc00317 	ldw	r19,12(sp)
   226fc:	dc800217 	ldw	r18,8(sp)
   22700:	dc400117 	ldw	r17,4(sp)
   22704:	dc000017 	ldw	r16,0(sp)
   22708:	dec00504 	addi	sp,sp,20
   2270c:	f800283a 	ret
   22710:	2c800417 	ldw	r18,16(r5)
   22714:	903ff626 	beq	r18,zero,226f0 <__sflush_r+0xd0>
   22718:	2c000017 	ldw	r16,0(r5)
   2271c:	108000cc 	andi	r2,r2,3
   22720:	2c800015 	stw	r18,0(r5)
   22724:	84a1c83a 	sub	r16,r16,r18
   22728:	1000131e 	bne	r2,zero,22778 <__sflush_r+0x158>
   2272c:	28800517 	ldw	r2,20(r5)
   22730:	88800215 	stw	r2,8(r17)
   22734:	04000316 	blt	zero,r16,22744 <__sflush_r+0x124>
   22738:	003fed06 	br	226f0 <__sflush_r+0xd0>
   2273c:	90a5883a 	add	r18,r18,r2
   22740:	043feb0e 	bge	zero,r16,226f0 <__sflush_r+0xd0>
   22744:	88800917 	ldw	r2,36(r17)
   22748:	89400717 	ldw	r5,28(r17)
   2274c:	800f883a 	mov	r7,r16
   22750:	900d883a 	mov	r6,r18
   22754:	9809883a 	mov	r4,r19
   22758:	103ee83a 	callr	r2
   2275c:	80a1c83a 	sub	r16,r16,r2
   22760:	00bff616 	blt	zero,r2,2273c <__sflush_r+0x11c>
   22764:	88c0030b 	ldhu	r3,12(r17)
   22768:	00bfffc4 	movi	r2,-1
   2276c:	18c01014 	ori	r3,r3,64
   22770:	88c0030d 	sth	r3,12(r17)
   22774:	003fdf06 	br	226f4 <__sflush_r+0xd4>
   22778:	0005883a 	mov	r2,zero
   2277c:	003fec06 	br	22730 <__sflush_r+0x110>
   22780:	88801415 	stw	r2,80(r17)
   22784:	003fd206 	br	226d0 <__sflush_r+0xb0>
   22788:	28c00f17 	ldw	r3,60(r5)
   2278c:	00ffb316 	blt	zero,r3,2265c <__sflush_r+0x3c>
   22790:	003fd706 	br	226f0 <__sflush_r+0xd0>
   22794:	89400717 	ldw	r5,28(r17)
   22798:	000d883a 	mov	r6,zero
   2279c:	01c00044 	movi	r7,1
   227a0:	9809883a 	mov	r4,r19
   227a4:	403ee83a 	callr	r8
   227a8:	100d883a 	mov	r6,r2
   227ac:	00bfffc4 	movi	r2,-1
   227b0:	30801426 	beq	r6,r2,22804 <__sflush_r+0x1e4>
   227b4:	8880030b 	ldhu	r2,12(r17)
   227b8:	8a000a17 	ldw	r8,40(r17)
   227bc:	003fae06 	br	22678 <__sflush_r+0x58>
   227c0:	98c00017 	ldw	r3,0(r19)
   227c4:	183fba26 	beq	r3,zero,226b0 <__sflush_r+0x90>
   227c8:	01000744 	movi	r4,29
   227cc:	19000626 	beq	r3,r4,227e8 <__sflush_r+0x1c8>
   227d0:	01000584 	movi	r4,22
   227d4:	19000426 	beq	r3,r4,227e8 <__sflush_r+0x1c8>
   227d8:	88c0030b 	ldhu	r3,12(r17)
   227dc:	18c01014 	ori	r3,r3,64
   227e0:	88c0030d 	sth	r3,12(r17)
   227e4:	003fc306 	br	226f4 <__sflush_r+0xd4>
   227e8:	8880030b 	ldhu	r2,12(r17)
   227ec:	88c00417 	ldw	r3,16(r17)
   227f0:	88000115 	stw	zero,4(r17)
   227f4:	10bdffcc 	andi	r2,r2,63487
   227f8:	8880030d 	sth	r2,12(r17)
   227fc:	88c00015 	stw	r3,0(r17)
   22800:	003fb306 	br	226d0 <__sflush_r+0xb0>
   22804:	98800017 	ldw	r2,0(r19)
   22808:	103fea26 	beq	r2,zero,227b4 <__sflush_r+0x194>
   2280c:	00c00744 	movi	r3,29
   22810:	10c00226 	beq	r2,r3,2281c <__sflush_r+0x1fc>
   22814:	00c00584 	movi	r3,22
   22818:	10c0031e 	bne	r2,r3,22828 <__sflush_r+0x208>
   2281c:	9c000015 	stw	r16,0(r19)
   22820:	0005883a 	mov	r2,zero
   22824:	003fb306 	br	226f4 <__sflush_r+0xd4>
   22828:	88c0030b 	ldhu	r3,12(r17)
   2282c:	3005883a 	mov	r2,r6
   22830:	18c01014 	ori	r3,r3,64
   22834:	88c0030d 	sth	r3,12(r17)
   22838:	003fae06 	br	226f4 <__sflush_r+0xd4>

0002283c <_fflush_r>:
   2283c:	defffd04 	addi	sp,sp,-12
   22840:	dc000115 	stw	r16,4(sp)
   22844:	dfc00215 	stw	ra,8(sp)
   22848:	2021883a 	mov	r16,r4
   2284c:	20000226 	beq	r4,zero,22858 <_fflush_r+0x1c>
   22850:	20800e17 	ldw	r2,56(r4)
   22854:	10000c26 	beq	r2,zero,22888 <_fflush_r+0x4c>
   22858:	2880030f 	ldh	r2,12(r5)
   2285c:	1000051e 	bne	r2,zero,22874 <_fflush_r+0x38>
   22860:	0005883a 	mov	r2,zero
   22864:	dfc00217 	ldw	ra,8(sp)
   22868:	dc000117 	ldw	r16,4(sp)
   2286c:	dec00304 	addi	sp,sp,12
   22870:	f800283a 	ret
   22874:	8009883a 	mov	r4,r16
   22878:	dfc00217 	ldw	ra,8(sp)
   2287c:	dc000117 	ldw	r16,4(sp)
   22880:	dec00304 	addi	sp,sp,12
   22884:	00226201 	jmpi	22620 <__sflush_r>
   22888:	d9400015 	stw	r5,0(sp)
   2288c:	00208c40 	call	208c4 <__sinit>
   22890:	d9400017 	ldw	r5,0(sp)
   22894:	003ff006 	br	22858 <_fflush_r+0x1c>

00022898 <fflush>:
   22898:	20000526 	beq	r4,zero,228b0 <fflush+0x18>
   2289c:	008000b4 	movhi	r2,2
   228a0:	10961004 	addi	r2,r2,22592
   228a4:	200b883a 	mov	r5,r4
   228a8:	11000017 	ldw	r4,0(r2)
   228ac:	002283c1 	jmpi	2283c <_fflush_r>
   228b0:	008000b4 	movhi	r2,2
   228b4:	10960f04 	addi	r2,r2,22588
   228b8:	11000017 	ldw	r4,0(r2)
   228bc:	014000b4 	movhi	r5,2
   228c0:	294a0f04 	addi	r5,r5,10300
   228c4:	0020ea01 	jmpi	20ea0 <_fwalk_reent>

000228c8 <_malloc_trim_r>:
   228c8:	defffb04 	addi	sp,sp,-20
   228cc:	dcc00315 	stw	r19,12(sp)
   228d0:	04c000b4 	movhi	r19,2
   228d4:	dc800215 	stw	r18,8(sp)
   228d8:	dc400115 	stw	r17,4(sp)
   228dc:	dc000015 	stw	r16,0(sp)
   228e0:	dfc00415 	stw	ra,16(sp)
   228e4:	2821883a 	mov	r16,r5
   228e8:	9cd49804 	addi	r19,r19,21088
   228ec:	2025883a 	mov	r18,r4
   228f0:	00239200 	call	23920 <__malloc_lock>
   228f4:	98800217 	ldw	r2,8(r19)
   228f8:	14400117 	ldw	r17,4(r2)
   228fc:	00bfff04 	movi	r2,-4
   22900:	88a2703a 	and	r17,r17,r2
   22904:	8c21c83a 	sub	r16,r17,r16
   22908:	8403fbc4 	addi	r16,r16,4079
   2290c:	8020d33a 	srli	r16,r16,12
   22910:	0083ffc4 	movi	r2,4095
   22914:	843fffc4 	addi	r16,r16,-1
   22918:	8020933a 	slli	r16,r16,12
   2291c:	1400060e 	bge	r2,r16,22938 <_malloc_trim_r+0x70>
   22920:	000b883a 	mov	r5,zero
   22924:	9009883a 	mov	r4,r18
   22928:	00221840 	call	22184 <_sbrk_r>
   2292c:	98c00217 	ldw	r3,8(r19)
   22930:	1c47883a 	add	r3,r3,r17
   22934:	10c00a26 	beq	r2,r3,22960 <_malloc_trim_r+0x98>
   22938:	9009883a 	mov	r4,r18
   2293c:	00239440 	call	23944 <__malloc_unlock>
   22940:	0005883a 	mov	r2,zero
   22944:	dfc00417 	ldw	ra,16(sp)
   22948:	dcc00317 	ldw	r19,12(sp)
   2294c:	dc800217 	ldw	r18,8(sp)
   22950:	dc400117 	ldw	r17,4(sp)
   22954:	dc000017 	ldw	r16,0(sp)
   22958:	dec00504 	addi	sp,sp,20
   2295c:	f800283a 	ret
   22960:	040bc83a 	sub	r5,zero,r16
   22964:	9009883a 	mov	r4,r18
   22968:	00221840 	call	22184 <_sbrk_r>
   2296c:	00ffffc4 	movi	r3,-1
   22970:	10c00d26 	beq	r2,r3,229a8 <_malloc_trim_r+0xe0>
   22974:	00c000b4 	movhi	r3,2
   22978:	18d8b304 	addi	r3,r3,25292
   2297c:	18800017 	ldw	r2,0(r3)
   22980:	99000217 	ldw	r4,8(r19)
   22984:	8c23c83a 	sub	r17,r17,r16
   22988:	8c400054 	ori	r17,r17,1
   2298c:	1421c83a 	sub	r16,r2,r16
   22990:	24400115 	stw	r17,4(r4)
   22994:	9009883a 	mov	r4,r18
   22998:	1c000015 	stw	r16,0(r3)
   2299c:	00239440 	call	23944 <__malloc_unlock>
   229a0:	00800044 	movi	r2,1
   229a4:	003fe706 	br	22944 <_malloc_trim_r+0x7c>
   229a8:	000b883a 	mov	r5,zero
   229ac:	9009883a 	mov	r4,r18
   229b0:	00221840 	call	22184 <_sbrk_r>
   229b4:	99000217 	ldw	r4,8(r19)
   229b8:	014003c4 	movi	r5,15
   229bc:	1107c83a 	sub	r3,r2,r4
   229c0:	28ffdd0e 	bge	r5,r3,22938 <_malloc_trim_r+0x70>
   229c4:	014000b4 	movhi	r5,2
   229c8:	29561104 	addi	r5,r5,22596
   229cc:	29400017 	ldw	r5,0(r5)
   229d0:	18c00054 	ori	r3,r3,1
   229d4:	20c00115 	stw	r3,4(r4)
   229d8:	00c000b4 	movhi	r3,2
   229dc:	1145c83a 	sub	r2,r2,r5
   229e0:	18d8b304 	addi	r3,r3,25292
   229e4:	18800015 	stw	r2,0(r3)
   229e8:	003fd306 	br	22938 <_malloc_trim_r+0x70>

000229ec <_free_r>:
   229ec:	28004126 	beq	r5,zero,22af4 <_free_r+0x108>
   229f0:	defffd04 	addi	sp,sp,-12
   229f4:	dc400115 	stw	r17,4(sp)
   229f8:	dc000015 	stw	r16,0(sp)
   229fc:	2023883a 	mov	r17,r4
   22a00:	2821883a 	mov	r16,r5
   22a04:	dfc00215 	stw	ra,8(sp)
   22a08:	00239200 	call	23920 <__malloc_lock>
   22a0c:	81ffff17 	ldw	r7,-4(r16)
   22a10:	00bfff84 	movi	r2,-2
   22a14:	010000b4 	movhi	r4,2
   22a18:	81bffe04 	addi	r6,r16,-8
   22a1c:	3884703a 	and	r2,r7,r2
   22a20:	21149804 	addi	r4,r4,21088
   22a24:	308b883a 	add	r5,r6,r2
   22a28:	2a400117 	ldw	r9,4(r5)
   22a2c:	22000217 	ldw	r8,8(r4)
   22a30:	00ffff04 	movi	r3,-4
   22a34:	48c6703a 	and	r3,r9,r3
   22a38:	2a005726 	beq	r5,r8,22b98 <_free_r+0x1ac>
   22a3c:	28c00115 	stw	r3,4(r5)
   22a40:	39c0004c 	andi	r7,r7,1
   22a44:	3800091e 	bne	r7,zero,22a6c <_free_r+0x80>
   22a48:	823ffe17 	ldw	r8,-8(r16)
   22a4c:	22400204 	addi	r9,r4,8
   22a50:	320dc83a 	sub	r6,r6,r8
   22a54:	31c00217 	ldw	r7,8(r6)
   22a58:	1205883a 	add	r2,r2,r8
   22a5c:	3a406526 	beq	r7,r9,22bf4 <_free_r+0x208>
   22a60:	32000317 	ldw	r8,12(r6)
   22a64:	3a000315 	stw	r8,12(r7)
   22a68:	41c00215 	stw	r7,8(r8)
   22a6c:	28cf883a 	add	r7,r5,r3
   22a70:	39c00117 	ldw	r7,4(r7)
   22a74:	39c0004c 	andi	r7,r7,1
   22a78:	38003a26 	beq	r7,zero,22b64 <_free_r+0x178>
   22a7c:	10c00054 	ori	r3,r2,1
   22a80:	30c00115 	stw	r3,4(r6)
   22a84:	3087883a 	add	r3,r6,r2
   22a88:	18800015 	stw	r2,0(r3)
   22a8c:	00c07fc4 	movi	r3,511
   22a90:	18801936 	bltu	r3,r2,22af8 <_free_r+0x10c>
   22a94:	1004d0fa 	srli	r2,r2,3
   22a98:	01c00044 	movi	r7,1
   22a9c:	21400117 	ldw	r5,4(r4)
   22aa0:	10c00044 	addi	r3,r2,1
   22aa4:	18c7883a 	add	r3,r3,r3
   22aa8:	1005d0ba 	srai	r2,r2,2
   22aac:	18c7883a 	add	r3,r3,r3
   22ab0:	18c7883a 	add	r3,r3,r3
   22ab4:	1907883a 	add	r3,r3,r4
   22ab8:	3884983a 	sll	r2,r7,r2
   22abc:	19c00017 	ldw	r7,0(r3)
   22ac0:	1a3ffe04 	addi	r8,r3,-8
   22ac4:	1144b03a 	or	r2,r2,r5
   22ac8:	32000315 	stw	r8,12(r6)
   22acc:	31c00215 	stw	r7,8(r6)
   22ad0:	20800115 	stw	r2,4(r4)
   22ad4:	19800015 	stw	r6,0(r3)
   22ad8:	39800315 	stw	r6,12(r7)
   22adc:	8809883a 	mov	r4,r17
   22ae0:	dfc00217 	ldw	ra,8(sp)
   22ae4:	dc400117 	ldw	r17,4(sp)
   22ae8:	dc000017 	ldw	r16,0(sp)
   22aec:	dec00304 	addi	sp,sp,12
   22af0:	00239441 	jmpi	23944 <__malloc_unlock>
   22af4:	f800283a 	ret
   22af8:	100ad27a 	srli	r5,r2,9
   22afc:	00c00104 	movi	r3,4
   22b00:	19404a36 	bltu	r3,r5,22c2c <_free_r+0x240>
   22b04:	100ad1ba 	srli	r5,r2,6
   22b08:	28c00e44 	addi	r3,r5,57
   22b0c:	18c7883a 	add	r3,r3,r3
   22b10:	29400e04 	addi	r5,r5,56
   22b14:	18c7883a 	add	r3,r3,r3
   22b18:	18c7883a 	add	r3,r3,r3
   22b1c:	1909883a 	add	r4,r3,r4
   22b20:	20c00017 	ldw	r3,0(r4)
   22b24:	01c000b4 	movhi	r7,2
   22b28:	213ffe04 	addi	r4,r4,-8
   22b2c:	39d49804 	addi	r7,r7,21088
   22b30:	20c04426 	beq	r4,r3,22c44 <_free_r+0x258>
   22b34:	01ffff04 	movi	r7,-4
   22b38:	19400117 	ldw	r5,4(r3)
   22b3c:	29ca703a 	and	r5,r5,r7
   22b40:	1140022e 	bgeu	r2,r5,22b4c <_free_r+0x160>
   22b44:	18c00217 	ldw	r3,8(r3)
   22b48:	20fffb1e 	bne	r4,r3,22b38 <_free_r+0x14c>
   22b4c:	19000317 	ldw	r4,12(r3)
   22b50:	31000315 	stw	r4,12(r6)
   22b54:	30c00215 	stw	r3,8(r6)
   22b58:	21800215 	stw	r6,8(r4)
   22b5c:	19800315 	stw	r6,12(r3)
   22b60:	003fde06 	br	22adc <_free_r+0xf0>
   22b64:	29c00217 	ldw	r7,8(r5)
   22b68:	10c5883a 	add	r2,r2,r3
   22b6c:	00c000b4 	movhi	r3,2
   22b70:	18d49a04 	addi	r3,r3,21096
   22b74:	38c03b26 	beq	r7,r3,22c64 <_free_r+0x278>
   22b78:	2a000317 	ldw	r8,12(r5)
   22b7c:	11400054 	ori	r5,r2,1
   22b80:	3087883a 	add	r3,r6,r2
   22b84:	3a000315 	stw	r8,12(r7)
   22b88:	41c00215 	stw	r7,8(r8)
   22b8c:	31400115 	stw	r5,4(r6)
   22b90:	18800015 	stw	r2,0(r3)
   22b94:	003fbd06 	br	22a8c <_free_r+0xa0>
   22b98:	39c0004c 	andi	r7,r7,1
   22b9c:	10c5883a 	add	r2,r2,r3
   22ba0:	3800071e 	bne	r7,zero,22bc0 <_free_r+0x1d4>
   22ba4:	81fffe17 	ldw	r7,-8(r16)
   22ba8:	31cdc83a 	sub	r6,r6,r7
   22bac:	30c00317 	ldw	r3,12(r6)
   22bb0:	31400217 	ldw	r5,8(r6)
   22bb4:	11c5883a 	add	r2,r2,r7
   22bb8:	28c00315 	stw	r3,12(r5)
   22bbc:	19400215 	stw	r5,8(r3)
   22bc0:	10c00054 	ori	r3,r2,1
   22bc4:	30c00115 	stw	r3,4(r6)
   22bc8:	00c000b4 	movhi	r3,2
   22bcc:	18d61204 	addi	r3,r3,22600
   22bd0:	18c00017 	ldw	r3,0(r3)
   22bd4:	21800215 	stw	r6,8(r4)
   22bd8:	10ffc036 	bltu	r2,r3,22adc <_free_r+0xf0>
   22bdc:	008000b4 	movhi	r2,2
   22be0:	1098ac04 	addi	r2,r2,25264
   22be4:	11400017 	ldw	r5,0(r2)
   22be8:	8809883a 	mov	r4,r17
   22bec:	00228c80 	call	228c8 <_malloc_trim_r>
   22bf0:	003fba06 	br	22adc <_free_r+0xf0>
   22bf4:	28c9883a 	add	r4,r5,r3
   22bf8:	21000117 	ldw	r4,4(r4)
   22bfc:	2100004c 	andi	r4,r4,1
   22c00:	2000391e 	bne	r4,zero,22ce8 <_free_r+0x2fc>
   22c04:	29c00217 	ldw	r7,8(r5)
   22c08:	29000317 	ldw	r4,12(r5)
   22c0c:	1885883a 	add	r2,r3,r2
   22c10:	10c00054 	ori	r3,r2,1
   22c14:	39000315 	stw	r4,12(r7)
   22c18:	21c00215 	stw	r7,8(r4)
   22c1c:	30c00115 	stw	r3,4(r6)
   22c20:	308d883a 	add	r6,r6,r2
   22c24:	30800015 	stw	r2,0(r6)
   22c28:	003fac06 	br	22adc <_free_r+0xf0>
   22c2c:	00c00504 	movi	r3,20
   22c30:	19401536 	bltu	r3,r5,22c88 <_free_r+0x29c>
   22c34:	28c01704 	addi	r3,r5,92
   22c38:	18c7883a 	add	r3,r3,r3
   22c3c:	294016c4 	addi	r5,r5,91
   22c40:	003fb406 	br	22b14 <_free_r+0x128>
   22c44:	280bd0ba 	srai	r5,r5,2
   22c48:	00c00044 	movi	r3,1
   22c4c:	38800117 	ldw	r2,4(r7)
   22c50:	194a983a 	sll	r5,r3,r5
   22c54:	2007883a 	mov	r3,r4
   22c58:	2884b03a 	or	r2,r5,r2
   22c5c:	38800115 	stw	r2,4(r7)
   22c60:	003fbb06 	br	22b50 <_free_r+0x164>
   22c64:	21800515 	stw	r6,20(r4)
   22c68:	21800415 	stw	r6,16(r4)
   22c6c:	10c00054 	ori	r3,r2,1
   22c70:	31c00315 	stw	r7,12(r6)
   22c74:	31c00215 	stw	r7,8(r6)
   22c78:	30c00115 	stw	r3,4(r6)
   22c7c:	308d883a 	add	r6,r6,r2
   22c80:	30800015 	stw	r2,0(r6)
   22c84:	003f9506 	br	22adc <_free_r+0xf0>
   22c88:	00c01504 	movi	r3,84
   22c8c:	19400536 	bltu	r3,r5,22ca4 <_free_r+0x2b8>
   22c90:	100ad33a 	srli	r5,r2,12
   22c94:	28c01bc4 	addi	r3,r5,111
   22c98:	18c7883a 	add	r3,r3,r3
   22c9c:	29401b84 	addi	r5,r5,110
   22ca0:	003f9c06 	br	22b14 <_free_r+0x128>
   22ca4:	00c05504 	movi	r3,340
   22ca8:	19400536 	bltu	r3,r5,22cc0 <_free_r+0x2d4>
   22cac:	100ad3fa 	srli	r5,r2,15
   22cb0:	28c01e04 	addi	r3,r5,120
   22cb4:	18c7883a 	add	r3,r3,r3
   22cb8:	29401dc4 	addi	r5,r5,119
   22cbc:	003f9506 	br	22b14 <_free_r+0x128>
   22cc0:	00c15504 	movi	r3,1364
   22cc4:	19400536 	bltu	r3,r5,22cdc <_free_r+0x2f0>
   22cc8:	100ad4ba 	srli	r5,r2,18
   22ccc:	28c01f44 	addi	r3,r5,125
   22cd0:	18c7883a 	add	r3,r3,r3
   22cd4:	29401f04 	addi	r5,r5,124
   22cd8:	003f8e06 	br	22b14 <_free_r+0x128>
   22cdc:	00c03f84 	movi	r3,254
   22ce0:	01401f84 	movi	r5,126
   22ce4:	003f8b06 	br	22b14 <_free_r+0x128>
   22ce8:	10c00054 	ori	r3,r2,1
   22cec:	30c00115 	stw	r3,4(r6)
   22cf0:	308d883a 	add	r6,r6,r2
   22cf4:	30800015 	stw	r2,0(r6)
   22cf8:	003f7806 	br	22adc <_free_r+0xf0>

00022cfc <_lseek_r>:
   22cfc:	defffd04 	addi	sp,sp,-12
   22d00:	2805883a 	mov	r2,r5
   22d04:	dc000015 	stw	r16,0(sp)
   22d08:	040000b4 	movhi	r16,2
   22d0c:	dc400115 	stw	r17,4(sp)
   22d10:	300b883a 	mov	r5,r6
   22d14:	8418ad04 	addi	r16,r16,25268
   22d18:	2023883a 	mov	r17,r4
   22d1c:	380d883a 	mov	r6,r7
   22d20:	1009883a 	mov	r4,r2
   22d24:	dfc00215 	stw	ra,8(sp)
   22d28:	80000015 	stw	zero,0(r16)
   22d2c:	00237c80 	call	237c8 <lseek>
   22d30:	00ffffc4 	movi	r3,-1
   22d34:	10c00526 	beq	r2,r3,22d4c <_lseek_r+0x50>
   22d38:	dfc00217 	ldw	ra,8(sp)
   22d3c:	dc400117 	ldw	r17,4(sp)
   22d40:	dc000017 	ldw	r16,0(sp)
   22d44:	dec00304 	addi	sp,sp,12
   22d48:	f800283a 	ret
   22d4c:	80c00017 	ldw	r3,0(r16)
   22d50:	183ff926 	beq	r3,zero,22d38 <_lseek_r+0x3c>
   22d54:	88c00015 	stw	r3,0(r17)
   22d58:	003ff706 	br	22d38 <_lseek_r+0x3c>

00022d5c <__smakebuf_r>:
   22d5c:	2880030b 	ldhu	r2,12(r5)
   22d60:	10c0008c 	andi	r3,r2,2
   22d64:	1800411e 	bne	r3,zero,22e6c <__smakebuf_r+0x110>
   22d68:	deffec04 	addi	sp,sp,-80
   22d6c:	dc000f15 	stw	r16,60(sp)
   22d70:	2821883a 	mov	r16,r5
   22d74:	2940038f 	ldh	r5,14(r5)
   22d78:	dc401015 	stw	r17,64(sp)
   22d7c:	dfc01315 	stw	ra,76(sp)
   22d80:	dcc01215 	stw	r19,72(sp)
   22d84:	dc801115 	stw	r18,68(sp)
   22d88:	2023883a 	mov	r17,r4
   22d8c:	28001c16 	blt	r5,zero,22e00 <__smakebuf_r+0xa4>
   22d90:	d80d883a 	mov	r6,sp
   22d94:	0022f780 	call	22f78 <_fstat_r>
   22d98:	10001816 	blt	r2,zero,22dfc <__smakebuf_r+0xa0>
   22d9c:	d8800117 	ldw	r2,4(sp)
   22da0:	00e00014 	movui	r3,32768
   22da4:	10bc000c 	andi	r2,r2,61440
   22da8:	14c80020 	cmpeqi	r19,r2,8192
   22dac:	10c03726 	beq	r2,r3,22e8c <__smakebuf_r+0x130>
   22db0:	80c0030b 	ldhu	r3,12(r16)
   22db4:	18c20014 	ori	r3,r3,2048
   22db8:	80c0030d 	sth	r3,12(r16)
   22dbc:	00c80004 	movi	r3,8192
   22dc0:	10c0521e 	bne	r2,r3,22f0c <__smakebuf_r+0x1b0>
   22dc4:	8140038f 	ldh	r5,14(r16)
   22dc8:	8809883a 	mov	r4,r17
   22dcc:	0022fd40 	call	22fd4 <_isatty_r>
   22dd0:	10004c26 	beq	r2,zero,22f04 <__smakebuf_r+0x1a8>
   22dd4:	8080030b 	ldhu	r2,12(r16)
   22dd8:	80c010c4 	addi	r3,r16,67
   22ddc:	80c00015 	stw	r3,0(r16)
   22de0:	10800054 	ori	r2,r2,1
   22de4:	8080030d 	sth	r2,12(r16)
   22de8:	00800044 	movi	r2,1
   22dec:	80c00415 	stw	r3,16(r16)
   22df0:	80800515 	stw	r2,20(r16)
   22df4:	04810004 	movi	r18,1024
   22df8:	00000706 	br	22e18 <__smakebuf_r+0xbc>
   22dfc:	8080030b 	ldhu	r2,12(r16)
   22e00:	10c0200c 	andi	r3,r2,128
   22e04:	18001f1e 	bne	r3,zero,22e84 <__smakebuf_r+0x128>
   22e08:	04810004 	movi	r18,1024
   22e0c:	10820014 	ori	r2,r2,2048
   22e10:	8080030d 	sth	r2,12(r16)
   22e14:	0027883a 	mov	r19,zero
   22e18:	900b883a 	mov	r5,r18
   22e1c:	8809883a 	mov	r4,r17
   22e20:	0020f640 	call	20f64 <_malloc_r>
   22e24:	10002c26 	beq	r2,zero,22ed8 <__smakebuf_r+0x17c>
   22e28:	80c0030b 	ldhu	r3,12(r16)
   22e2c:	010000b4 	movhi	r4,2
   22e30:	21015b04 	addi	r4,r4,1388
   22e34:	89000f15 	stw	r4,60(r17)
   22e38:	18c02014 	ori	r3,r3,128
   22e3c:	80c0030d 	sth	r3,12(r16)
   22e40:	80800015 	stw	r2,0(r16)
   22e44:	80800415 	stw	r2,16(r16)
   22e48:	84800515 	stw	r18,20(r16)
   22e4c:	98001a1e 	bne	r19,zero,22eb8 <__smakebuf_r+0x15c>
   22e50:	dfc01317 	ldw	ra,76(sp)
   22e54:	dcc01217 	ldw	r19,72(sp)
   22e58:	dc801117 	ldw	r18,68(sp)
   22e5c:	dc401017 	ldw	r17,64(sp)
   22e60:	dc000f17 	ldw	r16,60(sp)
   22e64:	dec01404 	addi	sp,sp,80
   22e68:	f800283a 	ret
   22e6c:	288010c4 	addi	r2,r5,67
   22e70:	28800015 	stw	r2,0(r5)
   22e74:	28800415 	stw	r2,16(r5)
   22e78:	00800044 	movi	r2,1
   22e7c:	28800515 	stw	r2,20(r5)
   22e80:	f800283a 	ret
   22e84:	04801004 	movi	r18,64
   22e88:	003fe006 	br	22e0c <__smakebuf_r+0xb0>
   22e8c:	81000a17 	ldw	r4,40(r16)
   22e90:	00c000b4 	movhi	r3,2
   22e94:	18c8ac04 	addi	r3,r3,8880
   22e98:	20ffc51e 	bne	r4,r3,22db0 <__smakebuf_r+0x54>
   22e9c:	8080030b 	ldhu	r2,12(r16)
   22ea0:	04810004 	movi	r18,1024
   22ea4:	84801315 	stw	r18,76(r16)
   22ea8:	1484b03a 	or	r2,r2,r18
   22eac:	8080030d 	sth	r2,12(r16)
   22eb0:	0027883a 	mov	r19,zero
   22eb4:	003fd806 	br	22e18 <__smakebuf_r+0xbc>
   22eb8:	8140038f 	ldh	r5,14(r16)
   22ebc:	8809883a 	mov	r4,r17
   22ec0:	0022fd40 	call	22fd4 <_isatty_r>
   22ec4:	103fe226 	beq	r2,zero,22e50 <__smakebuf_r+0xf4>
   22ec8:	8080030b 	ldhu	r2,12(r16)
   22ecc:	10800054 	ori	r2,r2,1
   22ed0:	8080030d 	sth	r2,12(r16)
   22ed4:	003fde06 	br	22e50 <__smakebuf_r+0xf4>
   22ed8:	8080030b 	ldhu	r2,12(r16)
   22edc:	10c0800c 	andi	r3,r2,512
   22ee0:	183fdb1e 	bne	r3,zero,22e50 <__smakebuf_r+0xf4>
   22ee4:	10800094 	ori	r2,r2,2
   22ee8:	80c010c4 	addi	r3,r16,67
   22eec:	8080030d 	sth	r2,12(r16)
   22ef0:	00800044 	movi	r2,1
   22ef4:	80c00015 	stw	r3,0(r16)
   22ef8:	80c00415 	stw	r3,16(r16)
   22efc:	80800515 	stw	r2,20(r16)
   22f00:	003fd306 	br	22e50 <__smakebuf_r+0xf4>
   22f04:	04810004 	movi	r18,1024
   22f08:	003fc306 	br	22e18 <__smakebuf_r+0xbc>
   22f0c:	0027883a 	mov	r19,zero
   22f10:	04810004 	movi	r18,1024
   22f14:	003fc006 	br	22e18 <__smakebuf_r+0xbc>

00022f18 <_read_r>:
   22f18:	defffd04 	addi	sp,sp,-12
   22f1c:	2805883a 	mov	r2,r5
   22f20:	dc000015 	stw	r16,0(sp)
   22f24:	040000b4 	movhi	r16,2
   22f28:	dc400115 	stw	r17,4(sp)
   22f2c:	300b883a 	mov	r5,r6
   22f30:	8418ad04 	addi	r16,r16,25268
   22f34:	2023883a 	mov	r17,r4
   22f38:	380d883a 	mov	r6,r7
   22f3c:	1009883a 	mov	r4,r2
   22f40:	dfc00215 	stw	ra,8(sp)
   22f44:	80000015 	stw	zero,0(r16)
   22f48:	00239a40 	call	239a4 <read>
   22f4c:	00ffffc4 	movi	r3,-1
   22f50:	10c00526 	beq	r2,r3,22f68 <_read_r+0x50>
   22f54:	dfc00217 	ldw	ra,8(sp)
   22f58:	dc400117 	ldw	r17,4(sp)
   22f5c:	dc000017 	ldw	r16,0(sp)
   22f60:	dec00304 	addi	sp,sp,12
   22f64:	f800283a 	ret
   22f68:	80c00017 	ldw	r3,0(r16)
   22f6c:	183ff926 	beq	r3,zero,22f54 <_read_r+0x3c>
   22f70:	88c00015 	stw	r3,0(r17)
   22f74:	003ff706 	br	22f54 <_read_r+0x3c>

00022f78 <_fstat_r>:
   22f78:	defffd04 	addi	sp,sp,-12
   22f7c:	2805883a 	mov	r2,r5
   22f80:	dc000015 	stw	r16,0(sp)
   22f84:	040000b4 	movhi	r16,2
   22f88:	dc400115 	stw	r17,4(sp)
   22f8c:	8418ad04 	addi	r16,r16,25268
   22f90:	2023883a 	mov	r17,r4
   22f94:	300b883a 	mov	r5,r6
   22f98:	1009883a 	mov	r4,r2
   22f9c:	dfc00215 	stw	ra,8(sp)
   22fa0:	80000015 	stw	zero,0(r16)
   22fa4:	00233800 	call	23380 <fstat>
   22fa8:	00ffffc4 	movi	r3,-1
   22fac:	10c00526 	beq	r2,r3,22fc4 <_fstat_r+0x4c>
   22fb0:	dfc00217 	ldw	ra,8(sp)
   22fb4:	dc400117 	ldw	r17,4(sp)
   22fb8:	dc000017 	ldw	r16,0(sp)
   22fbc:	dec00304 	addi	sp,sp,12
   22fc0:	f800283a 	ret
   22fc4:	80c00017 	ldw	r3,0(r16)
   22fc8:	183ff926 	beq	r3,zero,22fb0 <_fstat_r+0x38>
   22fcc:	88c00015 	stw	r3,0(r17)
   22fd0:	003ff706 	br	22fb0 <_fstat_r+0x38>

00022fd4 <_isatty_r>:
   22fd4:	defffd04 	addi	sp,sp,-12
   22fd8:	dc000015 	stw	r16,0(sp)
   22fdc:	040000b4 	movhi	r16,2
   22fe0:	dc400115 	stw	r17,4(sp)
   22fe4:	8418ad04 	addi	r16,r16,25268
   22fe8:	2023883a 	mov	r17,r4
   22fec:	2809883a 	mov	r4,r5
   22ff0:	dfc00215 	stw	ra,8(sp)
   22ff4:	80000015 	stw	zero,0(r16)
   22ff8:	00235f40 	call	235f4 <isatty>
   22ffc:	00ffffc4 	movi	r3,-1
   23000:	10c00526 	beq	r2,r3,23018 <_isatty_r+0x44>
   23004:	dfc00217 	ldw	ra,8(sp)
   23008:	dc400117 	ldw	r17,4(sp)
   2300c:	dc000017 	ldw	r16,0(sp)
   23010:	dec00304 	addi	sp,sp,12
   23014:	f800283a 	ret
   23018:	80c00017 	ldw	r3,0(r16)
   2301c:	183ff926 	beq	r3,zero,23004 <_isatty_r+0x30>
   23020:	88c00015 	stw	r3,0(r17)
   23024:	003ff706 	br	23004 <_isatty_r+0x30>

00023028 <__divsi3>:
   23028:	20001b16 	blt	r4,zero,23098 <__divsi3+0x70>
   2302c:	000f883a 	mov	r7,zero
   23030:	28001616 	blt	r5,zero,2308c <__divsi3+0x64>
   23034:	200d883a 	mov	r6,r4
   23038:	29001a2e 	bgeu	r5,r4,230a4 <__divsi3+0x7c>
   2303c:	00800804 	movi	r2,32
   23040:	00c00044 	movi	r3,1
   23044:	00000106 	br	2304c <__divsi3+0x24>
   23048:	10000d26 	beq	r2,zero,23080 <__divsi3+0x58>
   2304c:	294b883a 	add	r5,r5,r5
   23050:	10bfffc4 	addi	r2,r2,-1
   23054:	18c7883a 	add	r3,r3,r3
   23058:	293ffb36 	bltu	r5,r4,23048 <__divsi3+0x20>
   2305c:	0005883a 	mov	r2,zero
   23060:	18000726 	beq	r3,zero,23080 <__divsi3+0x58>
   23064:	0005883a 	mov	r2,zero
   23068:	31400236 	bltu	r6,r5,23074 <__divsi3+0x4c>
   2306c:	314dc83a 	sub	r6,r6,r5
   23070:	10c4b03a 	or	r2,r2,r3
   23074:	1806d07a 	srli	r3,r3,1
   23078:	280ad07a 	srli	r5,r5,1
   2307c:	183ffa1e 	bne	r3,zero,23068 <__divsi3+0x40>
   23080:	38000126 	beq	r7,zero,23088 <__divsi3+0x60>
   23084:	0085c83a 	sub	r2,zero,r2
   23088:	f800283a 	ret
   2308c:	014bc83a 	sub	r5,zero,r5
   23090:	39c0005c 	xori	r7,r7,1
   23094:	003fe706 	br	23034 <__divsi3+0xc>
   23098:	0109c83a 	sub	r4,zero,r4
   2309c:	01c00044 	movi	r7,1
   230a0:	003fe306 	br	23030 <__divsi3+0x8>
   230a4:	00c00044 	movi	r3,1
   230a8:	003fee06 	br	23064 <__divsi3+0x3c>

000230ac <__modsi3>:
   230ac:	20001716 	blt	r4,zero,2310c <__modsi3+0x60>
   230b0:	000f883a 	mov	r7,zero
   230b4:	2005883a 	mov	r2,r4
   230b8:	28001216 	blt	r5,zero,23104 <__modsi3+0x58>
   230bc:	2900162e 	bgeu	r5,r4,23118 <__modsi3+0x6c>
   230c0:	01800804 	movi	r6,32
   230c4:	00c00044 	movi	r3,1
   230c8:	00000106 	br	230d0 <__modsi3+0x24>
   230cc:	30000a26 	beq	r6,zero,230f8 <__modsi3+0x4c>
   230d0:	294b883a 	add	r5,r5,r5
   230d4:	31bfffc4 	addi	r6,r6,-1
   230d8:	18c7883a 	add	r3,r3,r3
   230dc:	293ffb36 	bltu	r5,r4,230cc <__modsi3+0x20>
   230e0:	18000526 	beq	r3,zero,230f8 <__modsi3+0x4c>
   230e4:	1806d07a 	srli	r3,r3,1
   230e8:	11400136 	bltu	r2,r5,230f0 <__modsi3+0x44>
   230ec:	1145c83a 	sub	r2,r2,r5
   230f0:	280ad07a 	srli	r5,r5,1
   230f4:	183ffb1e 	bne	r3,zero,230e4 <__modsi3+0x38>
   230f8:	38000126 	beq	r7,zero,23100 <__modsi3+0x54>
   230fc:	0085c83a 	sub	r2,zero,r2
   23100:	f800283a 	ret
   23104:	014bc83a 	sub	r5,zero,r5
   23108:	003fec06 	br	230bc <__modsi3+0x10>
   2310c:	0109c83a 	sub	r4,zero,r4
   23110:	01c00044 	movi	r7,1
   23114:	003fe706 	br	230b4 <__modsi3+0x8>
   23118:	00c00044 	movi	r3,1
   2311c:	003ff106 	br	230e4 <__modsi3+0x38>

00023120 <__udivsi3>:
   23120:	200d883a 	mov	r6,r4
   23124:	2900152e 	bgeu	r5,r4,2317c <__udivsi3+0x5c>
   23128:	28001416 	blt	r5,zero,2317c <__udivsi3+0x5c>
   2312c:	00800804 	movi	r2,32
   23130:	00c00044 	movi	r3,1
   23134:	00000206 	br	23140 <__udivsi3+0x20>
   23138:	10000e26 	beq	r2,zero,23174 <__udivsi3+0x54>
   2313c:	28000516 	blt	r5,zero,23154 <__udivsi3+0x34>
   23140:	294b883a 	add	r5,r5,r5
   23144:	10bfffc4 	addi	r2,r2,-1
   23148:	18c7883a 	add	r3,r3,r3
   2314c:	293ffa36 	bltu	r5,r4,23138 <__udivsi3+0x18>
   23150:	18000826 	beq	r3,zero,23174 <__udivsi3+0x54>
   23154:	0005883a 	mov	r2,zero
   23158:	31400236 	bltu	r6,r5,23164 <__udivsi3+0x44>
   2315c:	314dc83a 	sub	r6,r6,r5
   23160:	10c4b03a 	or	r2,r2,r3
   23164:	1806d07a 	srli	r3,r3,1
   23168:	280ad07a 	srli	r5,r5,1
   2316c:	183ffa1e 	bne	r3,zero,23158 <__udivsi3+0x38>
   23170:	f800283a 	ret
   23174:	0005883a 	mov	r2,zero
   23178:	f800283a 	ret
   2317c:	00c00044 	movi	r3,1
   23180:	003ff406 	br	23154 <__udivsi3+0x34>

00023184 <__umodsi3>:
   23184:	2005883a 	mov	r2,r4
   23188:	2900122e 	bgeu	r5,r4,231d4 <__umodsi3+0x50>
   2318c:	28001116 	blt	r5,zero,231d4 <__umodsi3+0x50>
   23190:	01800804 	movi	r6,32
   23194:	00c00044 	movi	r3,1
   23198:	00000206 	br	231a4 <__umodsi3+0x20>
   2319c:	30000c26 	beq	r6,zero,231d0 <__umodsi3+0x4c>
   231a0:	28000516 	blt	r5,zero,231b8 <__umodsi3+0x34>
   231a4:	294b883a 	add	r5,r5,r5
   231a8:	31bfffc4 	addi	r6,r6,-1
   231ac:	18c7883a 	add	r3,r3,r3
   231b0:	293ffa36 	bltu	r5,r4,2319c <__umodsi3+0x18>
   231b4:	18000626 	beq	r3,zero,231d0 <__umodsi3+0x4c>
   231b8:	1806d07a 	srli	r3,r3,1
   231bc:	11400136 	bltu	r2,r5,231c4 <__umodsi3+0x40>
   231c0:	1145c83a 	sub	r2,r2,r5
   231c4:	280ad07a 	srli	r5,r5,1
   231c8:	183ffb1e 	bne	r3,zero,231b8 <__umodsi3+0x34>
   231cc:	f800283a 	ret
   231d0:	f800283a 	ret
   231d4:	00c00044 	movi	r3,1
   231d8:	003ff706 	br	231b8 <__umodsi3+0x34>

000231dc <__mulsi3>:
   231dc:	0005883a 	mov	r2,zero
   231e0:	20000726 	beq	r4,zero,23200 <__mulsi3+0x24>
   231e4:	20c0004c 	andi	r3,r4,1
   231e8:	2008d07a 	srli	r4,r4,1
   231ec:	18000126 	beq	r3,zero,231f4 <__mulsi3+0x18>
   231f0:	1145883a 	add	r2,r2,r5
   231f4:	294b883a 	add	r5,r5,r5
   231f8:	203ffa1e 	bne	r4,zero,231e4 <__mulsi3+0x8>
   231fc:	f800283a 	ret
   23200:	f800283a 	ret

00023204 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23204:	defffe04 	addi	sp,sp,-8
   23208:	dfc00115 	stw	ra,4(sp)
   2320c:	df000015 	stw	fp,0(sp)
   23210:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23214:	d0a00917 	ldw	r2,-32732(gp)
   23218:	10000326 	beq	r2,zero,23228 <alt_get_errno+0x24>
   2321c:	d0a00917 	ldw	r2,-32732(gp)
   23220:	103ee83a 	callr	r2
   23224:	00000106 	br	2322c <alt_get_errno+0x28>
   23228:	d0a29e04 	addi	r2,gp,-30088
}
   2322c:	e037883a 	mov	sp,fp
   23230:	dfc00117 	ldw	ra,4(sp)
   23234:	df000017 	ldw	fp,0(sp)
   23238:	dec00204 	addi	sp,sp,8
   2323c:	f800283a 	ret

00023240 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   23240:	defffb04 	addi	sp,sp,-20
   23244:	dfc00415 	stw	ra,16(sp)
   23248:	df000315 	stw	fp,12(sp)
   2324c:	df000304 	addi	fp,sp,12
   23250:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   23254:	e0bfff17 	ldw	r2,-4(fp)
   23258:	10000816 	blt	r2,zero,2327c <close+0x3c>
   2325c:	01400304 	movi	r5,12
   23260:	e13fff17 	ldw	r4,-4(fp)
   23264:	00231dc0 	call	231dc <__mulsi3>
   23268:	1007883a 	mov	r3,r2
   2326c:	008000b4 	movhi	r2,2
   23270:	1095a404 	addi	r2,r2,22160
   23274:	1885883a 	add	r2,r3,r2
   23278:	00000106 	br	23280 <close+0x40>
   2327c:	0005883a 	mov	r2,zero
   23280:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   23284:	e0bffd17 	ldw	r2,-12(fp)
   23288:	10001926 	beq	r2,zero,232f0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2328c:	e0bffd17 	ldw	r2,-12(fp)
   23290:	10800017 	ldw	r2,0(r2)
   23294:	10800417 	ldw	r2,16(r2)
   23298:	10000626 	beq	r2,zero,232b4 <close+0x74>
   2329c:	e0bffd17 	ldw	r2,-12(fp)
   232a0:	10800017 	ldw	r2,0(r2)
   232a4:	10800417 	ldw	r2,16(r2)
   232a8:	e13ffd17 	ldw	r4,-12(fp)
   232ac:	103ee83a 	callr	r2
   232b0:	00000106 	br	232b8 <close+0x78>
   232b4:	0005883a 	mov	r2,zero
   232b8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   232bc:	e13fff17 	ldw	r4,-4(fp)
   232c0:	0023aa80 	call	23aa8 <alt_release_fd>
    if (rval < 0)
   232c4:	e0bffe17 	ldw	r2,-8(fp)
   232c8:	1000070e 	bge	r2,zero,232e8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   232cc:	00232040 	call	23204 <alt_get_errno>
   232d0:	1007883a 	mov	r3,r2
   232d4:	e0bffe17 	ldw	r2,-8(fp)
   232d8:	0085c83a 	sub	r2,zero,r2
   232dc:	18800015 	stw	r2,0(r3)
      return -1;
   232e0:	00bfffc4 	movi	r2,-1
   232e4:	00000706 	br	23304 <close+0xc4>
    }
    return 0;
   232e8:	0005883a 	mov	r2,zero
   232ec:	00000506 	br	23304 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   232f0:	00232040 	call	23204 <alt_get_errno>
   232f4:	1007883a 	mov	r3,r2
   232f8:	00801444 	movi	r2,81
   232fc:	18800015 	stw	r2,0(r3)
    return -1;
   23300:	00bfffc4 	movi	r2,-1
  }
}
   23304:	e037883a 	mov	sp,fp
   23308:	dfc00117 	ldw	ra,4(sp)
   2330c:	df000017 	ldw	fp,0(sp)
   23310:	dec00204 	addi	sp,sp,8
   23314:	f800283a 	ret

00023318 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23318:	defffc04 	addi	sp,sp,-16
   2331c:	df000315 	stw	fp,12(sp)
   23320:	df000304 	addi	fp,sp,12
   23324:	e13ffd15 	stw	r4,-12(fp)
   23328:	e17ffe15 	stw	r5,-8(fp)
   2332c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   23330:	e0bfff17 	ldw	r2,-4(fp)
}
   23334:	e037883a 	mov	sp,fp
   23338:	df000017 	ldw	fp,0(sp)
   2333c:	dec00104 	addi	sp,sp,4
   23340:	f800283a 	ret

00023344 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23344:	defffe04 	addi	sp,sp,-8
   23348:	dfc00115 	stw	ra,4(sp)
   2334c:	df000015 	stw	fp,0(sp)
   23350:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23354:	d0a00917 	ldw	r2,-32732(gp)
   23358:	10000326 	beq	r2,zero,23368 <alt_get_errno+0x24>
   2335c:	d0a00917 	ldw	r2,-32732(gp)
   23360:	103ee83a 	callr	r2
   23364:	00000106 	br	2336c <alt_get_errno+0x28>
   23368:	d0a29e04 	addi	r2,gp,-30088
}
   2336c:	e037883a 	mov	sp,fp
   23370:	dfc00117 	ldw	ra,4(sp)
   23374:	df000017 	ldw	fp,0(sp)
   23378:	dec00204 	addi	sp,sp,8
   2337c:	f800283a 	ret

00023380 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   23380:	defffb04 	addi	sp,sp,-20
   23384:	dfc00415 	stw	ra,16(sp)
   23388:	df000315 	stw	fp,12(sp)
   2338c:	df000304 	addi	fp,sp,12
   23390:	e13ffe15 	stw	r4,-8(fp)
   23394:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23398:	e0bffe17 	ldw	r2,-8(fp)
   2339c:	10000816 	blt	r2,zero,233c0 <fstat+0x40>
   233a0:	01400304 	movi	r5,12
   233a4:	e13ffe17 	ldw	r4,-8(fp)
   233a8:	00231dc0 	call	231dc <__mulsi3>
   233ac:	1007883a 	mov	r3,r2
   233b0:	008000b4 	movhi	r2,2
   233b4:	1095a404 	addi	r2,r2,22160
   233b8:	1885883a 	add	r2,r3,r2
   233bc:	00000106 	br	233c4 <fstat+0x44>
   233c0:	0005883a 	mov	r2,zero
   233c4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   233c8:	e0bffd17 	ldw	r2,-12(fp)
   233cc:	10001026 	beq	r2,zero,23410 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   233d0:	e0bffd17 	ldw	r2,-12(fp)
   233d4:	10800017 	ldw	r2,0(r2)
   233d8:	10800817 	ldw	r2,32(r2)
   233dc:	10000726 	beq	r2,zero,233fc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   233e0:	e0bffd17 	ldw	r2,-12(fp)
   233e4:	10800017 	ldw	r2,0(r2)
   233e8:	10800817 	ldw	r2,32(r2)
   233ec:	e17fff17 	ldw	r5,-4(fp)
   233f0:	e13ffd17 	ldw	r4,-12(fp)
   233f4:	103ee83a 	callr	r2
   233f8:	00000a06 	br	23424 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   233fc:	e0bfff17 	ldw	r2,-4(fp)
   23400:	00c80004 	movi	r3,8192
   23404:	10c00115 	stw	r3,4(r2)
      return 0;
   23408:	0005883a 	mov	r2,zero
   2340c:	00000506 	br	23424 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23410:	00233440 	call	23344 <alt_get_errno>
   23414:	1007883a 	mov	r3,r2
   23418:	00801444 	movi	r2,81
   2341c:	18800015 	stw	r2,0(r3)
    return -1;
   23420:	00bfffc4 	movi	r2,-1
  }
}
   23424:	e037883a 	mov	sp,fp
   23428:	dfc00117 	ldw	ra,4(sp)
   2342c:	df000017 	ldw	fp,0(sp)
   23430:	dec00204 	addi	sp,sp,8
   23434:	f800283a 	ret

00023438 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   23438:	defff004 	addi	sp,sp,-64
   2343c:	df000f15 	stw	fp,60(sp)
   23440:	df000f04 	addi	fp,sp,60
   23444:	e13ffd15 	stw	r4,-12(fp)
   23448:	e17ffe15 	stw	r5,-8(fp)
   2344c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   23450:	00bffa84 	movi	r2,-22
   23454:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   23458:	e0bffd17 	ldw	r2,-12(fp)
   2345c:	10800828 	cmpgeui	r2,r2,32
   23460:	1000501e 	bne	r2,zero,235a4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23464:	0005303a 	rdctl	r2,status
   23468:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2346c:	e0fff617 	ldw	r3,-40(fp)
   23470:	00bfff84 	movi	r2,-2
   23474:	1884703a 	and	r2,r3,r2
   23478:	1001703a 	wrctl	status,r2
  
  return context;
   2347c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   23480:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   23484:	008000b4 	movhi	r2,2
   23488:	1098bd04 	addi	r2,r2,25332
   2348c:	e0fffd17 	ldw	r3,-12(fp)
   23490:	180690fa 	slli	r3,r3,3
   23494:	10c5883a 	add	r2,r2,r3
   23498:	e0ffff17 	ldw	r3,-4(fp)
   2349c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   234a0:	008000b4 	movhi	r2,2
   234a4:	1098bd04 	addi	r2,r2,25332
   234a8:	e0fffd17 	ldw	r3,-12(fp)
   234ac:	180690fa 	slli	r3,r3,3
   234b0:	10c5883a 	add	r2,r2,r3
   234b4:	10800104 	addi	r2,r2,4
   234b8:	e0fffe17 	ldw	r3,-8(fp)
   234bc:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   234c0:	e0bfff17 	ldw	r2,-4(fp)
   234c4:	10001926 	beq	r2,zero,2352c <alt_irq_register+0xf4>
   234c8:	e0bffd17 	ldw	r2,-12(fp)
   234cc:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   234d0:	0005303a 	rdctl	r2,status
   234d4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   234d8:	e0fff717 	ldw	r3,-36(fp)
   234dc:	00bfff84 	movi	r2,-2
   234e0:	1884703a 	and	r2,r3,r2
   234e4:	1001703a 	wrctl	status,r2
  
  return context;
   234e8:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   234ec:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   234f0:	00c00044 	movi	r3,1
   234f4:	e0bff217 	ldw	r2,-56(fp)
   234f8:	1884983a 	sll	r2,r3,r2
   234fc:	1007883a 	mov	r3,r2
   23500:	d0a29f17 	ldw	r2,-30084(gp)
   23504:	1884b03a 	or	r2,r3,r2
   23508:	d0a29f15 	stw	r2,-30084(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2350c:	d0a29f17 	ldw	r2,-30084(gp)
   23510:	100170fa 	wrctl	ienable,r2
   23514:	e0bff817 	ldw	r2,-32(fp)
   23518:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2351c:	e0bff917 	ldw	r2,-28(fp)
   23520:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23524:	0005883a 	mov	r2,zero
   23528:	00001906 	br	23590 <alt_irq_register+0x158>
   2352c:	e0bffd17 	ldw	r2,-12(fp)
   23530:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23534:	0005303a 	rdctl	r2,status
   23538:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2353c:	e0fffa17 	ldw	r3,-24(fp)
   23540:	00bfff84 	movi	r2,-2
   23544:	1884703a 	and	r2,r3,r2
   23548:	1001703a 	wrctl	status,r2
  
  return context;
   2354c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   23550:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   23554:	00c00044 	movi	r3,1
   23558:	e0bff417 	ldw	r2,-48(fp)
   2355c:	1884983a 	sll	r2,r3,r2
   23560:	0084303a 	nor	r2,zero,r2
   23564:	1007883a 	mov	r3,r2
   23568:	d0a29f17 	ldw	r2,-30084(gp)
   2356c:	1884703a 	and	r2,r3,r2
   23570:	d0a29f15 	stw	r2,-30084(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23574:	d0a29f17 	ldw	r2,-30084(gp)
   23578:	100170fa 	wrctl	ienable,r2
   2357c:	e0bffb17 	ldw	r2,-20(fp)
   23580:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23584:	e0bffc17 	ldw	r2,-16(fp)
   23588:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2358c:	0005883a 	mov	r2,zero
   23590:	e0bff115 	stw	r2,-60(fp)
   23594:	e0bff317 	ldw	r2,-52(fp)
   23598:	e0bff515 	stw	r2,-44(fp)
   2359c:	e0bff517 	ldw	r2,-44(fp)
   235a0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   235a4:	e0bff117 	ldw	r2,-60(fp)
}
   235a8:	e037883a 	mov	sp,fp
   235ac:	df000017 	ldw	fp,0(sp)
   235b0:	dec00104 	addi	sp,sp,4
   235b4:	f800283a 	ret

000235b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   235b8:	defffe04 	addi	sp,sp,-8
   235bc:	dfc00115 	stw	ra,4(sp)
   235c0:	df000015 	stw	fp,0(sp)
   235c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   235c8:	d0a00917 	ldw	r2,-32732(gp)
   235cc:	10000326 	beq	r2,zero,235dc <alt_get_errno+0x24>
   235d0:	d0a00917 	ldw	r2,-32732(gp)
   235d4:	103ee83a 	callr	r2
   235d8:	00000106 	br	235e0 <alt_get_errno+0x28>
   235dc:	d0a29e04 	addi	r2,gp,-30088
}
   235e0:	e037883a 	mov	sp,fp
   235e4:	dfc00117 	ldw	ra,4(sp)
   235e8:	df000017 	ldw	fp,0(sp)
   235ec:	dec00204 	addi	sp,sp,8
   235f0:	f800283a 	ret

000235f4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   235f4:	deffed04 	addi	sp,sp,-76
   235f8:	dfc01215 	stw	ra,72(sp)
   235fc:	df001115 	stw	fp,68(sp)
   23600:	df001104 	addi	fp,sp,68
   23604:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23608:	e0bfff17 	ldw	r2,-4(fp)
   2360c:	10000816 	blt	r2,zero,23630 <isatty+0x3c>
   23610:	01400304 	movi	r5,12
   23614:	e13fff17 	ldw	r4,-4(fp)
   23618:	00231dc0 	call	231dc <__mulsi3>
   2361c:	1007883a 	mov	r3,r2
   23620:	008000b4 	movhi	r2,2
   23624:	1095a404 	addi	r2,r2,22160
   23628:	1885883a 	add	r2,r3,r2
   2362c:	00000106 	br	23634 <isatty+0x40>
   23630:	0005883a 	mov	r2,zero
   23634:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23638:	e0bfef17 	ldw	r2,-68(fp)
   2363c:	10000e26 	beq	r2,zero,23678 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23640:	e0bfef17 	ldw	r2,-68(fp)
   23644:	10800017 	ldw	r2,0(r2)
   23648:	10800817 	ldw	r2,32(r2)
   2364c:	1000021e 	bne	r2,zero,23658 <isatty+0x64>
    {
      return 1;
   23650:	00800044 	movi	r2,1
   23654:	00000d06 	br	2368c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23658:	e0bff004 	addi	r2,fp,-64
   2365c:	100b883a 	mov	r5,r2
   23660:	e13fff17 	ldw	r4,-4(fp)
   23664:	00233800 	call	23380 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23668:	e0bff117 	ldw	r2,-60(fp)
   2366c:	10880020 	cmpeqi	r2,r2,8192
   23670:	10803fcc 	andi	r2,r2,255
   23674:	00000506 	br	2368c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23678:	00235b80 	call	235b8 <alt_get_errno>
   2367c:	1007883a 	mov	r3,r2
   23680:	00801444 	movi	r2,81
   23684:	18800015 	stw	r2,0(r3)
    return 0;
   23688:	0005883a 	mov	r2,zero
  }
}
   2368c:	e037883a 	mov	sp,fp
   23690:	dfc00117 	ldw	ra,4(sp)
   23694:	df000017 	ldw	fp,0(sp)
   23698:	dec00204 	addi	sp,sp,8
   2369c:	f800283a 	ret

000236a0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   236a0:	defffc04 	addi	sp,sp,-16
   236a4:	df000315 	stw	fp,12(sp)
   236a8:	df000304 	addi	fp,sp,12
   236ac:	e13ffd15 	stw	r4,-12(fp)
   236b0:	e17ffe15 	stw	r5,-8(fp)
   236b4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   236b8:	e0fffe17 	ldw	r3,-8(fp)
   236bc:	e0bffd17 	ldw	r2,-12(fp)
   236c0:	18800c26 	beq	r3,r2,236f4 <alt_load_section+0x54>
  {
    while( to != end )
   236c4:	00000806 	br	236e8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   236c8:	e0bffe17 	ldw	r2,-8(fp)
   236cc:	10c00104 	addi	r3,r2,4
   236d0:	e0fffe15 	stw	r3,-8(fp)
   236d4:	e0fffd17 	ldw	r3,-12(fp)
   236d8:	19000104 	addi	r4,r3,4
   236dc:	e13ffd15 	stw	r4,-12(fp)
   236e0:	18c00017 	ldw	r3,0(r3)
   236e4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   236e8:	e0fffe17 	ldw	r3,-8(fp)
   236ec:	e0bfff17 	ldw	r2,-4(fp)
   236f0:	18bff51e 	bne	r3,r2,236c8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   236f4:	0001883a 	nop
   236f8:	e037883a 	mov	sp,fp
   236fc:	df000017 	ldw	fp,0(sp)
   23700:	dec00104 	addi	sp,sp,4
   23704:	f800283a 	ret

00023708 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23708:	defffe04 	addi	sp,sp,-8
   2370c:	dfc00115 	stw	ra,4(sp)
   23710:	df000015 	stw	fp,0(sp)
   23714:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23718:	018000b4 	movhi	r6,2
   2371c:	31961b04 	addi	r6,r6,22636
   23720:	014000b4 	movhi	r5,2
   23724:	29538f04 	addi	r5,r5,20028
   23728:	010000b4 	movhi	r4,2
   2372c:	21161b04 	addi	r4,r4,22636
   23730:	00236a00 	call	236a0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23734:	018000b4 	movhi	r6,2
   23738:	31808c04 	addi	r6,r6,560
   2373c:	014000b4 	movhi	r5,2
   23740:	29400804 	addi	r5,r5,32
   23744:	010000b4 	movhi	r4,2
   23748:	21000804 	addi	r4,r4,32
   2374c:	00236a00 	call	236a0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23750:	018000b4 	movhi	r6,2
   23754:	31938f04 	addi	r6,r6,20028
   23758:	014000b4 	movhi	r5,2
   2375c:	29537d04 	addi	r5,r5,19956
   23760:	010000b4 	movhi	r4,2
   23764:	21137d04 	addi	r4,r4,19956
   23768:	00236a00 	call	236a0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2376c:	00241800 	call	24180 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23770:	00243400 	call	24340 <alt_icache_flush_all>
}
   23774:	0001883a 	nop
   23778:	e037883a 	mov	sp,fp
   2377c:	dfc00117 	ldw	ra,4(sp)
   23780:	df000017 	ldw	fp,0(sp)
   23784:	dec00204 	addi	sp,sp,8
   23788:	f800283a 	ret

0002378c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2378c:	defffe04 	addi	sp,sp,-8
   23790:	dfc00115 	stw	ra,4(sp)
   23794:	df000015 	stw	fp,0(sp)
   23798:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2379c:	d0a00917 	ldw	r2,-32732(gp)
   237a0:	10000326 	beq	r2,zero,237b0 <alt_get_errno+0x24>
   237a4:	d0a00917 	ldw	r2,-32732(gp)
   237a8:	103ee83a 	callr	r2
   237ac:	00000106 	br	237b4 <alt_get_errno+0x28>
   237b0:	d0a29e04 	addi	r2,gp,-30088
}
   237b4:	e037883a 	mov	sp,fp
   237b8:	dfc00117 	ldw	ra,4(sp)
   237bc:	df000017 	ldw	fp,0(sp)
   237c0:	dec00204 	addi	sp,sp,8
   237c4:	f800283a 	ret

000237c8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   237c8:	defff904 	addi	sp,sp,-28
   237cc:	dfc00615 	stw	ra,24(sp)
   237d0:	df000515 	stw	fp,20(sp)
   237d4:	df000504 	addi	fp,sp,20
   237d8:	e13ffd15 	stw	r4,-12(fp)
   237dc:	e17ffe15 	stw	r5,-8(fp)
   237e0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   237e4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   237e8:	e0bffd17 	ldw	r2,-12(fp)
   237ec:	10000816 	blt	r2,zero,23810 <lseek+0x48>
   237f0:	01400304 	movi	r5,12
   237f4:	e13ffd17 	ldw	r4,-12(fp)
   237f8:	00231dc0 	call	231dc <__mulsi3>
   237fc:	1007883a 	mov	r3,r2
   23800:	008000b4 	movhi	r2,2
   23804:	1095a404 	addi	r2,r2,22160
   23808:	1885883a 	add	r2,r3,r2
   2380c:	00000106 	br	23814 <lseek+0x4c>
   23810:	0005883a 	mov	r2,zero
   23814:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   23818:	e0bffc17 	ldw	r2,-16(fp)
   2381c:	10001026 	beq	r2,zero,23860 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23820:	e0bffc17 	ldw	r2,-16(fp)
   23824:	10800017 	ldw	r2,0(r2)
   23828:	10800717 	ldw	r2,28(r2)
   2382c:	10000926 	beq	r2,zero,23854 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23830:	e0bffc17 	ldw	r2,-16(fp)
   23834:	10800017 	ldw	r2,0(r2)
   23838:	10800717 	ldw	r2,28(r2)
   2383c:	e1bfff17 	ldw	r6,-4(fp)
   23840:	e17ffe17 	ldw	r5,-8(fp)
   23844:	e13ffc17 	ldw	r4,-16(fp)
   23848:	103ee83a 	callr	r2
   2384c:	e0bffb15 	stw	r2,-20(fp)
   23850:	00000506 	br	23868 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   23854:	00bfde84 	movi	r2,-134
   23858:	e0bffb15 	stw	r2,-20(fp)
   2385c:	00000206 	br	23868 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   23860:	00bfebc4 	movi	r2,-81
   23864:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   23868:	e0bffb17 	ldw	r2,-20(fp)
   2386c:	1000070e 	bge	r2,zero,2388c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   23870:	002378c0 	call	2378c <alt_get_errno>
   23874:	1007883a 	mov	r3,r2
   23878:	e0bffb17 	ldw	r2,-20(fp)
   2387c:	0085c83a 	sub	r2,zero,r2
   23880:	18800015 	stw	r2,0(r3)
    rc = -1;
   23884:	00bfffc4 	movi	r2,-1
   23888:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2388c:	e0bffb17 	ldw	r2,-20(fp)
}
   23890:	e037883a 	mov	sp,fp
   23894:	dfc00117 	ldw	ra,4(sp)
   23898:	df000017 	ldw	fp,0(sp)
   2389c:	dec00204 	addi	sp,sp,8
   238a0:	f800283a 	ret

000238a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   238a4:	defffd04 	addi	sp,sp,-12
   238a8:	dfc00215 	stw	ra,8(sp)
   238ac:	df000115 	stw	fp,4(sp)
   238b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   238b4:	0009883a 	mov	r4,zero
   238b8:	0023d7c0 	call	23d7c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   238bc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   238c0:	0023db40 	call	23db4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   238c4:	018000b4 	movhi	r6,2
   238c8:	31938504 	addi	r6,r6,19988
   238cc:	014000b4 	movhi	r5,2
   238d0:	29538504 	addi	r5,r5,19988
   238d4:	010000b4 	movhi	r4,2
   238d8:	21138504 	addi	r4,r4,19988
   238dc:	00244440 	call	24444 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   238e0:	00242800 	call	24280 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   238e4:	010000b4 	movhi	r4,2
   238e8:	2110b804 	addi	r4,r4,17120
   238ec:	0024a600 	call	24a60 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   238f0:	d0a2a017 	ldw	r2,-30080(gp)
   238f4:	d0e2a117 	ldw	r3,-30076(gp)
   238f8:	d122a217 	ldw	r4,-30072(gp)
   238fc:	200d883a 	mov	r6,r4
   23900:	180b883a 	mov	r5,r3
   23904:	1009883a 	mov	r4,r2
   23908:	00202b00 	call	202b0 <main>
   2390c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23910:	01000044 	movi	r4,1
   23914:	00232400 	call	23240 <close>
  exit (result);
   23918:	e13fff17 	ldw	r4,-4(fp)
   2391c:	0024a740 	call	24a74 <exit>

00023920 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23920:	defffe04 	addi	sp,sp,-8
   23924:	df000115 	stw	fp,4(sp)
   23928:	df000104 	addi	fp,sp,4
   2392c:	e13fff15 	stw	r4,-4(fp)
}
   23930:	0001883a 	nop
   23934:	e037883a 	mov	sp,fp
   23938:	df000017 	ldw	fp,0(sp)
   2393c:	dec00104 	addi	sp,sp,4
   23940:	f800283a 	ret

00023944 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23944:	defffe04 	addi	sp,sp,-8
   23948:	df000115 	stw	fp,4(sp)
   2394c:	df000104 	addi	fp,sp,4
   23950:	e13fff15 	stw	r4,-4(fp)
}
   23954:	0001883a 	nop
   23958:	e037883a 	mov	sp,fp
   2395c:	df000017 	ldw	fp,0(sp)
   23960:	dec00104 	addi	sp,sp,4
   23964:	f800283a 	ret

00023968 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23968:	defffe04 	addi	sp,sp,-8
   2396c:	dfc00115 	stw	ra,4(sp)
   23970:	df000015 	stw	fp,0(sp)
   23974:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23978:	d0a00917 	ldw	r2,-32732(gp)
   2397c:	10000326 	beq	r2,zero,2398c <alt_get_errno+0x24>
   23980:	d0a00917 	ldw	r2,-32732(gp)
   23984:	103ee83a 	callr	r2
   23988:	00000106 	br	23990 <alt_get_errno+0x28>
   2398c:	d0a29e04 	addi	r2,gp,-30088
}
   23990:	e037883a 	mov	sp,fp
   23994:	dfc00117 	ldw	ra,4(sp)
   23998:	df000017 	ldw	fp,0(sp)
   2399c:	dec00204 	addi	sp,sp,8
   239a0:	f800283a 	ret

000239a4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   239a4:	defff904 	addi	sp,sp,-28
   239a8:	dfc00615 	stw	ra,24(sp)
   239ac:	df000515 	stw	fp,20(sp)
   239b0:	df000504 	addi	fp,sp,20
   239b4:	e13ffd15 	stw	r4,-12(fp)
   239b8:	e17ffe15 	stw	r5,-8(fp)
   239bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   239c0:	e0bffd17 	ldw	r2,-12(fp)
   239c4:	10000816 	blt	r2,zero,239e8 <read+0x44>
   239c8:	01400304 	movi	r5,12
   239cc:	e13ffd17 	ldw	r4,-12(fp)
   239d0:	00231dc0 	call	231dc <__mulsi3>
   239d4:	1007883a 	mov	r3,r2
   239d8:	008000b4 	movhi	r2,2
   239dc:	1095a404 	addi	r2,r2,22160
   239e0:	1885883a 	add	r2,r3,r2
   239e4:	00000106 	br	239ec <read+0x48>
   239e8:	0005883a 	mov	r2,zero
   239ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   239f0:	e0bffb17 	ldw	r2,-20(fp)
   239f4:	10002226 	beq	r2,zero,23a80 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   239f8:	e0bffb17 	ldw	r2,-20(fp)
   239fc:	10800217 	ldw	r2,8(r2)
   23a00:	108000cc 	andi	r2,r2,3
   23a04:	10800060 	cmpeqi	r2,r2,1
   23a08:	1000181e 	bne	r2,zero,23a6c <read+0xc8>
        (fd->dev->read))
   23a0c:	e0bffb17 	ldw	r2,-20(fp)
   23a10:	10800017 	ldw	r2,0(r2)
   23a14:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23a18:	10001426 	beq	r2,zero,23a6c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23a1c:	e0bffb17 	ldw	r2,-20(fp)
   23a20:	10800017 	ldw	r2,0(r2)
   23a24:	10800517 	ldw	r2,20(r2)
   23a28:	e0ffff17 	ldw	r3,-4(fp)
   23a2c:	180d883a 	mov	r6,r3
   23a30:	e17ffe17 	ldw	r5,-8(fp)
   23a34:	e13ffb17 	ldw	r4,-20(fp)
   23a38:	103ee83a 	callr	r2
   23a3c:	e0bffc15 	stw	r2,-16(fp)
   23a40:	e0bffc17 	ldw	r2,-16(fp)
   23a44:	1000070e 	bge	r2,zero,23a64 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   23a48:	00239680 	call	23968 <alt_get_errno>
   23a4c:	1007883a 	mov	r3,r2
   23a50:	e0bffc17 	ldw	r2,-16(fp)
   23a54:	0085c83a 	sub	r2,zero,r2
   23a58:	18800015 	stw	r2,0(r3)
          return -1;
   23a5c:	00bfffc4 	movi	r2,-1
   23a60:	00000c06 	br	23a94 <read+0xf0>
        }
        return rval;
   23a64:	e0bffc17 	ldw	r2,-16(fp)
   23a68:	00000a06 	br	23a94 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23a6c:	00239680 	call	23968 <alt_get_errno>
   23a70:	1007883a 	mov	r3,r2
   23a74:	00800344 	movi	r2,13
   23a78:	18800015 	stw	r2,0(r3)
   23a7c:	00000406 	br	23a90 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23a80:	00239680 	call	23968 <alt_get_errno>
   23a84:	1007883a 	mov	r3,r2
   23a88:	00801444 	movi	r2,81
   23a8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23a90:	00bfffc4 	movi	r2,-1
}
   23a94:	e037883a 	mov	sp,fp
   23a98:	dfc00117 	ldw	ra,4(sp)
   23a9c:	df000017 	ldw	fp,0(sp)
   23aa0:	dec00204 	addi	sp,sp,8
   23aa4:	f800283a 	ret

00023aa8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23aa8:	defffc04 	addi	sp,sp,-16
   23aac:	dfc00315 	stw	ra,12(sp)
   23ab0:	df000215 	stw	fp,8(sp)
   23ab4:	dc000115 	stw	r16,4(sp)
   23ab8:	df000204 	addi	fp,sp,8
   23abc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   23ac0:	e0bffe17 	ldw	r2,-8(fp)
   23ac4:	108000d0 	cmplti	r2,r2,3
   23ac8:	1000111e 	bne	r2,zero,23b10 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   23acc:	040000b4 	movhi	r16,2
   23ad0:	8415a404 	addi	r16,r16,22160
   23ad4:	e0bffe17 	ldw	r2,-8(fp)
   23ad8:	01400304 	movi	r5,12
   23adc:	1009883a 	mov	r4,r2
   23ae0:	00231dc0 	call	231dc <__mulsi3>
   23ae4:	8085883a 	add	r2,r16,r2
   23ae8:	10800204 	addi	r2,r2,8
   23aec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23af0:	040000b4 	movhi	r16,2
   23af4:	8415a404 	addi	r16,r16,22160
   23af8:	e0bffe17 	ldw	r2,-8(fp)
   23afc:	01400304 	movi	r5,12
   23b00:	1009883a 	mov	r4,r2
   23b04:	00231dc0 	call	231dc <__mulsi3>
   23b08:	8085883a 	add	r2,r16,r2
   23b0c:	10000015 	stw	zero,0(r2)
  }
}
   23b10:	0001883a 	nop
   23b14:	e6ffff04 	addi	sp,fp,-4
   23b18:	dfc00217 	ldw	ra,8(sp)
   23b1c:	df000117 	ldw	fp,4(sp)
   23b20:	dc000017 	ldw	r16,0(sp)
   23b24:	dec00304 	addi	sp,sp,12
   23b28:	f800283a 	ret

00023b2c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23b2c:	defff904 	addi	sp,sp,-28
   23b30:	df000615 	stw	fp,24(sp)
   23b34:	df000604 	addi	fp,sp,24
   23b38:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23b3c:	0005303a 	rdctl	r2,status
   23b40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23b44:	e0fffe17 	ldw	r3,-8(fp)
   23b48:	00bfff84 	movi	r2,-2
   23b4c:	1884703a 	and	r2,r3,r2
   23b50:	1001703a 	wrctl	status,r2
  
  return context;
   23b54:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23b58:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23b5c:	d0a00b17 	ldw	r2,-32724(gp)
   23b60:	10c000c4 	addi	r3,r2,3
   23b64:	00bfff04 	movi	r2,-4
   23b68:	1884703a 	and	r2,r3,r2
   23b6c:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23b70:	d0e00b17 	ldw	r3,-32724(gp)
   23b74:	e0bfff17 	ldw	r2,-4(fp)
   23b78:	1887883a 	add	r3,r3,r2
   23b7c:	00800134 	movhi	r2,4
   23b80:	10800004 	addi	r2,r2,0
   23b84:	10c0062e 	bgeu	r2,r3,23ba0 <sbrk+0x74>
   23b88:	e0bffb17 	ldw	r2,-20(fp)
   23b8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23b90:	e0bffa17 	ldw	r2,-24(fp)
   23b94:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23b98:	00bfffc4 	movi	r2,-1
   23b9c:	00000b06 	br	23bcc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   23ba0:	d0a00b17 	ldw	r2,-32724(gp)
   23ba4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   23ba8:	d0e00b17 	ldw	r3,-32724(gp)
   23bac:	e0bfff17 	ldw	r2,-4(fp)
   23bb0:	1885883a 	add	r2,r3,r2
   23bb4:	d0a00b15 	stw	r2,-32724(gp)
   23bb8:	e0bffb17 	ldw	r2,-20(fp)
   23bbc:	e0bffc15 	stw	r2,-16(fp)
   23bc0:	e0bffc17 	ldw	r2,-16(fp)
   23bc4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23bc8:	e0bffd17 	ldw	r2,-12(fp)
} 
   23bcc:	e037883a 	mov	sp,fp
   23bd0:	df000017 	ldw	fp,0(sp)
   23bd4:	dec00104 	addi	sp,sp,4
   23bd8:	f800283a 	ret

00023bdc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   23bdc:	defffd04 	addi	sp,sp,-12
   23be0:	dfc00215 	stw	ra,8(sp)
   23be4:	df000115 	stw	fp,4(sp)
   23be8:	df000104 	addi	fp,sp,4
   23bec:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   23bf0:	e13fff17 	ldw	r4,-4(fp)
   23bf4:	00240280 	call	24028 <alt_busy_sleep>
}
   23bf8:	e037883a 	mov	sp,fp
   23bfc:	dfc00117 	ldw	ra,4(sp)
   23c00:	df000017 	ldw	fp,0(sp)
   23c04:	dec00204 	addi	sp,sp,8
   23c08:	f800283a 	ret

00023c0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23c0c:	defffe04 	addi	sp,sp,-8
   23c10:	dfc00115 	stw	ra,4(sp)
   23c14:	df000015 	stw	fp,0(sp)
   23c18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23c1c:	d0a00917 	ldw	r2,-32732(gp)
   23c20:	10000326 	beq	r2,zero,23c30 <alt_get_errno+0x24>
   23c24:	d0a00917 	ldw	r2,-32732(gp)
   23c28:	103ee83a 	callr	r2
   23c2c:	00000106 	br	23c34 <alt_get_errno+0x28>
   23c30:	d0a29e04 	addi	r2,gp,-30088
}
   23c34:	e037883a 	mov	sp,fp
   23c38:	dfc00117 	ldw	ra,4(sp)
   23c3c:	df000017 	ldw	fp,0(sp)
   23c40:	dec00204 	addi	sp,sp,8
   23c44:	f800283a 	ret

00023c48 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23c48:	defff904 	addi	sp,sp,-28
   23c4c:	dfc00615 	stw	ra,24(sp)
   23c50:	df000515 	stw	fp,20(sp)
   23c54:	df000504 	addi	fp,sp,20
   23c58:	e13ffd15 	stw	r4,-12(fp)
   23c5c:	e17ffe15 	stw	r5,-8(fp)
   23c60:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23c64:	e0bffd17 	ldw	r2,-12(fp)
   23c68:	10000816 	blt	r2,zero,23c8c <write+0x44>
   23c6c:	01400304 	movi	r5,12
   23c70:	e13ffd17 	ldw	r4,-12(fp)
   23c74:	00231dc0 	call	231dc <__mulsi3>
   23c78:	1007883a 	mov	r3,r2
   23c7c:	008000b4 	movhi	r2,2
   23c80:	1095a404 	addi	r2,r2,22160
   23c84:	1885883a 	add	r2,r3,r2
   23c88:	00000106 	br	23c90 <write+0x48>
   23c8c:	0005883a 	mov	r2,zero
   23c90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23c94:	e0bffb17 	ldw	r2,-20(fp)
   23c98:	10002126 	beq	r2,zero,23d20 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23c9c:	e0bffb17 	ldw	r2,-20(fp)
   23ca0:	10800217 	ldw	r2,8(r2)
   23ca4:	108000cc 	andi	r2,r2,3
   23ca8:	10001826 	beq	r2,zero,23d0c <write+0xc4>
   23cac:	e0bffb17 	ldw	r2,-20(fp)
   23cb0:	10800017 	ldw	r2,0(r2)
   23cb4:	10800617 	ldw	r2,24(r2)
   23cb8:	10001426 	beq	r2,zero,23d0c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23cbc:	e0bffb17 	ldw	r2,-20(fp)
   23cc0:	10800017 	ldw	r2,0(r2)
   23cc4:	10800617 	ldw	r2,24(r2)
   23cc8:	e0ffff17 	ldw	r3,-4(fp)
   23ccc:	180d883a 	mov	r6,r3
   23cd0:	e17ffe17 	ldw	r5,-8(fp)
   23cd4:	e13ffb17 	ldw	r4,-20(fp)
   23cd8:	103ee83a 	callr	r2
   23cdc:	e0bffc15 	stw	r2,-16(fp)
   23ce0:	e0bffc17 	ldw	r2,-16(fp)
   23ce4:	1000070e 	bge	r2,zero,23d04 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   23ce8:	0023c0c0 	call	23c0c <alt_get_errno>
   23cec:	1007883a 	mov	r3,r2
   23cf0:	e0bffc17 	ldw	r2,-16(fp)
   23cf4:	0085c83a 	sub	r2,zero,r2
   23cf8:	18800015 	stw	r2,0(r3)
        return -1;
   23cfc:	00bfffc4 	movi	r2,-1
   23d00:	00000c06 	br	23d34 <write+0xec>
      }
      return rval;
   23d04:	e0bffc17 	ldw	r2,-16(fp)
   23d08:	00000a06 	br	23d34 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23d0c:	0023c0c0 	call	23c0c <alt_get_errno>
   23d10:	1007883a 	mov	r3,r2
   23d14:	00800344 	movi	r2,13
   23d18:	18800015 	stw	r2,0(r3)
   23d1c:	00000406 	br	23d30 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23d20:	0023c0c0 	call	23c0c <alt_get_errno>
   23d24:	1007883a 	mov	r3,r2
   23d28:	00801444 	movi	r2,81
   23d2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23d30:	00bfffc4 	movi	r2,-1
}
   23d34:	e037883a 	mov	sp,fp
   23d38:	dfc00117 	ldw	ra,4(sp)
   23d3c:	df000017 	ldw	fp,0(sp)
   23d40:	dec00204 	addi	sp,sp,8
   23d44:	f800283a 	ret

00023d48 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23d48:	defffd04 	addi	sp,sp,-12
   23d4c:	dfc00215 	stw	ra,8(sp)
   23d50:	df000115 	stw	fp,4(sp)
   23d54:	df000104 	addi	fp,sp,4
   23d58:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23d5c:	d1600604 	addi	r5,gp,-32744
   23d60:	e13fff17 	ldw	r4,-4(fp)
   23d64:	00241dc0 	call	241dc <alt_dev_llist_insert>
}
   23d68:	e037883a 	mov	sp,fp
   23d6c:	dfc00117 	ldw	ra,4(sp)
   23d70:	df000017 	ldw	fp,0(sp)
   23d74:	dec00204 	addi	sp,sp,8
   23d78:	f800283a 	ret

00023d7c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23d7c:	defffd04 	addi	sp,sp,-12
   23d80:	dfc00215 	stw	ra,8(sp)
   23d84:	df000115 	stw	fp,4(sp)
   23d88:	df000104 	addi	fp,sp,4
   23d8c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   23d90:	00247440 	call	24744 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23d94:	00800044 	movi	r2,1
   23d98:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23d9c:	0001883a 	nop
   23da0:	e037883a 	mov	sp,fp
   23da4:	dfc00117 	ldw	ra,4(sp)
   23da8:	df000017 	ldw	fp,0(sp)
   23dac:	dec00204 	addi	sp,sp,8
   23db0:	f800283a 	ret

00023db4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23db4:	defffe04 	addi	sp,sp,-8
   23db8:	dfc00115 	stw	ra,4(sp)
   23dbc:	df000015 	stw	fp,0(sp)
   23dc0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   23dc4:	010000b4 	movhi	r4,2
   23dc8:	21160404 	addi	r4,r4,22544
   23dcc:	0023d480 	call	23d48 <alt_dev_reg>
}
   23dd0:	0001883a 	nop
   23dd4:	e037883a 	mov	sp,fp
   23dd8:	dfc00117 	ldw	ra,4(sp)
   23ddc:	df000017 	ldw	fp,0(sp)
   23de0:	dec00204 	addi	sp,sp,8
   23de4:	f800283a 	ret

00023de8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23de8:	defffa04 	addi	sp,sp,-24
   23dec:	dfc00515 	stw	ra,20(sp)
   23df0:	df000415 	stw	fp,16(sp)
   23df4:	df000404 	addi	fp,sp,16
   23df8:	e13ffd15 	stw	r4,-12(fp)
   23dfc:	e17ffe15 	stw	r5,-8(fp)
   23e00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23e04:	e0bffd17 	ldw	r2,-12(fp)
   23e08:	10800017 	ldw	r2,0(r2)
   23e0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23e10:	e0bffc17 	ldw	r2,-16(fp)
   23e14:	10c00a04 	addi	r3,r2,40
   23e18:	e0bffd17 	ldw	r2,-12(fp)
   23e1c:	10800217 	ldw	r2,8(r2)
   23e20:	100f883a 	mov	r7,r2
   23e24:	e1bfff17 	ldw	r6,-4(fp)
   23e28:	e17ffe17 	ldw	r5,-8(fp)
   23e2c:	1809883a 	mov	r4,r3
   23e30:	0023ea80 	call	23ea8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23e34:	e037883a 	mov	sp,fp
   23e38:	dfc00117 	ldw	ra,4(sp)
   23e3c:	df000017 	ldw	fp,0(sp)
   23e40:	dec00204 	addi	sp,sp,8
   23e44:	f800283a 	ret

00023e48 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23e48:	defffa04 	addi	sp,sp,-24
   23e4c:	dfc00515 	stw	ra,20(sp)
   23e50:	df000415 	stw	fp,16(sp)
   23e54:	df000404 	addi	fp,sp,16
   23e58:	e13ffd15 	stw	r4,-12(fp)
   23e5c:	e17ffe15 	stw	r5,-8(fp)
   23e60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23e64:	e0bffd17 	ldw	r2,-12(fp)
   23e68:	10800017 	ldw	r2,0(r2)
   23e6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23e70:	e0bffc17 	ldw	r2,-16(fp)
   23e74:	10c00a04 	addi	r3,r2,40
   23e78:	e0bffd17 	ldw	r2,-12(fp)
   23e7c:	10800217 	ldw	r2,8(r2)
   23e80:	100f883a 	mov	r7,r2
   23e84:	e1bfff17 	ldw	r6,-4(fp)
   23e88:	e17ffe17 	ldw	r5,-8(fp)
   23e8c:	1809883a 	mov	r4,r3
   23e90:	0023f940 	call	23f94 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23e94:	e037883a 	mov	sp,fp
   23e98:	dfc00117 	ldw	ra,4(sp)
   23e9c:	df000017 	ldw	fp,0(sp)
   23ea0:	dec00204 	addi	sp,sp,8
   23ea4:	f800283a 	ret

00023ea8 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   23ea8:	defff704 	addi	sp,sp,-36
   23eac:	df000815 	stw	fp,32(sp)
   23eb0:	df000804 	addi	fp,sp,32
   23eb4:	e13ffc15 	stw	r4,-16(fp)
   23eb8:	e17ffd15 	stw	r5,-12(fp)
   23ebc:	e1bffe15 	stw	r6,-8(fp)
   23ec0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23ec4:	e0bffc17 	ldw	r2,-16(fp)
   23ec8:	10800017 	ldw	r2,0(r2)
   23ecc:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   23ed0:	e0bffd17 	ldw	r2,-12(fp)
   23ed4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   23ed8:	e0bffe17 	ldw	r2,-8(fp)
   23edc:	e0fffd17 	ldw	r3,-12(fp)
   23ee0:	1885883a 	add	r2,r3,r2
   23ee4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   23ee8:	00001206 	br	23f34 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23eec:	e0bff917 	ldw	r2,-28(fp)
   23ef0:	10800037 	ldwio	r2,0(r2)
   23ef4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   23ef8:	e0bffb17 	ldw	r2,-20(fp)
   23efc:	10a0000c 	andi	r2,r2,32768
   23f00:	10000626 	beq	r2,zero,23f1c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23f04:	e0bff817 	ldw	r2,-32(fp)
   23f08:	10c00044 	addi	r3,r2,1
   23f0c:	e0fff815 	stw	r3,-32(fp)
   23f10:	e0fffb17 	ldw	r3,-20(fp)
   23f14:	10c00005 	stb	r3,0(r2)
   23f18:	00000606 	br	23f34 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   23f1c:	e0fff817 	ldw	r3,-32(fp)
   23f20:	e0bffd17 	ldw	r2,-12(fp)
   23f24:	1880071e 	bne	r3,r2,23f44 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   23f28:	e0bfff17 	ldw	r2,-4(fp)
   23f2c:	1090000c 	andi	r2,r2,16384
   23f30:	1000061e 	bne	r2,zero,23f4c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   23f34:	e0fff817 	ldw	r3,-32(fp)
   23f38:	e0bffa17 	ldw	r2,-24(fp)
   23f3c:	18bfeb36 	bltu	r3,r2,23eec <altera_avalon_jtag_uart_read+0x44>
   23f40:	00000306 	br	23f50 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   23f44:	0001883a 	nop
   23f48:	00000106 	br	23f50 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   23f4c:	0001883a 	nop
    
  }

  if (ptr != buffer)
   23f50:	e0fff817 	ldw	r3,-32(fp)
   23f54:	e0bffd17 	ldw	r2,-12(fp)
   23f58:	18800426 	beq	r3,r2,23f6c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   23f5c:	e0fff817 	ldw	r3,-32(fp)
   23f60:	e0bffd17 	ldw	r2,-12(fp)
   23f64:	1885c83a 	sub	r2,r3,r2
   23f68:	00000606 	br	23f84 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   23f6c:	e0bfff17 	ldw	r2,-4(fp)
   23f70:	1090000c 	andi	r2,r2,16384
   23f74:	10000226 	beq	r2,zero,23f80 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   23f78:	00bffd44 	movi	r2,-11
   23f7c:	00000106 	br	23f84 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   23f80:	00bffec4 	movi	r2,-5
}
   23f84:	e037883a 	mov	sp,fp
   23f88:	df000017 	ldw	fp,0(sp)
   23f8c:	dec00104 	addi	sp,sp,4
   23f90:	f800283a 	ret

00023f94 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   23f94:	defff904 	addi	sp,sp,-28
   23f98:	df000615 	stw	fp,24(sp)
   23f9c:	df000604 	addi	fp,sp,24
   23fa0:	e13ffc15 	stw	r4,-16(fp)
   23fa4:	e17ffd15 	stw	r5,-12(fp)
   23fa8:	e1bffe15 	stw	r6,-8(fp)
   23fac:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23fb0:	e0bffc17 	ldw	r2,-16(fp)
   23fb4:	10800017 	ldw	r2,0(r2)
   23fb8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   23fbc:	e0bffe17 	ldw	r2,-8(fp)
   23fc0:	e0fffd17 	ldw	r3,-12(fp)
   23fc4:	1885883a 	add	r2,r3,r2
   23fc8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   23fcc:	00000e06 	br	24008 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   23fd0:	e0bffa17 	ldw	r2,-24(fp)
   23fd4:	10800104 	addi	r2,r2,4
   23fd8:	10800037 	ldwio	r2,0(r2)
   23fdc:	10bfffec 	andhi	r2,r2,65535
   23fe0:	10000926 	beq	r2,zero,24008 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   23fe4:	e0fffa17 	ldw	r3,-24(fp)
   23fe8:	e0bffd17 	ldw	r2,-12(fp)
   23fec:	11000044 	addi	r4,r2,1
   23ff0:	e13ffd15 	stw	r4,-12(fp)
   23ff4:	10800003 	ldbu	r2,0(r2)
   23ff8:	10803fcc 	andi	r2,r2,255
   23ffc:	1080201c 	xori	r2,r2,128
   24000:	10bfe004 	addi	r2,r2,-128
   24004:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   24008:	e0fffd17 	ldw	r3,-12(fp)
   2400c:	e0bffb17 	ldw	r2,-20(fp)
   24010:	18bfef36 	bltu	r3,r2,23fd0 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   24014:	e0bffe17 	ldw	r2,-8(fp)
}
   24018:	e037883a 	mov	sp,fp
   2401c:	df000017 	ldw	fp,0(sp)
   24020:	dec00104 	addi	sp,sp,4
   24024:	f800283a 	ret

00024028 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   24028:	defffa04 	addi	sp,sp,-24
   2402c:	dfc00515 	stw	ra,20(sp)
   24030:	df000415 	stw	fp,16(sp)
   24034:	df000404 	addi	fp,sp,16
   24038:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   2403c:	00800244 	movi	r2,9
   24040:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   24044:	014003f4 	movhi	r5,15
   24048:	29509004 	addi	r5,r5,16960
   2404c:	e13ffd17 	ldw	r4,-12(fp)
   24050:	00231dc0 	call	231dc <__mulsi3>
   24054:	100b883a 	mov	r5,r2
   24058:	0100bef4 	movhi	r4,763
   2405c:	213c2004 	addi	r4,r4,-3968
   24060:	00231200 	call	23120 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   24064:	100b883a 	mov	r5,r2
   24068:	01200034 	movhi	r4,32768
   2406c:	213fffc4 	addi	r4,r4,-1
   24070:	00231200 	call	23120 <__udivsi3>
   24074:	100b883a 	mov	r5,r2
   24078:	e13fff17 	ldw	r4,-4(fp)
   2407c:	00231200 	call	23120 <__udivsi3>
   24080:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   24084:	e0bffe17 	ldw	r2,-8(fp)
   24088:	10002a26 	beq	r2,zero,24134 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   2408c:	e03ffc15 	stw	zero,-16(fp)
   24090:	00001706 	br	240f0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   24094:	00a00034 	movhi	r2,32768
   24098:	10bfffc4 	addi	r2,r2,-1
   2409c:	10bfffc4 	addi	r2,r2,-1
   240a0:	103ffe1e 	bne	r2,zero,2409c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   240a4:	014003f4 	movhi	r5,15
   240a8:	29509004 	addi	r5,r5,16960
   240ac:	e13ffd17 	ldw	r4,-12(fp)
   240b0:	00231dc0 	call	231dc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   240b4:	100b883a 	mov	r5,r2
   240b8:	0100bef4 	movhi	r4,763
   240bc:	213c2004 	addi	r4,r4,-3968
   240c0:	00231200 	call	23120 <__udivsi3>
   240c4:	100b883a 	mov	r5,r2
   240c8:	01200034 	movhi	r4,32768
   240cc:	213fffc4 	addi	r4,r4,-1
   240d0:	00231200 	call	23120 <__udivsi3>
   240d4:	1007883a 	mov	r3,r2
   240d8:	e0bfff17 	ldw	r2,-4(fp)
   240dc:	10c5c83a 	sub	r2,r2,r3
   240e0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   240e4:	e0bffc17 	ldw	r2,-16(fp)
   240e8:	10800044 	addi	r2,r2,1
   240ec:	e0bffc15 	stw	r2,-16(fp)
   240f0:	e0fffc17 	ldw	r3,-16(fp)
   240f4:	e0bffe17 	ldw	r2,-8(fp)
   240f8:	18bfe616 	blt	r3,r2,24094 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   240fc:	014003f4 	movhi	r5,15
   24100:	29509004 	addi	r5,r5,16960
   24104:	e13ffd17 	ldw	r4,-12(fp)
   24108:	00231dc0 	call	231dc <__mulsi3>
   2410c:	100b883a 	mov	r5,r2
   24110:	0100bef4 	movhi	r4,763
   24114:	213c2004 	addi	r4,r4,-3968
   24118:	00231200 	call	23120 <__udivsi3>
   2411c:	e17fff17 	ldw	r5,-4(fp)
   24120:	1009883a 	mov	r4,r2
   24124:	00231dc0 	call	231dc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   24128:	10bfffc4 	addi	r2,r2,-1
   2412c:	103ffe1e 	bne	r2,zero,24128 <alt_busy_sleep+0x100>
   24130:	00000d06 	br	24168 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   24134:	014003f4 	movhi	r5,15
   24138:	29509004 	addi	r5,r5,16960
   2413c:	e13ffd17 	ldw	r4,-12(fp)
   24140:	00231dc0 	call	231dc <__mulsi3>
   24144:	100b883a 	mov	r5,r2
   24148:	0100bef4 	movhi	r4,763
   2414c:	213c2004 	addi	r4,r4,-3968
   24150:	00231200 	call	23120 <__udivsi3>
   24154:	e17fff17 	ldw	r5,-4(fp)
   24158:	1009883a 	mov	r4,r2
   2415c:	00231dc0 	call	231dc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   24160:	10bfffc4 	addi	r2,r2,-1
   24164:	00bffe16 	blt	zero,r2,24160 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   24168:	0005883a 	mov	r2,zero
}
   2416c:	e037883a 	mov	sp,fp
   24170:	dfc00117 	ldw	ra,4(sp)
   24174:	df000017 	ldw	fp,0(sp)
   24178:	dec00204 	addi	sp,sp,8
   2417c:	f800283a 	ret

00024180 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   24180:	deffff04 	addi	sp,sp,-4
   24184:	df000015 	stw	fp,0(sp)
   24188:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2418c:	0001883a 	nop
   24190:	e037883a 	mov	sp,fp
   24194:	df000017 	ldw	fp,0(sp)
   24198:	dec00104 	addi	sp,sp,4
   2419c:	f800283a 	ret

000241a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   241a0:	defffe04 	addi	sp,sp,-8
   241a4:	dfc00115 	stw	ra,4(sp)
   241a8:	df000015 	stw	fp,0(sp)
   241ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   241b0:	d0a00917 	ldw	r2,-32732(gp)
   241b4:	10000326 	beq	r2,zero,241c4 <alt_get_errno+0x24>
   241b8:	d0a00917 	ldw	r2,-32732(gp)
   241bc:	103ee83a 	callr	r2
   241c0:	00000106 	br	241c8 <alt_get_errno+0x28>
   241c4:	d0a29e04 	addi	r2,gp,-30088
}
   241c8:	e037883a 	mov	sp,fp
   241cc:	dfc00117 	ldw	ra,4(sp)
   241d0:	df000017 	ldw	fp,0(sp)
   241d4:	dec00204 	addi	sp,sp,8
   241d8:	f800283a 	ret

000241dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   241dc:	defffa04 	addi	sp,sp,-24
   241e0:	dfc00515 	stw	ra,20(sp)
   241e4:	df000415 	stw	fp,16(sp)
   241e8:	df000404 	addi	fp,sp,16
   241ec:	e13ffe15 	stw	r4,-8(fp)
   241f0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   241f4:	e0bffe17 	ldw	r2,-8(fp)
   241f8:	10000326 	beq	r2,zero,24208 <alt_dev_llist_insert+0x2c>
   241fc:	e0bffe17 	ldw	r2,-8(fp)
   24200:	10800217 	ldw	r2,8(r2)
   24204:	1000061e 	bne	r2,zero,24220 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   24208:	00241a00 	call	241a0 <alt_get_errno>
   2420c:	1007883a 	mov	r3,r2
   24210:	00800584 	movi	r2,22
   24214:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   24218:	00bffa84 	movi	r2,-22
   2421c:	00001306 	br	2426c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   24220:	e0bffe17 	ldw	r2,-8(fp)
   24224:	e0ffff17 	ldw	r3,-4(fp)
   24228:	e0fffc15 	stw	r3,-16(fp)
   2422c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24230:	e0bffd17 	ldw	r2,-12(fp)
   24234:	e0fffc17 	ldw	r3,-16(fp)
   24238:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2423c:	e0bffc17 	ldw	r2,-16(fp)
   24240:	10c00017 	ldw	r3,0(r2)
   24244:	e0bffd17 	ldw	r2,-12(fp)
   24248:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2424c:	e0bffc17 	ldw	r2,-16(fp)
   24250:	10800017 	ldw	r2,0(r2)
   24254:	e0fffd17 	ldw	r3,-12(fp)
   24258:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2425c:	e0bffc17 	ldw	r2,-16(fp)
   24260:	e0fffd17 	ldw	r3,-12(fp)
   24264:	10c00015 	stw	r3,0(r2)

  return 0;  
   24268:	0005883a 	mov	r2,zero
}
   2426c:	e037883a 	mov	sp,fp
   24270:	dfc00117 	ldw	ra,4(sp)
   24274:	df000017 	ldw	fp,0(sp)
   24278:	dec00204 	addi	sp,sp,8
   2427c:	f800283a 	ret

00024280 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   24280:	defffd04 	addi	sp,sp,-12
   24284:	dfc00215 	stw	ra,8(sp)
   24288:	df000115 	stw	fp,4(sp)
   2428c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24290:	008000b4 	movhi	r2,2
   24294:	10937c04 	addi	r2,r2,19952
   24298:	e0bfff15 	stw	r2,-4(fp)
   2429c:	00000606 	br	242b8 <_do_ctors+0x38>
        (*ctor) (); 
   242a0:	e0bfff17 	ldw	r2,-4(fp)
   242a4:	10800017 	ldw	r2,0(r2)
   242a8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   242ac:	e0bfff17 	ldw	r2,-4(fp)
   242b0:	10bfff04 	addi	r2,r2,-4
   242b4:	e0bfff15 	stw	r2,-4(fp)
   242b8:	e0ffff17 	ldw	r3,-4(fp)
   242bc:	008000b4 	movhi	r2,2
   242c0:	10937d04 	addi	r2,r2,19956
   242c4:	18bff62e 	bgeu	r3,r2,242a0 <_do_ctors+0x20>
        (*ctor) (); 
}
   242c8:	0001883a 	nop
   242cc:	e037883a 	mov	sp,fp
   242d0:	dfc00117 	ldw	ra,4(sp)
   242d4:	df000017 	ldw	fp,0(sp)
   242d8:	dec00204 	addi	sp,sp,8
   242dc:	f800283a 	ret

000242e0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   242e0:	defffd04 	addi	sp,sp,-12
   242e4:	dfc00215 	stw	ra,8(sp)
   242e8:	df000115 	stw	fp,4(sp)
   242ec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   242f0:	008000b4 	movhi	r2,2
   242f4:	10937c04 	addi	r2,r2,19952
   242f8:	e0bfff15 	stw	r2,-4(fp)
   242fc:	00000606 	br	24318 <_do_dtors+0x38>
        (*dtor) (); 
   24300:	e0bfff17 	ldw	r2,-4(fp)
   24304:	10800017 	ldw	r2,0(r2)
   24308:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2430c:	e0bfff17 	ldw	r2,-4(fp)
   24310:	10bfff04 	addi	r2,r2,-4
   24314:	e0bfff15 	stw	r2,-4(fp)
   24318:	e0ffff17 	ldw	r3,-4(fp)
   2431c:	008000b4 	movhi	r2,2
   24320:	10937d04 	addi	r2,r2,19956
   24324:	18bff62e 	bgeu	r3,r2,24300 <_do_dtors+0x20>
        (*dtor) (); 
}
   24328:	0001883a 	nop
   2432c:	e037883a 	mov	sp,fp
   24330:	dfc00117 	ldw	ra,4(sp)
   24334:	df000017 	ldw	fp,0(sp)
   24338:	dec00204 	addi	sp,sp,8
   2433c:	f800283a 	ret

00024340 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   24340:	deffff04 	addi	sp,sp,-4
   24344:	df000015 	stw	fp,0(sp)
   24348:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2434c:	0001883a 	nop
   24350:	e037883a 	mov	sp,fp
   24354:	df000017 	ldw	fp,0(sp)
   24358:	dec00104 	addi	sp,sp,4
   2435c:	f800283a 	ret

00024360 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24360:	defff804 	addi	sp,sp,-32
   24364:	dfc00715 	stw	ra,28(sp)
   24368:	df000615 	stw	fp,24(sp)
   2436c:	dc000515 	stw	r16,20(sp)
   24370:	df000604 	addi	fp,sp,24
   24374:	e13ffb15 	stw	r4,-20(fp)
   24378:	e17ffc15 	stw	r5,-16(fp)
   2437c:	e1bffd15 	stw	r6,-12(fp)
   24380:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   24384:	e1bffe17 	ldw	r6,-8(fp)
   24388:	e17ffd17 	ldw	r5,-12(fp)
   2438c:	e13ffc17 	ldw	r4,-16(fp)
   24390:	00245e80 	call	245e8 <open>
   24394:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   24398:	e0bffa17 	ldw	r2,-24(fp)
   2439c:	10002216 	blt	r2,zero,24428 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   243a0:	040000b4 	movhi	r16,2
   243a4:	8415a404 	addi	r16,r16,22160
   243a8:	e0bffa17 	ldw	r2,-24(fp)
   243ac:	01400304 	movi	r5,12
   243b0:	1009883a 	mov	r4,r2
   243b4:	00231dc0 	call	231dc <__mulsi3>
   243b8:	8085883a 	add	r2,r16,r2
   243bc:	10c00017 	ldw	r3,0(r2)
   243c0:	e0bffb17 	ldw	r2,-20(fp)
   243c4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   243c8:	040000b4 	movhi	r16,2
   243cc:	8415a404 	addi	r16,r16,22160
   243d0:	e0bffa17 	ldw	r2,-24(fp)
   243d4:	01400304 	movi	r5,12
   243d8:	1009883a 	mov	r4,r2
   243dc:	00231dc0 	call	231dc <__mulsi3>
   243e0:	8085883a 	add	r2,r16,r2
   243e4:	10800104 	addi	r2,r2,4
   243e8:	10c00017 	ldw	r3,0(r2)
   243ec:	e0bffb17 	ldw	r2,-20(fp)
   243f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   243f4:	040000b4 	movhi	r16,2
   243f8:	8415a404 	addi	r16,r16,22160
   243fc:	e0bffa17 	ldw	r2,-24(fp)
   24400:	01400304 	movi	r5,12
   24404:	1009883a 	mov	r4,r2
   24408:	00231dc0 	call	231dc <__mulsi3>
   2440c:	8085883a 	add	r2,r16,r2
   24410:	10800204 	addi	r2,r2,8
   24414:	10c00017 	ldw	r3,0(r2)
   24418:	e0bffb17 	ldw	r2,-20(fp)
   2441c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   24420:	e13ffa17 	ldw	r4,-24(fp)
   24424:	0023aa80 	call	23aa8 <alt_release_fd>
  }
} 
   24428:	0001883a 	nop
   2442c:	e6ffff04 	addi	sp,fp,-4
   24430:	dfc00217 	ldw	ra,8(sp)
   24434:	df000117 	ldw	fp,4(sp)
   24438:	dc000017 	ldw	r16,0(sp)
   2443c:	dec00304 	addi	sp,sp,12
   24440:	f800283a 	ret

00024444 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   24444:	defffb04 	addi	sp,sp,-20
   24448:	dfc00415 	stw	ra,16(sp)
   2444c:	df000315 	stw	fp,12(sp)
   24450:	df000304 	addi	fp,sp,12
   24454:	e13ffd15 	stw	r4,-12(fp)
   24458:	e17ffe15 	stw	r5,-8(fp)
   2445c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   24460:	01c07fc4 	movi	r7,511
   24464:	01800044 	movi	r6,1
   24468:	e17ffd17 	ldw	r5,-12(fp)
   2446c:	010000b4 	movhi	r4,2
   24470:	2115a704 	addi	r4,r4,22172
   24474:	00243600 	call	24360 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   24478:	01c07fc4 	movi	r7,511
   2447c:	000d883a 	mov	r6,zero
   24480:	e17ffe17 	ldw	r5,-8(fp)
   24484:	010000b4 	movhi	r4,2
   24488:	2115a404 	addi	r4,r4,22160
   2448c:	00243600 	call	24360 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   24490:	01c07fc4 	movi	r7,511
   24494:	01800044 	movi	r6,1
   24498:	e17fff17 	ldw	r5,-4(fp)
   2449c:	010000b4 	movhi	r4,2
   244a0:	2115aa04 	addi	r4,r4,22184
   244a4:	00243600 	call	24360 <alt_open_fd>
}  
   244a8:	0001883a 	nop
   244ac:	e037883a 	mov	sp,fp
   244b0:	dfc00117 	ldw	ra,4(sp)
   244b4:	df000017 	ldw	fp,0(sp)
   244b8:	dec00204 	addi	sp,sp,8
   244bc:	f800283a 	ret

000244c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   244c0:	defffe04 	addi	sp,sp,-8
   244c4:	dfc00115 	stw	ra,4(sp)
   244c8:	df000015 	stw	fp,0(sp)
   244cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   244d0:	d0a00917 	ldw	r2,-32732(gp)
   244d4:	10000326 	beq	r2,zero,244e4 <alt_get_errno+0x24>
   244d8:	d0a00917 	ldw	r2,-32732(gp)
   244dc:	103ee83a 	callr	r2
   244e0:	00000106 	br	244e8 <alt_get_errno+0x28>
   244e4:	d0a29e04 	addi	r2,gp,-30088
}
   244e8:	e037883a 	mov	sp,fp
   244ec:	dfc00117 	ldw	ra,4(sp)
   244f0:	df000017 	ldw	fp,0(sp)
   244f4:	dec00204 	addi	sp,sp,8
   244f8:	f800283a 	ret

000244fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   244fc:	defffb04 	addi	sp,sp,-20
   24500:	dfc00415 	stw	ra,16(sp)
   24504:	df000315 	stw	fp,12(sp)
   24508:	dc000215 	stw	r16,8(sp)
   2450c:	df000304 	addi	fp,sp,12
   24510:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   24514:	e0bffe17 	ldw	r2,-8(fp)
   24518:	10800217 	ldw	r2,8(r2)
   2451c:	10d00034 	orhi	r3,r2,16384
   24520:	e0bffe17 	ldw	r2,-8(fp)
   24524:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24528:	e03ffd15 	stw	zero,-12(fp)
   2452c:	00002306 	br	245bc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24530:	040000b4 	movhi	r16,2
   24534:	8415a404 	addi	r16,r16,22160
   24538:	e0bffd17 	ldw	r2,-12(fp)
   2453c:	01400304 	movi	r5,12
   24540:	1009883a 	mov	r4,r2
   24544:	00231dc0 	call	231dc <__mulsi3>
   24548:	8085883a 	add	r2,r16,r2
   2454c:	10c00017 	ldw	r3,0(r2)
   24550:	e0bffe17 	ldw	r2,-8(fp)
   24554:	10800017 	ldw	r2,0(r2)
   24558:	1880151e 	bne	r3,r2,245b0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2455c:	040000b4 	movhi	r16,2
   24560:	8415a404 	addi	r16,r16,22160
   24564:	e0bffd17 	ldw	r2,-12(fp)
   24568:	01400304 	movi	r5,12
   2456c:	1009883a 	mov	r4,r2
   24570:	00231dc0 	call	231dc <__mulsi3>
   24574:	8085883a 	add	r2,r16,r2
   24578:	10800204 	addi	r2,r2,8
   2457c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24580:	10000b0e 	bge	r2,zero,245b0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   24584:	01400304 	movi	r5,12
   24588:	e13ffd17 	ldw	r4,-12(fp)
   2458c:	00231dc0 	call	231dc <__mulsi3>
   24590:	1007883a 	mov	r3,r2
   24594:	008000b4 	movhi	r2,2
   24598:	1095a404 	addi	r2,r2,22160
   2459c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   245a0:	e0bffe17 	ldw	r2,-8(fp)
   245a4:	18800226 	beq	r3,r2,245b0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   245a8:	00bffcc4 	movi	r2,-13
   245ac:	00000806 	br	245d0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   245b0:	e0bffd17 	ldw	r2,-12(fp)
   245b4:	10800044 	addi	r2,r2,1
   245b8:	e0bffd15 	stw	r2,-12(fp)
   245bc:	d0a00817 	ldw	r2,-32736(gp)
   245c0:	1007883a 	mov	r3,r2
   245c4:	e0bffd17 	ldw	r2,-12(fp)
   245c8:	18bfd92e 	bgeu	r3,r2,24530 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   245cc:	0005883a 	mov	r2,zero
}
   245d0:	e6ffff04 	addi	sp,fp,-4
   245d4:	dfc00217 	ldw	ra,8(sp)
   245d8:	df000117 	ldw	fp,4(sp)
   245dc:	dc000017 	ldw	r16,0(sp)
   245e0:	dec00304 	addi	sp,sp,12
   245e4:	f800283a 	ret

000245e8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   245e8:	defff604 	addi	sp,sp,-40
   245ec:	dfc00915 	stw	ra,36(sp)
   245f0:	df000815 	stw	fp,32(sp)
   245f4:	df000804 	addi	fp,sp,32
   245f8:	e13ffd15 	stw	r4,-12(fp)
   245fc:	e17ffe15 	stw	r5,-8(fp)
   24600:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24604:	00bfffc4 	movi	r2,-1
   24608:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2460c:	00bffb44 	movi	r2,-19
   24610:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   24614:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24618:	d1600604 	addi	r5,gp,-32744
   2461c:	e13ffd17 	ldw	r4,-12(fp)
   24620:	00247680 	call	24768 <alt_find_dev>
   24624:	e0bff815 	stw	r2,-32(fp)
   24628:	e0bff817 	ldw	r2,-32(fp)
   2462c:	1000051e 	bne	r2,zero,24644 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   24630:	e13ffd17 	ldw	r4,-12(fp)
   24634:	00247f80 	call	247f8 <alt_find_file>
   24638:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2463c:	00800044 	movi	r2,1
   24640:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24644:	e0bff817 	ldw	r2,-32(fp)
   24648:	10002b26 	beq	r2,zero,246f8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2464c:	e13ff817 	ldw	r4,-32(fp)
   24650:	00249000 	call	24900 <alt_get_fd>
   24654:	e0bff915 	stw	r2,-28(fp)
   24658:	e0bff917 	ldw	r2,-28(fp)
   2465c:	1000030e 	bge	r2,zero,2466c <open+0x84>
    {
      status = index;
   24660:	e0bff917 	ldw	r2,-28(fp)
   24664:	e0bffa15 	stw	r2,-24(fp)
   24668:	00002506 	br	24700 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   2466c:	01400304 	movi	r5,12
   24670:	e13ff917 	ldw	r4,-28(fp)
   24674:	00231dc0 	call	231dc <__mulsi3>
   24678:	1007883a 	mov	r3,r2
   2467c:	008000b4 	movhi	r2,2
   24680:	1095a404 	addi	r2,r2,22160
   24684:	1885883a 	add	r2,r3,r2
   24688:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2468c:	e0fffe17 	ldw	r3,-8(fp)
   24690:	00900034 	movhi	r2,16384
   24694:	10bfffc4 	addi	r2,r2,-1
   24698:	1886703a 	and	r3,r3,r2
   2469c:	e0bffc17 	ldw	r2,-16(fp)
   246a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   246a4:	e0bffb17 	ldw	r2,-20(fp)
   246a8:	1000051e 	bne	r2,zero,246c0 <open+0xd8>
   246ac:	e13ffc17 	ldw	r4,-16(fp)
   246b0:	00244fc0 	call	244fc <alt_file_locked>
   246b4:	e0bffa15 	stw	r2,-24(fp)
   246b8:	e0bffa17 	ldw	r2,-24(fp)
   246bc:	10001016 	blt	r2,zero,24700 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   246c0:	e0bff817 	ldw	r2,-32(fp)
   246c4:	10800317 	ldw	r2,12(r2)
   246c8:	10000826 	beq	r2,zero,246ec <open+0x104>
   246cc:	e0bff817 	ldw	r2,-32(fp)
   246d0:	10800317 	ldw	r2,12(r2)
   246d4:	e1ffff17 	ldw	r7,-4(fp)
   246d8:	e1bffe17 	ldw	r6,-8(fp)
   246dc:	e17ffd17 	ldw	r5,-12(fp)
   246e0:	e13ffc17 	ldw	r4,-16(fp)
   246e4:	103ee83a 	callr	r2
   246e8:	00000106 	br	246f0 <open+0x108>
   246ec:	0005883a 	mov	r2,zero
   246f0:	e0bffa15 	stw	r2,-24(fp)
   246f4:	00000206 	br	24700 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   246f8:	00bffb44 	movi	r2,-19
   246fc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24700:	e0bffa17 	ldw	r2,-24(fp)
   24704:	1000090e 	bge	r2,zero,2472c <open+0x144>
  {
    alt_release_fd (index);  
   24708:	e13ff917 	ldw	r4,-28(fp)
   2470c:	0023aa80 	call	23aa8 <alt_release_fd>
    ALT_ERRNO = -status;
   24710:	00244c00 	call	244c0 <alt_get_errno>
   24714:	1007883a 	mov	r3,r2
   24718:	e0bffa17 	ldw	r2,-24(fp)
   2471c:	0085c83a 	sub	r2,zero,r2
   24720:	18800015 	stw	r2,0(r3)
    return -1;
   24724:	00bfffc4 	movi	r2,-1
   24728:	00000106 	br	24730 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   2472c:	e0bff917 	ldw	r2,-28(fp)
}
   24730:	e037883a 	mov	sp,fp
   24734:	dfc00117 	ldw	ra,4(sp)
   24738:	df000017 	ldw	fp,0(sp)
   2473c:	dec00204 	addi	sp,sp,8
   24740:	f800283a 	ret

00024744 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   24744:	deffff04 	addi	sp,sp,-4
   24748:	df000015 	stw	fp,0(sp)
   2474c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24750:	000170fa 	wrctl	ienable,zero
}
   24754:	0001883a 	nop
   24758:	e037883a 	mov	sp,fp
   2475c:	df000017 	ldw	fp,0(sp)
   24760:	dec00104 	addi	sp,sp,4
   24764:	f800283a 	ret

00024768 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   24768:	defffa04 	addi	sp,sp,-24
   2476c:	dfc00515 	stw	ra,20(sp)
   24770:	df000415 	stw	fp,16(sp)
   24774:	df000404 	addi	fp,sp,16
   24778:	e13ffe15 	stw	r4,-8(fp)
   2477c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24780:	e0bfff17 	ldw	r2,-4(fp)
   24784:	10800017 	ldw	r2,0(r2)
   24788:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2478c:	e13ffe17 	ldw	r4,-8(fp)
   24790:	00204cc0 	call	204cc <strlen>
   24794:	10800044 	addi	r2,r2,1
   24798:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2479c:	00000d06 	br	247d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   247a0:	e0bffc17 	ldw	r2,-16(fp)
   247a4:	10800217 	ldw	r2,8(r2)
   247a8:	e0fffd17 	ldw	r3,-12(fp)
   247ac:	180d883a 	mov	r6,r3
   247b0:	e17ffe17 	ldw	r5,-8(fp)
   247b4:	1009883a 	mov	r4,r2
   247b8:	0024aac0 	call	24aac <memcmp>
   247bc:	1000021e 	bne	r2,zero,247c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   247c0:	e0bffc17 	ldw	r2,-16(fp)
   247c4:	00000706 	br	247e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   247c8:	e0bffc17 	ldw	r2,-16(fp)
   247cc:	10800017 	ldw	r2,0(r2)
   247d0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   247d4:	e0fffc17 	ldw	r3,-16(fp)
   247d8:	e0bfff17 	ldw	r2,-4(fp)
   247dc:	18bff01e 	bne	r3,r2,247a0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   247e0:	0005883a 	mov	r2,zero
}
   247e4:	e037883a 	mov	sp,fp
   247e8:	dfc00117 	ldw	ra,4(sp)
   247ec:	df000017 	ldw	fp,0(sp)
   247f0:	dec00204 	addi	sp,sp,8
   247f4:	f800283a 	ret

000247f8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   247f8:	defffb04 	addi	sp,sp,-20
   247fc:	dfc00415 	stw	ra,16(sp)
   24800:	df000315 	stw	fp,12(sp)
   24804:	df000304 	addi	fp,sp,12
   24808:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2480c:	d0a00417 	ldw	r2,-32752(gp)
   24810:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24814:	00003106 	br	248dc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   24818:	e0bffd17 	ldw	r2,-12(fp)
   2481c:	10800217 	ldw	r2,8(r2)
   24820:	1009883a 	mov	r4,r2
   24824:	00204cc0 	call	204cc <strlen>
   24828:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2482c:	e0bffd17 	ldw	r2,-12(fp)
   24830:	10c00217 	ldw	r3,8(r2)
   24834:	e0bffe17 	ldw	r2,-8(fp)
   24838:	10bfffc4 	addi	r2,r2,-1
   2483c:	1885883a 	add	r2,r3,r2
   24840:	10800003 	ldbu	r2,0(r2)
   24844:	10803fcc 	andi	r2,r2,255
   24848:	1080201c 	xori	r2,r2,128
   2484c:	10bfe004 	addi	r2,r2,-128
   24850:	10800bd8 	cmpnei	r2,r2,47
   24854:	1000031e 	bne	r2,zero,24864 <alt_find_file+0x6c>
    {
      len -= 1;
   24858:	e0bffe17 	ldw	r2,-8(fp)
   2485c:	10bfffc4 	addi	r2,r2,-1
   24860:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24864:	e0bffe17 	ldw	r2,-8(fp)
   24868:	e0ffff17 	ldw	r3,-4(fp)
   2486c:	1885883a 	add	r2,r3,r2
   24870:	10800003 	ldbu	r2,0(r2)
   24874:	10803fcc 	andi	r2,r2,255
   24878:	1080201c 	xori	r2,r2,128
   2487c:	10bfe004 	addi	r2,r2,-128
   24880:	10800be0 	cmpeqi	r2,r2,47
   24884:	1000081e 	bne	r2,zero,248a8 <alt_find_file+0xb0>
   24888:	e0bffe17 	ldw	r2,-8(fp)
   2488c:	e0ffff17 	ldw	r3,-4(fp)
   24890:	1885883a 	add	r2,r3,r2
   24894:	10800003 	ldbu	r2,0(r2)
   24898:	10803fcc 	andi	r2,r2,255
   2489c:	1080201c 	xori	r2,r2,128
   248a0:	10bfe004 	addi	r2,r2,-128
   248a4:	10000a1e 	bne	r2,zero,248d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   248a8:	e0bffd17 	ldw	r2,-12(fp)
   248ac:	10800217 	ldw	r2,8(r2)
   248b0:	e0fffe17 	ldw	r3,-8(fp)
   248b4:	180d883a 	mov	r6,r3
   248b8:	e17fff17 	ldw	r5,-4(fp)
   248bc:	1009883a 	mov	r4,r2
   248c0:	0024aac0 	call	24aac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   248c4:	1000021e 	bne	r2,zero,248d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   248c8:	e0bffd17 	ldw	r2,-12(fp)
   248cc:	00000706 	br	248ec <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   248d0:	e0bffd17 	ldw	r2,-12(fp)
   248d4:	10800017 	ldw	r2,0(r2)
   248d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   248dc:	e0fffd17 	ldw	r3,-12(fp)
   248e0:	d0a00404 	addi	r2,gp,-32752
   248e4:	18bfcc1e 	bne	r3,r2,24818 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   248e8:	0005883a 	mov	r2,zero
}
   248ec:	e037883a 	mov	sp,fp
   248f0:	dfc00117 	ldw	ra,4(sp)
   248f4:	df000017 	ldw	fp,0(sp)
   248f8:	dec00204 	addi	sp,sp,8
   248fc:	f800283a 	ret

00024900 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24900:	defffa04 	addi	sp,sp,-24
   24904:	dfc00515 	stw	ra,20(sp)
   24908:	df000415 	stw	fp,16(sp)
   2490c:	dc000315 	stw	r16,12(sp)
   24910:	df000404 	addi	fp,sp,16
   24914:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   24918:	00bffa04 	movi	r2,-24
   2491c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24920:	e03ffc15 	stw	zero,-16(fp)
   24924:	00001d06 	br	2499c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   24928:	040000b4 	movhi	r16,2
   2492c:	8415a404 	addi	r16,r16,22160
   24930:	e0bffc17 	ldw	r2,-16(fp)
   24934:	01400304 	movi	r5,12
   24938:	1009883a 	mov	r4,r2
   2493c:	00231dc0 	call	231dc <__mulsi3>
   24940:	8085883a 	add	r2,r16,r2
   24944:	10800017 	ldw	r2,0(r2)
   24948:	1000111e 	bne	r2,zero,24990 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   2494c:	040000b4 	movhi	r16,2
   24950:	8415a404 	addi	r16,r16,22160
   24954:	e0bffc17 	ldw	r2,-16(fp)
   24958:	01400304 	movi	r5,12
   2495c:	1009883a 	mov	r4,r2
   24960:	00231dc0 	call	231dc <__mulsi3>
   24964:	8085883a 	add	r2,r16,r2
   24968:	e0fffe17 	ldw	r3,-8(fp)
   2496c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   24970:	d0e00817 	ldw	r3,-32736(gp)
   24974:	e0bffc17 	ldw	r2,-16(fp)
   24978:	1880020e 	bge	r3,r2,24984 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   2497c:	e0bffc17 	ldw	r2,-16(fp)
   24980:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   24984:	e0bffc17 	ldw	r2,-16(fp)
   24988:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   2498c:	00000606 	br	249a8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24990:	e0bffc17 	ldw	r2,-16(fp)
   24994:	10800044 	addi	r2,r2,1
   24998:	e0bffc15 	stw	r2,-16(fp)
   2499c:	e0bffc17 	ldw	r2,-16(fp)
   249a0:	10800810 	cmplti	r2,r2,32
   249a4:	103fe01e 	bne	r2,zero,24928 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   249a8:	e0bffd17 	ldw	r2,-12(fp)
}
   249ac:	e6ffff04 	addi	sp,fp,-4
   249b0:	dfc00217 	ldw	ra,8(sp)
   249b4:	df000117 	ldw	fp,4(sp)
   249b8:	dc000017 	ldw	r16,0(sp)
   249bc:	dec00304 	addi	sp,sp,12
   249c0:	f800283a 	ret

000249c4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   249c4:	defffe04 	addi	sp,sp,-8
   249c8:	df000115 	stw	fp,4(sp)
   249cc:	df000104 	addi	fp,sp,4
   249d0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   249d4:	e0bfff17 	ldw	r2,-4(fp)
   249d8:	10bffe84 	addi	r2,r2,-6
   249dc:	10c00428 	cmpgeui	r3,r2,16
   249e0:	18001a1e 	bne	r3,zero,24a4c <alt_exception_cause_generated_bad_addr+0x88>
   249e4:	100690ba 	slli	r3,r2,2
   249e8:	008000b4 	movhi	r2,2
   249ec:	10927f04 	addi	r2,r2,18940
   249f0:	1885883a 	add	r2,r3,r2
   249f4:	10800017 	ldw	r2,0(r2)
   249f8:	1000683a 	jmp	r2
   249fc:	00024a3c 	xorhi	zero,zero,2344
   24a00:	00024a3c 	xorhi	zero,zero,2344
   24a04:	00024a4c 	andi	zero,zero,2345
   24a08:	00024a4c 	andi	zero,zero,2345
   24a0c:	00024a4c 	andi	zero,zero,2345
   24a10:	00024a3c 	xorhi	zero,zero,2344
   24a14:	00024a44 	movi	zero,2345
   24a18:	00024a4c 	andi	zero,zero,2345
   24a1c:	00024a3c 	xorhi	zero,zero,2344
   24a20:	00024a3c 	xorhi	zero,zero,2344
   24a24:	00024a4c 	andi	zero,zero,2345
   24a28:	00024a3c 	xorhi	zero,zero,2344
   24a2c:	00024a44 	movi	zero,2345
   24a30:	00024a4c 	andi	zero,zero,2345
   24a34:	00024a4c 	andi	zero,zero,2345
   24a38:	00024a3c 	xorhi	zero,zero,2344
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   24a3c:	00800044 	movi	r2,1
   24a40:	00000306 	br	24a50 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   24a44:	0005883a 	mov	r2,zero
   24a48:	00000106 	br	24a50 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   24a4c:	0005883a 	mov	r2,zero
  }
}
   24a50:	e037883a 	mov	sp,fp
   24a54:	df000017 	ldw	fp,0(sp)
   24a58:	dec00104 	addi	sp,sp,4
   24a5c:	f800283a 	ret

00024a60 <atexit>:
   24a60:	200b883a 	mov	r5,r4
   24a64:	000f883a 	mov	r7,zero
   24a68:	000d883a 	mov	r6,zero
   24a6c:	0009883a 	mov	r4,zero
   24a70:	0024b281 	jmpi	24b28 <__register_exitproc>

00024a74 <exit>:
   24a74:	defffe04 	addi	sp,sp,-8
   24a78:	000b883a 	mov	r5,zero
   24a7c:	dc000015 	stw	r16,0(sp)
   24a80:	dfc00115 	stw	ra,4(sp)
   24a84:	2021883a 	mov	r16,r4
   24a88:	0024c400 	call	24c40 <__call_exitprocs>
   24a8c:	008000b4 	movhi	r2,2
   24a90:	10960f04 	addi	r2,r2,22588
   24a94:	11000017 	ldw	r4,0(r2)
   24a98:	20800f17 	ldw	r2,60(r4)
   24a9c:	10000126 	beq	r2,zero,24aa4 <exit+0x30>
   24aa0:	103ee83a 	callr	r2
   24aa4:	8009883a 	mov	r4,r16
   24aa8:	0024dc00 	call	24dc0 <_exit>

00024aac <memcmp>:
   24aac:	01c000c4 	movi	r7,3
   24ab0:	3980192e 	bgeu	r7,r6,24b18 <memcmp+0x6c>
   24ab4:	2144b03a 	or	r2,r4,r5
   24ab8:	11c4703a 	and	r2,r2,r7
   24abc:	10000f26 	beq	r2,zero,24afc <memcmp+0x50>
   24ac0:	20800003 	ldbu	r2,0(r4)
   24ac4:	28c00003 	ldbu	r3,0(r5)
   24ac8:	10c0151e 	bne	r2,r3,24b20 <memcmp+0x74>
   24acc:	31bfff84 	addi	r6,r6,-2
   24ad0:	01ffffc4 	movi	r7,-1
   24ad4:	00000406 	br	24ae8 <memcmp+0x3c>
   24ad8:	20800003 	ldbu	r2,0(r4)
   24adc:	28c00003 	ldbu	r3,0(r5)
   24ae0:	31bfffc4 	addi	r6,r6,-1
   24ae4:	10c00e1e 	bne	r2,r3,24b20 <memcmp+0x74>
   24ae8:	21000044 	addi	r4,r4,1
   24aec:	29400044 	addi	r5,r5,1
   24af0:	31fff91e 	bne	r6,r7,24ad8 <memcmp+0x2c>
   24af4:	0005883a 	mov	r2,zero
   24af8:	f800283a 	ret
   24afc:	20c00017 	ldw	r3,0(r4)
   24b00:	28800017 	ldw	r2,0(r5)
   24b04:	18bfee1e 	bne	r3,r2,24ac0 <memcmp+0x14>
   24b08:	31bfff04 	addi	r6,r6,-4
   24b0c:	21000104 	addi	r4,r4,4
   24b10:	29400104 	addi	r5,r5,4
   24b14:	39bff936 	bltu	r7,r6,24afc <memcmp+0x50>
   24b18:	303fe91e 	bne	r6,zero,24ac0 <memcmp+0x14>
   24b1c:	003ff506 	br	24af4 <memcmp+0x48>
   24b20:	10c5c83a 	sub	r2,r2,r3
   24b24:	f800283a 	ret

00024b28 <__register_exitproc>:
   24b28:	defffa04 	addi	sp,sp,-24
   24b2c:	dc000315 	stw	r16,12(sp)
   24b30:	040000b4 	movhi	r16,2
   24b34:	84160f04 	addi	r16,r16,22588
   24b38:	80c00017 	ldw	r3,0(r16)
   24b3c:	dc400415 	stw	r17,16(sp)
   24b40:	dfc00515 	stw	ra,20(sp)
   24b44:	18805217 	ldw	r2,328(r3)
   24b48:	2023883a 	mov	r17,r4
   24b4c:	10003726 	beq	r2,zero,24c2c <__register_exitproc+0x104>
   24b50:	10c00117 	ldw	r3,4(r2)
   24b54:	010007c4 	movi	r4,31
   24b58:	20c00e16 	blt	r4,r3,24b94 <__register_exitproc+0x6c>
   24b5c:	1a000044 	addi	r8,r3,1
   24b60:	8800221e 	bne	r17,zero,24bec <__register_exitproc+0xc4>
   24b64:	18c00084 	addi	r3,r3,2
   24b68:	18c7883a 	add	r3,r3,r3
   24b6c:	18c7883a 	add	r3,r3,r3
   24b70:	12000115 	stw	r8,4(r2)
   24b74:	10c7883a 	add	r3,r2,r3
   24b78:	19400015 	stw	r5,0(r3)
   24b7c:	0005883a 	mov	r2,zero
   24b80:	dfc00517 	ldw	ra,20(sp)
   24b84:	dc400417 	ldw	r17,16(sp)
   24b88:	dc000317 	ldw	r16,12(sp)
   24b8c:	dec00604 	addi	sp,sp,24
   24b90:	f800283a 	ret
   24b94:	00800034 	movhi	r2,0
   24b98:	10800004 	addi	r2,r2,0
   24b9c:	10002626 	beq	r2,zero,24c38 <__register_exitproc+0x110>
   24ba0:	01006404 	movi	r4,400
   24ba4:	d9400015 	stw	r5,0(sp)
   24ba8:	d9800115 	stw	r6,4(sp)
   24bac:	d9c00215 	stw	r7,8(sp)
   24bb0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   24bb4:	d9400017 	ldw	r5,0(sp)
   24bb8:	d9800117 	ldw	r6,4(sp)
   24bbc:	d9c00217 	ldw	r7,8(sp)
   24bc0:	10001d26 	beq	r2,zero,24c38 <__register_exitproc+0x110>
   24bc4:	81000017 	ldw	r4,0(r16)
   24bc8:	10000115 	stw	zero,4(r2)
   24bcc:	02000044 	movi	r8,1
   24bd0:	22405217 	ldw	r9,328(r4)
   24bd4:	0007883a 	mov	r3,zero
   24bd8:	12400015 	stw	r9,0(r2)
   24bdc:	20805215 	stw	r2,328(r4)
   24be0:	10006215 	stw	zero,392(r2)
   24be4:	10006315 	stw	zero,396(r2)
   24be8:	883fde26 	beq	r17,zero,24b64 <__register_exitproc+0x3c>
   24bec:	18c9883a 	add	r4,r3,r3
   24bf0:	2109883a 	add	r4,r4,r4
   24bf4:	1109883a 	add	r4,r2,r4
   24bf8:	21802215 	stw	r6,136(r4)
   24bfc:	01800044 	movi	r6,1
   24c00:	12406217 	ldw	r9,392(r2)
   24c04:	30cc983a 	sll	r6,r6,r3
   24c08:	4992b03a 	or	r9,r9,r6
   24c0c:	12406215 	stw	r9,392(r2)
   24c10:	21c04215 	stw	r7,264(r4)
   24c14:	01000084 	movi	r4,2
   24c18:	893fd21e 	bne	r17,r4,24b64 <__register_exitproc+0x3c>
   24c1c:	11006317 	ldw	r4,396(r2)
   24c20:	218cb03a 	or	r6,r4,r6
   24c24:	11806315 	stw	r6,396(r2)
   24c28:	003fce06 	br	24b64 <__register_exitproc+0x3c>
   24c2c:	18805304 	addi	r2,r3,332
   24c30:	18805215 	stw	r2,328(r3)
   24c34:	003fc606 	br	24b50 <__register_exitproc+0x28>
   24c38:	00bfffc4 	movi	r2,-1
   24c3c:	003fd006 	br	24b80 <__register_exitproc+0x58>

00024c40 <__call_exitprocs>:
   24c40:	defff504 	addi	sp,sp,-44
   24c44:	df000915 	stw	fp,36(sp)
   24c48:	dd400615 	stw	r21,24(sp)
   24c4c:	dc800315 	stw	r18,12(sp)
   24c50:	dfc00a15 	stw	ra,40(sp)
   24c54:	ddc00815 	stw	r23,32(sp)
   24c58:	dd800715 	stw	r22,28(sp)
   24c5c:	dd000515 	stw	r20,20(sp)
   24c60:	dcc00415 	stw	r19,16(sp)
   24c64:	dc400215 	stw	r17,8(sp)
   24c68:	dc000115 	stw	r16,4(sp)
   24c6c:	d9000015 	stw	r4,0(sp)
   24c70:	2839883a 	mov	fp,r5
   24c74:	04800044 	movi	r18,1
   24c78:	057fffc4 	movi	r21,-1
   24c7c:	008000b4 	movhi	r2,2
   24c80:	10960f04 	addi	r2,r2,22588
   24c84:	12000017 	ldw	r8,0(r2)
   24c88:	45005217 	ldw	r20,328(r8)
   24c8c:	44c05204 	addi	r19,r8,328
   24c90:	a0001c26 	beq	r20,zero,24d04 <__call_exitprocs+0xc4>
   24c94:	a0800117 	ldw	r2,4(r20)
   24c98:	15ffffc4 	addi	r23,r2,-1
   24c9c:	b8000d16 	blt	r23,zero,24cd4 <__call_exitprocs+0x94>
   24ca0:	14000044 	addi	r16,r2,1
   24ca4:	8421883a 	add	r16,r16,r16
   24ca8:	8421883a 	add	r16,r16,r16
   24cac:	84402004 	addi	r17,r16,128
   24cb0:	a463883a 	add	r17,r20,r17
   24cb4:	a421883a 	add	r16,r20,r16
   24cb8:	e0001e26 	beq	fp,zero,24d34 <__call_exitprocs+0xf4>
   24cbc:	80804017 	ldw	r2,256(r16)
   24cc0:	e0801c26 	beq	fp,r2,24d34 <__call_exitprocs+0xf4>
   24cc4:	bdffffc4 	addi	r23,r23,-1
   24cc8:	843fff04 	addi	r16,r16,-4
   24ccc:	8c7fff04 	addi	r17,r17,-4
   24cd0:	bd7ff91e 	bne	r23,r21,24cb8 <__call_exitprocs+0x78>
   24cd4:	00800034 	movhi	r2,0
   24cd8:	10800004 	addi	r2,r2,0
   24cdc:	10000926 	beq	r2,zero,24d04 <__call_exitprocs+0xc4>
   24ce0:	a0800117 	ldw	r2,4(r20)
   24ce4:	1000301e 	bne	r2,zero,24da8 <__call_exitprocs+0x168>
   24ce8:	a0800017 	ldw	r2,0(r20)
   24cec:	10003226 	beq	r2,zero,24db8 <__call_exitprocs+0x178>
   24cf0:	a009883a 	mov	r4,r20
   24cf4:	98800015 	stw	r2,0(r19)
   24cf8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   24cfc:	9d000017 	ldw	r20,0(r19)
   24d00:	a03fe41e 	bne	r20,zero,24c94 <__call_exitprocs+0x54>
   24d04:	dfc00a17 	ldw	ra,40(sp)
   24d08:	df000917 	ldw	fp,36(sp)
   24d0c:	ddc00817 	ldw	r23,32(sp)
   24d10:	dd800717 	ldw	r22,28(sp)
   24d14:	dd400617 	ldw	r21,24(sp)
   24d18:	dd000517 	ldw	r20,20(sp)
   24d1c:	dcc00417 	ldw	r19,16(sp)
   24d20:	dc800317 	ldw	r18,12(sp)
   24d24:	dc400217 	ldw	r17,8(sp)
   24d28:	dc000117 	ldw	r16,4(sp)
   24d2c:	dec00b04 	addi	sp,sp,44
   24d30:	f800283a 	ret
   24d34:	a0800117 	ldw	r2,4(r20)
   24d38:	80c00017 	ldw	r3,0(r16)
   24d3c:	10bfffc4 	addi	r2,r2,-1
   24d40:	15c01426 	beq	r2,r23,24d94 <__call_exitprocs+0x154>
   24d44:	80000015 	stw	zero,0(r16)
   24d48:	183fde26 	beq	r3,zero,24cc4 <__call_exitprocs+0x84>
   24d4c:	95c8983a 	sll	r4,r18,r23
   24d50:	a0806217 	ldw	r2,392(r20)
   24d54:	a5800117 	ldw	r22,4(r20)
   24d58:	2084703a 	and	r2,r4,r2
   24d5c:	10000b26 	beq	r2,zero,24d8c <__call_exitprocs+0x14c>
   24d60:	a0806317 	ldw	r2,396(r20)
   24d64:	2088703a 	and	r4,r4,r2
   24d68:	20000c1e 	bne	r4,zero,24d9c <__call_exitprocs+0x15c>
   24d6c:	89400017 	ldw	r5,0(r17)
   24d70:	d9000017 	ldw	r4,0(sp)
   24d74:	183ee83a 	callr	r3
   24d78:	a0800117 	ldw	r2,4(r20)
   24d7c:	15bfbf1e 	bne	r2,r22,24c7c <__call_exitprocs+0x3c>
   24d80:	98800017 	ldw	r2,0(r19)
   24d84:	153fcf26 	beq	r2,r20,24cc4 <__call_exitprocs+0x84>
   24d88:	003fbc06 	br	24c7c <__call_exitprocs+0x3c>
   24d8c:	183ee83a 	callr	r3
   24d90:	003ff906 	br	24d78 <__call_exitprocs+0x138>
   24d94:	a5c00115 	stw	r23,4(r20)
   24d98:	003feb06 	br	24d48 <__call_exitprocs+0x108>
   24d9c:	89000017 	ldw	r4,0(r17)
   24da0:	183ee83a 	callr	r3
   24da4:	003ff406 	br	24d78 <__call_exitprocs+0x138>
   24da8:	a0800017 	ldw	r2,0(r20)
   24dac:	a027883a 	mov	r19,r20
   24db0:	1029883a 	mov	r20,r2
   24db4:	003fb606 	br	24c90 <__call_exitprocs+0x50>
   24db8:	0005883a 	mov	r2,zero
   24dbc:	003ffb06 	br	24dac <__call_exitprocs+0x16c>

00024dc0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   24dc0:	defffd04 	addi	sp,sp,-12
   24dc4:	df000215 	stw	fp,8(sp)
   24dc8:	df000204 	addi	fp,sp,8
   24dcc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   24dd0:	0001883a 	nop
   24dd4:	e0bfff17 	ldw	r2,-4(fp)
   24dd8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   24ddc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   24de0:	10000226 	beq	r2,zero,24dec <_exit+0x2c>
    ALT_SIM_FAIL();
   24de4:	002af070 	cmpltui	zero,zero,43969
   24de8:	00000106 	br	24df0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   24dec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   24df0:	003fff06 	br	24df0 <_exit+0x30>
