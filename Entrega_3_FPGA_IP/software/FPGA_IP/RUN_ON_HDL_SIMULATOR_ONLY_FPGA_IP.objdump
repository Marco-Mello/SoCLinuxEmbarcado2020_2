
RUN_ON_HDL_SIMULATOR_ONLY_FPGA_IP.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_FPGA_IP.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000014a4 memsz 0x000014a4 flags r-x
    LOAD off    0x000024c4 vaddr 0x000214c4 paddr 0x000217d4 align 2**12
         filesz 0x00000310 memsz 0x00000310 flags rw-
    LOAD off    0x00002ae4 vaddr 0x00021ae4 paddr 0x00021ae4 align 2**12
         filesz 0x00000000 memsz 0x0000013c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  000027d4  2**0
                  CONTENTS
  2 .text         00001484  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000020  000214a4  000214a4  000024a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000310  000214c4  000217d4  000024c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000013c  00021ae4  00021ae4  00002ae4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_1 00000000  00021c20  00021c20  000027d4  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  00040000  00040000  000027d4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000027d4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000003f0  00000000  00000000  000027f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000418b  00000000  00000000  00002be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000019e2  00000000  00000000  00006d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001b17  00000000  00000000  00008755  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000740  00000000  00000000  0000a26c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000013b6  00000000  00000000  0000a9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000482  00000000  00000000  0000bd62  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a0  00000000  00000000  0000c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000d94d  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000d950  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000d95c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000d95d  2**0
                  CONTENTS, READONLY
 21 .profiling_enabled 00000001  00000000  00000000  0000d95e  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  0000d95f  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  0000d963  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  0000d967  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0000d96b  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003a  00000000  00000000  0000d975  2**0
                  CONTENTS, READONLY
 27 .jdi          00005089  00000000  00000000  0000d9af  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00041368  00000000  00000000  00012a38  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
000214a4 l    d  .rodata	00000000 .rodata
000214c4 l    d  .rwdata	00000000 .rwdata
00021ae4 l    d  .bss	00000000 .bss
00021c20 l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00040000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FPGA_IP_bsp//obj/HAL/src/crt0.o
00020038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
0002009c l     F .text	00000074 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000202a8 l     F .text	00000040 alt_dev_reg
000214c4 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
000205dc l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00020734 l     F .text	00000038 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002076c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_gmon.c
000217b4 l     O .rwdata	00000004 pcsample_need_init
00021af0 l     O .bss	00000004 s_pcsamples
000217b8 l     O .rwdata	00000004 s_low_pc
000217bc l     O .rwdata	00000004 s_high_pc
00021b08 l     O .bss	00000018 s_nios2_pcsample_alarm
00021af4 l     O .bss	00000004 mcount_slab_ptr
00021af8 l     O .bss	00000004 mcount_slab_size
0002093c l     F .text	0000007c mcount_allocate
00020ab8 l     F .text	000000cc nios2_pcsample_init
00020b84 l     F .text	00000080 nios2_pcsample
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000217c0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
000216bc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
000201a0 g     F .text	0000006c alt_main
000217d4 g       *ABS*	00000000 __flash_rwdata_start
00021c20 g       *ABS*	00000000 __alt_heap_start
00020f2c g     F .text	00000030 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00021b04 g     O .bss	00000004 errno
00021ae8 g     O .bss	00000004 alt_argv
0002979c g       *ABS*	00000000 _gp
00021518 g     O .rwdata	00000180 alt_fd_list
000214a4 g       *ABS*	00000000 __DTOR_END__
00020444 g     F .text	000000f8 altera_avalon_jtag_uart_read
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000217ac g     O .rwdata	00000004 alt_max_fd
000217cc g     O .rwdata	00000004 _global_impure_ptr
00021c20 g       *ABS*	00000000 __bss_end
00020e18 g     F .text	00000114 alt_tick
00020d70 g     F .text	000000a8 alt_alarm_stop
000214f0 g     O .rwdata	00000028 alt_dev_null
00020708 g     F .text	0000002c alt_dcache_flush_all
00020020 g       *ABS*	00000000 stext
000209b8 g     F .text	00000100 __mcount_record
000217d4 g       *ABS*	00000000 __ram_rwdata_end
000217a4 g     O .rwdata	00000008 alt_dev_list
000214c4 g       *ABS*	00000000 __ram_rodata_end
00021c20 g       *ABS*	00000000 end
000214a4 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002053c g     F .text	000000a0 altera_avalon_jtag_uart_write
000214a4 g       *ABS*	00000000 etext
00021270 g     F .text	0000019c __call_exitprocs
00020020 g     F .text	0000001c _start
00021afc g     O .bss	00000004 _alt_tick_rate
00021b00 g     O .bss	00000004 _alt_nticks
0002032c g     F .text	00000040 alt_sys_init
0002110c g     F .text	00000164 __register_exitproc
00021698 g     O .rwdata	00000024 alt_gmon_data
0002020c g       .text	00000000 mcount
0002140c g     F .text	00000030 .hidden __mulsi3
000214c4 g       *ABS*	00000000 __ram_rwdata_start
000214a4 g       *ABS*	00000000 __ram_rodata_start
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
0002036c g     F .text	0000006c altera_avalon_jtag_uart_read_fd
00021c20 g       *ABS*	00000000 __alt_stack_base
000207b4 g     F .text	000000b0 alt_dev_llist_insert
00020cc0 g     F .text	000000b0 sbrk
00021ae4 g       *ABS*	00000000 __bss_start
000210e0 g     F .text	0000002c memset
0002003c g     F .text	00000060 main
00021aec g     O .bss	00000004 alt_envp
000203d8 g     F .text	0000006c altera_avalon_jtag_uart_write_fd
00040000 g       *ABS*	00000000 __alt_heap_limit
000217b0 g     O .rwdata	00000004 alt_errno
000214a4 g       *ABS*	00000000 __CTOR_END__
000214a4 g       *ABS*	00000000 __flash_rodata_start
000214a4 g       *ABS*	00000000 __DTOR_LIST__
000202e8 g     F .text	00000044 alt_irq_init
00020c30 g     F .text	00000090 alt_release_fd
00021094 g     F .text	00000020 atexit
000217d0 g     O .rwdata	00000004 _impure_ptr
00021ae4 g     O .bss	00000004 alt_argc
000208d0 g     F .text	0000006c _do_dtors
0002179c g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000217d4 g       *ABS*	00000000 _edata
00021c20 g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
000210b4 g     F .text	0000002c exit
00040000 g       *ABS*	00000000 __alt_data_end
0002143c g     F .text	00000068 _exit
00020f5c g     F .text	00000138 alt_alarm_start
00021b20 g     O .bss	00000100 __mcount_fn_head
00020c04 g     F .text	0000002c alt_icache_flush_all
0002020c g       .text	00000000 _mcount
000217c4 g     O .rwdata	00000008 alt_alarm_list
00020864 g     F .text	0000006c _do_ctors
00020624 g     F .text	000000e4 close
00020110 g     F .text	00000090 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2002c:	d6a5e714 	ori	gp,gp,38812
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20030:	00201100 	call	20110 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20034:	00201a00 	call	201a0 <alt_main>

00020038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20038:	003fff06 	br	20038 <alt_after_alt_main>

0002003c <main>:
#define SIM

// LED Peripheral
#define REG_DATA_OFFSET 1

int main(void){
   2003c:	f811883a 	mov	r8,ra
   20040:	002020c0 	call	2020c <_mcount>
   20044:	403f883a 	mov	ra,r8
   20048:	defffd04 	addi	sp,sp,-12
   2004c:	df000215 	stw	fp,8(sp)
   20050:	df000204 	addi	fp,sp,8
  unsigned int led = 0;
   20054:	e03ffe15 	stw	zero,-8(fp)
  unsigned int *p_led = (unsigned int *) PERIPHERAL_LED_0_BASE;
   20058:	008001b4 	movhi	r2,6
   2005c:	10840004 	addi	r2,r2,4096
   20060:	e0bfff15 	stw	r2,-4(fp)
#ifndef SIM
  printf("Embarcados++ \n");
#endif

  while(1){
      if (led < 4){
   20064:	e0bffe17 	ldw	r2,-8(fp)
   20068:	10800128 	cmpgeui	r2,r2,4
   2006c:	1000091e 	bne	r2,zero,20094 <main+0x58>
          *(p_led+REG_DATA_OFFSET) = (0x1 << led++);
   20070:	e0bfff17 	ldw	r2,-4(fp)
   20074:	10c00104 	addi	r3,r2,4
   20078:	e0bffe17 	ldw	r2,-8(fp)
   2007c:	11000044 	addi	r4,r2,1
   20080:	e13ffe15 	stw	r4,-8(fp)
   20084:	01000044 	movi	r4,1
   20088:	2084983a 	sll	r2,r4,r2
   2008c:	18800015 	stw	r2,0(r3)
   20090:	003ff406 	br	20064 <main+0x28>
#ifndef SIM
          usleep(500000); // remover durante a simulação
#endif
      }
      else{
          led = 0;
   20094:	e03ffe15 	stw	zero,-8(fp)
      }
  };
   20098:	003ff206 	br	20064 <main+0x28>

0002009c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2009c:	f811883a 	mov	r8,ra
   200a0:	002020c0 	call	2020c <_mcount>
   200a4:	403f883a 	mov	ra,r8
   200a8:	defffc04 	addi	sp,sp,-16
   200ac:	df000315 	stw	fp,12(sp)
   200b0:	df000304 	addi	fp,sp,12
   200b4:	e13ffd15 	stw	r4,-12(fp)
   200b8:	e17ffe15 	stw	r5,-8(fp)
   200bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   200c0:	e0fffe17 	ldw	r3,-8(fp)
   200c4:	e0bffd17 	ldw	r2,-12(fp)
   200c8:	18800c26 	beq	r3,r2,200fc <alt_load_section+0x60>
  {
    while( to != end )
   200cc:	00000806 	br	200f0 <alt_load_section+0x54>
    {
      *to++ = *from++;
   200d0:	e0bffe17 	ldw	r2,-8(fp)
   200d4:	10c00104 	addi	r3,r2,4
   200d8:	e0fffe15 	stw	r3,-8(fp)
   200dc:	e0fffd17 	ldw	r3,-12(fp)
   200e0:	19000104 	addi	r4,r3,4
   200e4:	e13ffd15 	stw	r4,-12(fp)
   200e8:	18c00017 	ldw	r3,0(r3)
   200ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   200f0:	e0fffe17 	ldw	r3,-8(fp)
   200f4:	e0bfff17 	ldw	r2,-4(fp)
   200f8:	18bff51e 	bne	r3,r2,200d0 <alt_load_section+0x34>
    {
      *to++ = *from++;
    }
  }
}
   200fc:	0001883a 	nop
   20100:	e037883a 	mov	sp,fp
   20104:	df000017 	ldw	fp,0(sp)
   20108:	dec00104 	addi	sp,sp,4
   2010c:	f800283a 	ret

00020110 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20110:	f811883a 	mov	r8,ra
   20114:	002020c0 	call	2020c <_mcount>
   20118:	403f883a 	mov	ra,r8
   2011c:	defffe04 	addi	sp,sp,-8
   20120:	dfc00115 	stw	ra,4(sp)
   20124:	df000015 	stw	fp,0(sp)
   20128:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2012c:	018000b4 	movhi	r6,2
   20130:	3185f504 	addi	r6,r6,6100
   20134:	014000b4 	movhi	r5,2
   20138:	29453104 	addi	r5,r5,5316
   2013c:	010000b4 	movhi	r4,2
   20140:	2105f504 	addi	r4,r4,6100
   20144:	002009c0 	call	2009c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   20148:	018000b4 	movhi	r6,2
   2014c:	31800804 	addi	r6,r6,32
   20150:	014000b4 	movhi	r5,2
   20154:	29400804 	addi	r5,r5,32
   20158:	010000b4 	movhi	r4,2
   2015c:	21000804 	addi	r4,r4,32
   20160:	002009c0 	call	2009c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   20164:	018000b4 	movhi	r6,2
   20168:	31853104 	addi	r6,r6,5316
   2016c:	014000b4 	movhi	r5,2
   20170:	29452904 	addi	r5,r5,5284
   20174:	010000b4 	movhi	r4,2
   20178:	21052904 	addi	r4,r4,5284
   2017c:	002009c0 	call	2009c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20180:	00207080 	call	20708 <alt_dcache_flush_all>
  alt_icache_flush_all();
   20184:	0020c040 	call	20c04 <alt_icache_flush_all>
}
   20188:	0001883a 	nop
   2018c:	e037883a 	mov	sp,fp
   20190:	dfc00117 	ldw	ra,4(sp)
   20194:	df000017 	ldw	fp,0(sp)
   20198:	dec00204 	addi	sp,sp,8
   2019c:	f800283a 	ret

000201a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   201a0:	f811883a 	mov	r8,ra
   201a4:	002020c0 	call	2020c <_mcount>
   201a8:	403f883a 	mov	ra,r8
   201ac:	defffd04 	addi	sp,sp,-12
   201b0:	dfc00215 	stw	ra,8(sp)
   201b4:	df000115 	stw	fp,4(sp)
   201b8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   201bc:	0009883a 	mov	r4,zero
   201c0:	00202e80 	call	202e8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   201c4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   201c8:	002032c0 	call	2032c <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   201cc:	00208640 	call	20864 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   201d0:	010000b4 	movhi	r4,2
   201d4:	21023404 	addi	r4,r4,2256
   201d8:	00210940 	call	21094 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   201dc:	d0a0d217 	ldw	r2,-31928(gp)
   201e0:	d0e0d317 	ldw	r3,-31924(gp)
   201e4:	d120d417 	ldw	r4,-31920(gp)
   201e8:	200d883a 	mov	r6,r4
   201ec:	180b883a 	mov	r5,r3
   201f0:	1009883a 	mov	r4,r2
   201f4:	002003c0 	call	2003c <main>
   201f8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   201fc:	01000044 	movi	r4,1
   20200:	00206240 	call	20624 <close>
  exit (result);
   20204:	e13fff17 	ldw	r4,-4(fp)
   20208:	00210b40 	call	210b4 <exit>

0002020c <_mcount>:
         * of values for bits 4:2 won't be even (aligning on cache line boundaries
         * will skew it).  Higher bits should be fairly random.
         */
        /* fn_head = mcount_fn_head + (((unsigned int)self_pc >> 5) & (HASH_BUCKETS - 1)); */

        srli    r2, ra, 3
   2020c:	f804d0fa 	srli	r2,ra,3
        movhi   r3, %hiadj(__mcount_fn_head)
   20210:	00c000b4 	movhi	r3,2
        addi    r3, r3, %lo(__mcount_fn_head)
   20214:	18c6c804 	addi	r3,r3,6944
        andi    r2, r2, 0xFC
   20218:	10803f0c 	andi	r2,r2,252
        add     r11, r2, r3
   2021c:	10d7883a 	add	r11,r2,r3
        /* The fast case is where we have already allocated a function arc, and so
         * also a function pointer.
         */

        /* First find the function being called (using self_pc) */
        mov     r10, r11
   20220:	5815883a 	mov	r10,r11
0:
        ldw     r10, 0(r10)
   20224:	52800017 	ldw	r10,0(r10)
        beq     r10, zero, .Lnew_arc
   20228:	50000726 	beq	r10,zero,20248 <_mcount+0x3c>
        ldw     r2, 4(r10)
   2022c:	50800117 	ldw	r2,4(r10)
        bne     r2, ra, 0b
   20230:	17fffc1e 	bne	r2,ra,20224 <_mcount+0x18>

        /* Found a function entry for this PC. Now look for an arc with a matching
         * from_pc value. There will always be at least one arc. */
        ldw     r3, 8(r10)
   20234:	50c00217 	ldw	r3,8(r10)
0:
        ldw     r2, 4(r3)
   20238:	18800117 	ldw	r2,4(r3)
        beq     r2, r8, .Lfound_arc
   2023c:	12001626 	beq	r2,r8,20298 <_mcount+0x8c>
        ldw     r3, 0(r3)
   20240:	18c00017 	ldw	r3,0(r3)
        bne     r3, zero, 0b
   20244:	183ffc1e 	bne	r3,zero,20238 <_mcount+0x2c>

.Lnew_arc:
        addi    sp, sp, -24
   20248:	defffa04 	addi	sp,sp,-24

.LCFI0:
        stw     ra, 0(sp)
   2024c:	dfc00015 	stw	ra,0(sp)
        stw     r4, 4(sp)
   20250:	d9000115 	stw	r4,4(sp)
        stw     r5, 8(sp)
   20254:	d9400215 	stw	r5,8(sp)
        stw     r6, 12(sp)
   20258:	d9800315 	stw	r6,12(sp)
        stw     r7, 16(sp)
   2025c:	d9c00415 	stw	r7,16(sp)
        stw     r8, 20(sp)
   20260:	da000515 	stw	r8,20(sp)

.LCFI1:
        /* __mcount_record(orig_ra, orig_r8, fn_entry, *fn_head); */
        mov     r4, ra
   20264:	f809883a 	mov	r4,ra
        mov     r5, r8
   20268:	400b883a 	mov	r5,r8
        mov     r6, r10
   2026c:	500d883a 	mov	r6,r10
        mov     r7, r11
   20270:	580f883a 	mov	r7,r11
        call     __mcount_record
   20274:	00209b80 	call	209b8 <__mcount_record>
        
        /* restore registers from the stack */
        ldw     ra, 0(sp)
   20278:	dfc00017 	ldw	ra,0(sp)
        ldw     r4, 4(sp)
   2027c:	d9000117 	ldw	r4,4(sp)
        ldw     r5, 8(sp)
   20280:	d9400217 	ldw	r5,8(sp)
        ldw     r6, 12(sp)
   20284:	d9800317 	ldw	r6,12(sp)
        ldw     r7, 16(sp)
   20288:	d9c00417 	ldw	r7,16(sp)
        ldw     r8, 20(sp)
   2028c:	da000517 	ldw	r8,20(sp)

        addi    sp, sp, 24
   20290:	dec00604 	addi	sp,sp,24

.LCFI2:
        ret
   20294:	f800283a 	ret

.Lfound_arc:
        /* We've found the correct arc record.  Increment the count and return */
        ldw     r2, 8(r3)
   20298:	18800217 	ldw	r2,8(r3)
        addi    r2, r2, 1
   2029c:	10800044 	addi	r2,r2,1
        stw     r2, 8(r3)
   202a0:	18800215 	stw	r2,8(r3)
        ret
   202a4:	f800283a 	ret

000202a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   202a8:	f811883a 	mov	r8,ra
   202ac:	002020c0 	call	2020c <_mcount>
   202b0:	403f883a 	mov	ra,r8
   202b4:	defffd04 	addi	sp,sp,-12
   202b8:	dfc00215 	stw	ra,8(sp)
   202bc:	df000115 	stw	fp,4(sp)
   202c0:	df000104 	addi	fp,sp,4
   202c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   202c8:	d1600204 	addi	r5,gp,-32760
   202cc:	e13fff17 	ldw	r4,-4(fp)
   202d0:	00207b40 	call	207b4 <alt_dev_llist_insert>
}
   202d4:	e037883a 	mov	sp,fp
   202d8:	dfc00117 	ldw	ra,4(sp)
   202dc:	df000017 	ldw	fp,0(sp)
   202e0:	dec00204 	addi	sp,sp,8
   202e4:	f800283a 	ret

000202e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   202e8:	f811883a 	mov	r8,ra
   202ec:	002020c0 	call	2020c <_mcount>
   202f0:	403f883a 	mov	ra,r8
   202f4:	defffd04 	addi	sp,sp,-12
   202f8:	dfc00215 	stw	ra,8(sp)
   202fc:	df000115 	stw	fp,4(sp)
   20300:	df000104 	addi	fp,sp,4
   20304:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   20308:	0020f2c0 	call	20f2c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2030c:	00800044 	movi	r2,1
   20310:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20314:	0001883a 	nop
   20318:	e037883a 	mov	sp,fp
   2031c:	dfc00117 	ldw	ra,4(sp)
   20320:	df000017 	ldw	fp,0(sp)
   20324:	dec00204 	addi	sp,sp,8
   20328:	f800283a 	ret

0002032c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2032c:	f811883a 	mov	r8,ra
   20330:	002020c0 	call	2020c <_mcount>
   20334:	403f883a 	mov	ra,r8
   20338:	defffe04 	addi	sp,sp,-8
   2033c:	dfc00115 	stw	ra,4(sp)
   20340:	df000015 	stw	fp,0(sp)
   20344:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   20348:	010000b4 	movhi	r4,2
   2034c:	21053104 	addi	r4,r4,5316
   20350:	00202a80 	call	202a8 <alt_dev_reg>
}
   20354:	0001883a 	nop
   20358:	e037883a 	mov	sp,fp
   2035c:	dfc00117 	ldw	ra,4(sp)
   20360:	df000017 	ldw	fp,0(sp)
   20364:	dec00204 	addi	sp,sp,8
   20368:	f800283a 	ret

0002036c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2036c:	f811883a 	mov	r8,ra
   20370:	002020c0 	call	2020c <_mcount>
   20374:	403f883a 	mov	ra,r8
   20378:	defffa04 	addi	sp,sp,-24
   2037c:	dfc00515 	stw	ra,20(sp)
   20380:	df000415 	stw	fp,16(sp)
   20384:	df000404 	addi	fp,sp,16
   20388:	e13ffd15 	stw	r4,-12(fp)
   2038c:	e17ffe15 	stw	r5,-8(fp)
   20390:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20394:	e0bffd17 	ldw	r2,-12(fp)
   20398:	10800017 	ldw	r2,0(r2)
   2039c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   203a0:	e0bffc17 	ldw	r2,-16(fp)
   203a4:	10c00a04 	addi	r3,r2,40
   203a8:	e0bffd17 	ldw	r2,-12(fp)
   203ac:	10800217 	ldw	r2,8(r2)
   203b0:	100f883a 	mov	r7,r2
   203b4:	e1bfff17 	ldw	r6,-4(fp)
   203b8:	e17ffe17 	ldw	r5,-8(fp)
   203bc:	1809883a 	mov	r4,r3
   203c0:	00204440 	call	20444 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   203c4:	e037883a 	mov	sp,fp
   203c8:	dfc00117 	ldw	ra,4(sp)
   203cc:	df000017 	ldw	fp,0(sp)
   203d0:	dec00204 	addi	sp,sp,8
   203d4:	f800283a 	ret

000203d8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   203d8:	f811883a 	mov	r8,ra
   203dc:	002020c0 	call	2020c <_mcount>
   203e0:	403f883a 	mov	ra,r8
   203e4:	defffa04 	addi	sp,sp,-24
   203e8:	dfc00515 	stw	ra,20(sp)
   203ec:	df000415 	stw	fp,16(sp)
   203f0:	df000404 	addi	fp,sp,16
   203f4:	e13ffd15 	stw	r4,-12(fp)
   203f8:	e17ffe15 	stw	r5,-8(fp)
   203fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20400:	e0bffd17 	ldw	r2,-12(fp)
   20404:	10800017 	ldw	r2,0(r2)
   20408:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2040c:	e0bffc17 	ldw	r2,-16(fp)
   20410:	10c00a04 	addi	r3,r2,40
   20414:	e0bffd17 	ldw	r2,-12(fp)
   20418:	10800217 	ldw	r2,8(r2)
   2041c:	100f883a 	mov	r7,r2
   20420:	e1bfff17 	ldw	r6,-4(fp)
   20424:	e17ffe17 	ldw	r5,-8(fp)
   20428:	1809883a 	mov	r4,r3
   2042c:	002053c0 	call	2053c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   20430:	e037883a 	mov	sp,fp
   20434:	dfc00117 	ldw	ra,4(sp)
   20438:	df000017 	ldw	fp,0(sp)
   2043c:	dec00204 	addi	sp,sp,8
   20440:	f800283a 	ret

00020444 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   20444:	f811883a 	mov	r8,ra
   20448:	002020c0 	call	2020c <_mcount>
   2044c:	403f883a 	mov	ra,r8
   20450:	defff704 	addi	sp,sp,-36
   20454:	df000815 	stw	fp,32(sp)
   20458:	df000804 	addi	fp,sp,32
   2045c:	e13ffc15 	stw	r4,-16(fp)
   20460:	e17ffd15 	stw	r5,-12(fp)
   20464:	e1bffe15 	stw	r6,-8(fp)
   20468:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   2046c:	e0bffc17 	ldw	r2,-16(fp)
   20470:	10800017 	ldw	r2,0(r2)
   20474:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   20478:	e0bffd17 	ldw	r2,-12(fp)
   2047c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   20480:	e0bffe17 	ldw	r2,-8(fp)
   20484:	e0fffd17 	ldw	r3,-12(fp)
   20488:	1885883a 	add	r2,r3,r2
   2048c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   20490:	00001206 	br	204dc <altera_avalon_jtag_uart_read+0x98>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   20494:	e0bff917 	ldw	r2,-28(fp)
   20498:	10800037 	ldwio	r2,0(r2)
   2049c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   204a0:	e0bffb17 	ldw	r2,-20(fp)
   204a4:	10a0000c 	andi	r2,r2,32768
   204a8:	10000626 	beq	r2,zero,204c4 <altera_avalon_jtag_uart_read+0x80>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   204ac:	e0bff817 	ldw	r2,-32(fp)
   204b0:	10c00044 	addi	r3,r2,1
   204b4:	e0fff815 	stw	r3,-32(fp)
   204b8:	e0fffb17 	ldw	r3,-20(fp)
   204bc:	10c00005 	stb	r3,0(r2)
   204c0:	00000606 	br	204dc <altera_avalon_jtag_uart_read+0x98>
    else if (ptr != buffer)
   204c4:	e0fff817 	ldw	r3,-32(fp)
   204c8:	e0bffd17 	ldw	r2,-12(fp)
   204cc:	1880071e 	bne	r3,r2,204ec <altera_avalon_jtag_uart_read+0xa8>
      break;
    else if(flags & O_NONBLOCK)
   204d0:	e0bfff17 	ldw	r2,-4(fp)
   204d4:	1090000c 	andi	r2,r2,16384
   204d8:	1000061e 	bne	r2,zero,204f4 <altera_avalon_jtag_uart_read+0xb0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   204dc:	e0fff817 	ldw	r3,-32(fp)
   204e0:	e0bffa17 	ldw	r2,-24(fp)
   204e4:	18bfeb36 	bltu	r3,r2,20494 <altera_avalon_jtag_uart_read+0x50>
   204e8:	00000306 	br	204f8 <altera_avalon_jtag_uart_read+0xb4>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   204ec:	0001883a 	nop
   204f0:	00000106 	br	204f8 <altera_avalon_jtag_uart_read+0xb4>
    else if(flags & O_NONBLOCK)
      break;   
   204f4:	0001883a 	nop
    
  }

  if (ptr != buffer)
   204f8:	e0fff817 	ldw	r3,-32(fp)
   204fc:	e0bffd17 	ldw	r2,-12(fp)
   20500:	18800426 	beq	r3,r2,20514 <altera_avalon_jtag_uart_read+0xd0>
    return ptr - buffer;
   20504:	e0fff817 	ldw	r3,-32(fp)
   20508:	e0bffd17 	ldw	r2,-12(fp)
   2050c:	1885c83a 	sub	r2,r3,r2
   20510:	00000606 	br	2052c <altera_avalon_jtag_uart_read+0xe8>
  else if (flags & O_NONBLOCK)
   20514:	e0bfff17 	ldw	r2,-4(fp)
   20518:	1090000c 	andi	r2,r2,16384
   2051c:	10000226 	beq	r2,zero,20528 <altera_avalon_jtag_uart_read+0xe4>
    return -EWOULDBLOCK;
   20520:	00bffd44 	movi	r2,-11
   20524:	00000106 	br	2052c <altera_avalon_jtag_uart_read+0xe8>
  else
    return -EIO;
   20528:	00bffec4 	movi	r2,-5
}
   2052c:	e037883a 	mov	sp,fp
   20530:	df000017 	ldw	fp,0(sp)
   20534:	dec00104 	addi	sp,sp,4
   20538:	f800283a 	ret

0002053c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2053c:	f811883a 	mov	r8,ra
   20540:	002020c0 	call	2020c <_mcount>
   20544:	403f883a 	mov	ra,r8
   20548:	defff904 	addi	sp,sp,-28
   2054c:	df000615 	stw	fp,24(sp)
   20550:	df000604 	addi	fp,sp,24
   20554:	e13ffc15 	stw	r4,-16(fp)
   20558:	e17ffd15 	stw	r5,-12(fp)
   2055c:	e1bffe15 	stw	r6,-8(fp)
   20560:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   20564:	e0bffc17 	ldw	r2,-16(fp)
   20568:	10800017 	ldw	r2,0(r2)
   2056c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   20570:	e0bffe17 	ldw	r2,-8(fp)
   20574:	e0fffd17 	ldw	r3,-12(fp)
   20578:	1885883a 	add	r2,r3,r2
   2057c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   20580:	00000e06 	br	205bc <altera_avalon_jtag_uart_write+0x80>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   20584:	e0bffa17 	ldw	r2,-24(fp)
   20588:	10800104 	addi	r2,r2,4
   2058c:	10800037 	ldwio	r2,0(r2)
   20590:	10bfffec 	andhi	r2,r2,65535
   20594:	10000926 	beq	r2,zero,205bc <altera_avalon_jtag_uart_write+0x80>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   20598:	e0fffa17 	ldw	r3,-24(fp)
   2059c:	e0bffd17 	ldw	r2,-12(fp)
   205a0:	11000044 	addi	r4,r2,1
   205a4:	e13ffd15 	stw	r4,-12(fp)
   205a8:	10800003 	ldbu	r2,0(r2)
   205ac:	10803fcc 	andi	r2,r2,255
   205b0:	1080201c 	xori	r2,r2,128
   205b4:	10bfe004 	addi	r2,r2,-128
   205b8:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   205bc:	e0fffd17 	ldw	r3,-12(fp)
   205c0:	e0bffb17 	ldw	r2,-20(fp)
   205c4:	18bfef36 	bltu	r3,r2,20584 <altera_avalon_jtag_uart_write+0x48>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   205c8:	e0bffe17 	ldw	r2,-8(fp)
}
   205cc:	e037883a 	mov	sp,fp
   205d0:	df000017 	ldw	fp,0(sp)
   205d4:	dec00104 	addi	sp,sp,4
   205d8:	f800283a 	ret

000205dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   205dc:	f811883a 	mov	r8,ra
   205e0:	002020c0 	call	2020c <_mcount>
   205e4:	403f883a 	mov	ra,r8
   205e8:	defffe04 	addi	sp,sp,-8
   205ec:	dfc00115 	stw	ra,4(sp)
   205f0:	df000015 	stw	fp,0(sp)
   205f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   205f8:	d0a00517 	ldw	r2,-32748(gp)
   205fc:	10000326 	beq	r2,zero,2060c <alt_get_errno+0x30>
   20600:	d0a00517 	ldw	r2,-32748(gp)
   20604:	103ee83a 	callr	r2
   20608:	00000106 	br	20610 <alt_get_errno+0x34>
   2060c:	d0a0da04 	addi	r2,gp,-31896
}
   20610:	e037883a 	mov	sp,fp
   20614:	dfc00117 	ldw	ra,4(sp)
   20618:	df000017 	ldw	fp,0(sp)
   2061c:	dec00204 	addi	sp,sp,8
   20620:	f800283a 	ret

00020624 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   20624:	f811883a 	mov	r8,ra
   20628:	002020c0 	call	2020c <_mcount>
   2062c:	403f883a 	mov	ra,r8
   20630:	defffb04 	addi	sp,sp,-20
   20634:	dfc00415 	stw	ra,16(sp)
   20638:	df000315 	stw	fp,12(sp)
   2063c:	df000304 	addi	fp,sp,12
   20640:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   20644:	e0bfff17 	ldw	r2,-4(fp)
   20648:	10000816 	blt	r2,zero,2066c <close+0x48>
   2064c:	01400304 	movi	r5,12
   20650:	e13fff17 	ldw	r4,-4(fp)
   20654:	002140c0 	call	2140c <__mulsi3>
   20658:	1007883a 	mov	r3,r2
   2065c:	008000b4 	movhi	r2,2
   20660:	10854604 	addi	r2,r2,5400
   20664:	1885883a 	add	r2,r3,r2
   20668:	00000106 	br	20670 <close+0x4c>
   2066c:	0005883a 	mov	r2,zero
   20670:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   20674:	e0bffd17 	ldw	r2,-12(fp)
   20678:	10001926 	beq	r2,zero,206e0 <close+0xbc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2067c:	e0bffd17 	ldw	r2,-12(fp)
   20680:	10800017 	ldw	r2,0(r2)
   20684:	10800417 	ldw	r2,16(r2)
   20688:	10000626 	beq	r2,zero,206a4 <close+0x80>
   2068c:	e0bffd17 	ldw	r2,-12(fp)
   20690:	10800017 	ldw	r2,0(r2)
   20694:	10800417 	ldw	r2,16(r2)
   20698:	e13ffd17 	ldw	r4,-12(fp)
   2069c:	103ee83a 	callr	r2
   206a0:	00000106 	br	206a8 <close+0x84>
   206a4:	0005883a 	mov	r2,zero
   206a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   206ac:	e13fff17 	ldw	r4,-4(fp)
   206b0:	0020c300 	call	20c30 <alt_release_fd>
    if (rval < 0)
   206b4:	e0bffe17 	ldw	r2,-8(fp)
   206b8:	1000070e 	bge	r2,zero,206d8 <close+0xb4>
    {
      ALT_ERRNO = -rval;
   206bc:	00205dc0 	call	205dc <alt_get_errno>
   206c0:	1007883a 	mov	r3,r2
   206c4:	e0bffe17 	ldw	r2,-8(fp)
   206c8:	0085c83a 	sub	r2,zero,r2
   206cc:	18800015 	stw	r2,0(r3)
      return -1;
   206d0:	00bfffc4 	movi	r2,-1
   206d4:	00000706 	br	206f4 <close+0xd0>
    }
    return 0;
   206d8:	0005883a 	mov	r2,zero
   206dc:	00000506 	br	206f4 <close+0xd0>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   206e0:	00205dc0 	call	205dc <alt_get_errno>
   206e4:	1007883a 	mov	r3,r2
   206e8:	00801444 	movi	r2,81
   206ec:	18800015 	stw	r2,0(r3)
    return -1;
   206f0:	00bfffc4 	movi	r2,-1
  }
}
   206f4:	e037883a 	mov	sp,fp
   206f8:	dfc00117 	ldw	ra,4(sp)
   206fc:	df000017 	ldw	fp,0(sp)
   20700:	dec00204 	addi	sp,sp,8
   20704:	f800283a 	ret

00020708 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   20708:	f811883a 	mov	r8,ra
   2070c:	002020c0 	call	2020c <_mcount>
   20710:	403f883a 	mov	ra,r8
   20714:	deffff04 	addi	sp,sp,-4
   20718:	df000015 	stw	fp,0(sp)
   2071c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   20720:	0001883a 	nop
   20724:	e037883a 	mov	sp,fp
   20728:	df000017 	ldw	fp,0(sp)
   2072c:	dec00104 	addi	sp,sp,4
   20730:	f800283a 	ret

00020734 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   20734:	f811883a 	mov	r8,ra
   20738:	002020c0 	call	2020c <_mcount>
   2073c:	403f883a 	mov	ra,r8
   20740:	defffc04 	addi	sp,sp,-16
   20744:	df000315 	stw	fp,12(sp)
   20748:	df000304 	addi	fp,sp,12
   2074c:	e13ffd15 	stw	r4,-12(fp)
   20750:	e17ffe15 	stw	r5,-8(fp)
   20754:	e1bfff15 	stw	r6,-4(fp)
  return len;
   20758:	e0bfff17 	ldw	r2,-4(fp)
}
   2075c:	e037883a 	mov	sp,fp
   20760:	df000017 	ldw	fp,0(sp)
   20764:	dec00104 	addi	sp,sp,4
   20768:	f800283a 	ret

0002076c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2076c:	f811883a 	mov	r8,ra
   20770:	002020c0 	call	2020c <_mcount>
   20774:	403f883a 	mov	ra,r8
   20778:	defffe04 	addi	sp,sp,-8
   2077c:	dfc00115 	stw	ra,4(sp)
   20780:	df000015 	stw	fp,0(sp)
   20784:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20788:	d0a00517 	ldw	r2,-32748(gp)
   2078c:	10000326 	beq	r2,zero,2079c <alt_get_errno+0x30>
   20790:	d0a00517 	ldw	r2,-32748(gp)
   20794:	103ee83a 	callr	r2
   20798:	00000106 	br	207a0 <alt_get_errno+0x34>
   2079c:	d0a0da04 	addi	r2,gp,-31896
}
   207a0:	e037883a 	mov	sp,fp
   207a4:	dfc00117 	ldw	ra,4(sp)
   207a8:	df000017 	ldw	fp,0(sp)
   207ac:	dec00204 	addi	sp,sp,8
   207b0:	f800283a 	ret

000207b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   207b4:	f811883a 	mov	r8,ra
   207b8:	002020c0 	call	2020c <_mcount>
   207bc:	403f883a 	mov	ra,r8
   207c0:	defffa04 	addi	sp,sp,-24
   207c4:	dfc00515 	stw	ra,20(sp)
   207c8:	df000415 	stw	fp,16(sp)
   207cc:	df000404 	addi	fp,sp,16
   207d0:	e13ffe15 	stw	r4,-8(fp)
   207d4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   207d8:	e0bffe17 	ldw	r2,-8(fp)
   207dc:	10000326 	beq	r2,zero,207ec <alt_dev_llist_insert+0x38>
   207e0:	e0bffe17 	ldw	r2,-8(fp)
   207e4:	10800217 	ldw	r2,8(r2)
   207e8:	1000061e 	bne	r2,zero,20804 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   207ec:	002076c0 	call	2076c <alt_get_errno>
   207f0:	1007883a 	mov	r3,r2
   207f4:	00800584 	movi	r2,22
   207f8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   207fc:	00bffa84 	movi	r2,-22
   20800:	00001306 	br	20850 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   20804:	e0bffe17 	ldw	r2,-8(fp)
   20808:	e0ffff17 	ldw	r3,-4(fp)
   2080c:	e0fffc15 	stw	r3,-16(fp)
   20810:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   20814:	e0bffd17 	ldw	r2,-12(fp)
   20818:	e0fffc17 	ldw	r3,-16(fp)
   2081c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   20820:	e0bffc17 	ldw	r2,-16(fp)
   20824:	10c00017 	ldw	r3,0(r2)
   20828:	e0bffd17 	ldw	r2,-12(fp)
   2082c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   20830:	e0bffc17 	ldw	r2,-16(fp)
   20834:	10800017 	ldw	r2,0(r2)
   20838:	e0fffd17 	ldw	r3,-12(fp)
   2083c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   20840:	e0bffc17 	ldw	r2,-16(fp)
   20844:	e0fffd17 	ldw	r3,-12(fp)
   20848:	10c00015 	stw	r3,0(r2)

  return 0;  
   2084c:	0005883a 	mov	r2,zero
}
   20850:	e037883a 	mov	sp,fp
   20854:	dfc00117 	ldw	ra,4(sp)
   20858:	df000017 	ldw	fp,0(sp)
   2085c:	dec00204 	addi	sp,sp,8
   20860:	f800283a 	ret

00020864 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   20864:	f811883a 	mov	r8,ra
   20868:	002020c0 	call	2020c <_mcount>
   2086c:	403f883a 	mov	ra,r8
   20870:	defffd04 	addi	sp,sp,-12
   20874:	dfc00215 	stw	ra,8(sp)
   20878:	df000115 	stw	fp,4(sp)
   2087c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   20880:	008000b4 	movhi	r2,2
   20884:	10852804 	addi	r2,r2,5280
   20888:	e0bfff15 	stw	r2,-4(fp)
   2088c:	00000606 	br	208a8 <_do_ctors+0x44>
        (*ctor) (); 
   20890:	e0bfff17 	ldw	r2,-4(fp)
   20894:	10800017 	ldw	r2,0(r2)
   20898:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2089c:	e0bfff17 	ldw	r2,-4(fp)
   208a0:	10bfff04 	addi	r2,r2,-4
   208a4:	e0bfff15 	stw	r2,-4(fp)
   208a8:	e0ffff17 	ldw	r3,-4(fp)
   208ac:	008000b4 	movhi	r2,2
   208b0:	10852904 	addi	r2,r2,5284
   208b4:	18bff62e 	bgeu	r3,r2,20890 <_do_ctors+0x2c>
        (*ctor) (); 
}
   208b8:	0001883a 	nop
   208bc:	e037883a 	mov	sp,fp
   208c0:	dfc00117 	ldw	ra,4(sp)
   208c4:	df000017 	ldw	fp,0(sp)
   208c8:	dec00204 	addi	sp,sp,8
   208cc:	f800283a 	ret

000208d0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   208d0:	f811883a 	mov	r8,ra
   208d4:	002020c0 	call	2020c <_mcount>
   208d8:	403f883a 	mov	ra,r8
   208dc:	defffd04 	addi	sp,sp,-12
   208e0:	dfc00215 	stw	ra,8(sp)
   208e4:	df000115 	stw	fp,4(sp)
   208e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   208ec:	008000b4 	movhi	r2,2
   208f0:	10852804 	addi	r2,r2,5280
   208f4:	e0bfff15 	stw	r2,-4(fp)
   208f8:	00000606 	br	20914 <_do_dtors+0x44>
        (*dtor) (); 
   208fc:	e0bfff17 	ldw	r2,-4(fp)
   20900:	10800017 	ldw	r2,0(r2)
   20904:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   20908:	e0bfff17 	ldw	r2,-4(fp)
   2090c:	10bfff04 	addi	r2,r2,-4
   20910:	e0bfff15 	stw	r2,-4(fp)
   20914:	e0ffff17 	ldw	r3,-4(fp)
   20918:	008000b4 	movhi	r2,2
   2091c:	10852904 	addi	r2,r2,5284
   20920:	18bff62e 	bgeu	r3,r2,208fc <_do_dtors+0x2c>
        (*dtor) (); 
}
   20924:	0001883a 	nop
   20928:	e037883a 	mov	sp,fp
   2092c:	dfc00117 	ldw	ra,4(sp)
   20930:	df000017 	ldw	fp,0(sp)
   20934:	dec00204 	addi	sp,sp,8
   20938:	f800283a 	ret

0002093c <mcount_allocate>:
 * because that's interrupt safe (and because we never free anything).
 *
 * For speed, we allocate a block of data at once.
 */
static __inline__ void * mcount_allocate(unsigned int size)
{
   2093c:	defffc04 	addi	sp,sp,-16
   20940:	dfc00315 	stw	ra,12(sp)
   20944:	df000215 	stw	fp,8(sp)
   20948:	df000204 	addi	fp,sp,8
   2094c:	e13fff15 	stw	r4,-4(fp)
  void * data;

  if (size > mcount_slab_size)
   20950:	d0a0d717 	ldw	r2,-31908(gp)
   20954:	1007883a 	mov	r3,r2
   20958:	e0bfff17 	ldw	r2,-4(fp)
   2095c:	1880052e 	bgeu	r3,r2,20974 <mcount_allocate+0x38>
  {
    mcount_slab_ptr = sbrk(MCOUNT_SLAB_INCREMENT);
   20960:	0100ff04 	movi	r4,1020
   20964:	0020cc00 	call	20cc0 <sbrk>
   20968:	d0a0d615 	stw	r2,-31912(gp)
    mcount_slab_size = MCOUNT_SLAB_INCREMENT;
   2096c:	0080ff04 	movi	r2,1020
   20970:	d0a0d715 	stw	r2,-31908(gp)
  }

  data = mcount_slab_ptr;
   20974:	d0a0d617 	ldw	r2,-31912(gp)
   20978:	e0bffe15 	stw	r2,-8(fp)
  mcount_slab_ptr += size;
   2097c:	d0e0d617 	ldw	r3,-31912(gp)
   20980:	e0bfff17 	ldw	r2,-4(fp)
   20984:	1885883a 	add	r2,r3,r2
   20988:	d0a0d615 	stw	r2,-31912(gp)
  mcount_slab_size -= size;
   2098c:	d0a0d717 	ldw	r2,-31908(gp)
   20990:	1007883a 	mov	r3,r2
   20994:	e0bfff17 	ldw	r2,-4(fp)
   20998:	1885c83a 	sub	r2,r3,r2
   2099c:	d0a0d715 	stw	r2,-31908(gp)

  return data;
   209a0:	e0bffe17 	ldw	r2,-8(fp)
}
   209a4:	e037883a 	mov	sp,fp
   209a8:	dfc00117 	ldw	ra,4(sp)
   209ac:	df000017 	ldw	fp,0(sp)
   209b0:	dec00204 	addi	sp,sp,8
   209b4:	f800283a 	ret

000209b8 <__mcount_record>:
 *
 * The fast case, where we have already allocated a function arc, has been
 * handled by the assmebler code.
 */
void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)
{
   209b8:	defff604 	addi	sp,sp,-40
   209bc:	dfc00915 	stw	ra,36(sp)
   209c0:	df000815 	stw	fp,32(sp)
   209c4:	df000804 	addi	fp,sp,32
   209c8:	e13ffc15 	stw	r4,-16(fp)
   209cc:	e17ffd15 	stw	r5,-12(fp)
   209d0:	e1bffe15 	stw	r6,-8(fp)
   209d4:	e1ffff15 	stw	r7,-4(fp)
  struct mcount_fn_arc * arc_entry;

  /* Keep trying to start up the PC sampler until it is running.
   * (It can't start until the timer is going).
   */
  if (pcsample_need_init)
   209d8:	d0a00617 	ldw	r2,-32744(gp)
   209dc:	10000326 	beq	r2,zero,209ec <__mcount_record+0x34>
  {
    pcsample_need_init = 0;
   209e0:	d0200615 	stw	zero,-32744(gp)
    pcsample_need_init = nios2_pcsample_init();
   209e4:	0020ab80 	call	20ab8 <nios2_pcsample_init>
   209e8:	d0a00615 	stw	r2,-32744(gp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   209ec:	0005303a 	rdctl	r2,status
   209f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   209f4:	e0fffb17 	ldw	r3,-20(fp)
   209f8:	00bfff84 	movi	r2,-2
   209fc:	1884703a 	and	r2,r3,r2
   20a00:	1001703a 	wrctl	status,r2
  
  return context;
   20a04:	e0bffb17 	ldw	r2,-20(fp)
   * It's safe for the code above to be stepping through the chain and be
   * interrupted by this code modifying it - there is an edge case which will
   * leave two copies of the same arc on the list (both with count=1), but
   * this is dealt with on the host.
   */
  context = alt_irq_disable_all();
   20a08:	e0bff915 	stw	r2,-28(fp)

  if (fn_entry == NULL)
   20a0c:	e0bffe17 	ldw	r2,-8(fp)
   20a10:	10000f1e 	bne	r2,zero,20a50 <__mcount_record+0x98>
  {
    /* Add it to the list of functions we must output later. */
    fn_entry = (struct mcount_fn_entry *)mcount_allocate(sizeof(struct mcount_fn_entry));
   20a14:	01000304 	movi	r4,12
   20a18:	002093c0 	call	2093c <mcount_allocate>
   20a1c:	e0bffe15 	stw	r2,-8(fp)

    fn_entry->self_pc = self_pc;
   20a20:	e0bffe17 	ldw	r2,-8(fp)
   20a24:	e0fffc17 	ldw	r3,-16(fp)
   20a28:	10c00115 	stw	r3,4(r2)
    fn_entry->arc_head = NULL;
   20a2c:	e0bffe17 	ldw	r2,-8(fp)
   20a30:	10000215 	stw	zero,8(r2)

    fn_entry->next = *fn_head;
   20a34:	e0bfff17 	ldw	r2,-4(fp)
   20a38:	10c00017 	ldw	r3,0(r2)
   20a3c:	e0bffe17 	ldw	r2,-8(fp)
   20a40:	10c00015 	stw	r3,0(r2)
    *fn_head = fn_entry;
   20a44:	e0bfff17 	ldw	r2,-4(fp)
   20a48:	e0fffe17 	ldw	r3,-8(fp)
   20a4c:	10c00015 	stw	r3,0(r2)
  }

  /* We will need a new list entry - if there was a list entry before
   * then the assembler code would have handled it. */
  arc_entry = (struct mcount_fn_arc *)mcount_allocate(sizeof(struct mcount_fn_arc));
   20a50:	01000304 	movi	r4,12
   20a54:	002093c0 	call	2093c <mcount_allocate>
   20a58:	e0bffa15 	stw	r2,-24(fp)

  arc_entry->from_pc = from_pc;
   20a5c:	e0bffa17 	ldw	r2,-24(fp)
   20a60:	e0fffd17 	ldw	r3,-12(fp)
   20a64:	10c00115 	stw	r3,4(r2)
  arc_entry->count = 1;
   20a68:	e0bffa17 	ldw	r2,-24(fp)
   20a6c:	00c00044 	movi	r3,1
   20a70:	10c00215 	stw	r3,8(r2)

  arc_entry->next = fn_entry->arc_head;
   20a74:	e0bffe17 	ldw	r2,-8(fp)
   20a78:	10c00217 	ldw	r3,8(r2)
   20a7c:	e0bffa17 	ldw	r2,-24(fp)
   20a80:	10c00015 	stw	r3,0(r2)
  fn_entry->arc_head = arc_entry;
   20a84:	e0bffe17 	ldw	r2,-8(fp)
   20a88:	e0fffa17 	ldw	r3,-24(fp)
   20a8c:	10c00215 	stw	r3,8(r2)
   20a90:	e0bff917 	ldw	r2,-28(fp)
   20a94:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20a98:	e0bff817 	ldw	r2,-32(fp)
   20a9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(context);
}
   20aa0:	0001883a 	nop
   20aa4:	e037883a 	mov	sp,fp
   20aa8:	dfc00117 	ldw	ra,4(sp)
   20aac:	df000017 	ldw	fp,0(sp)
   20ab0:	dec00204 	addi	sp,sp,8
   20ab4:	f800283a 	ret

00020ab8 <nios2_pcsample_init>:
 * It is called the first time mcount is called, and on subsequent calls to
 * mcount until it returns zero. It initializes the pc histogram and turns on
 * timer driven pc sampling.
 */
static int nios2_pcsample_init(void)
{
   20ab8:	defffc04 	addi	sp,sp,-16
   20abc:	dfc00315 	stw	ra,12(sp)
   20ac0:	df000215 	stw	fp,8(sp)
   20ac4:	df000204 	addi	fp,sp,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   20ac8:	d0a0d817 	ldw	r2,-31904(gp)
  unsigned int pcsamples_size; 

  /* We sample the PC every tick */
  unsigned int prof_rate = alt_ticks_per_second();
   20acc:	e0bffe15 	stw	r2,-8(fp)
  if (prof_rate == 0)
   20ad0:	e0bffe17 	ldw	r2,-8(fp)
   20ad4:	1000021e 	bne	r2,zero,20ae0 <nios2_pcsample_init+0x28>
    return 1;
   20ad8:	00800044 	movi	r2,1
   20adc:	00002406 	br	20b70 <nios2_pcsample_init+0xb8>

  /* allocate the histogram buffer s_pcsamples */
  pcsamples_size = (s_high_pc - s_low_pc)/PCSAMPLE_BYTES_PER_BUCKET;
   20ae0:	d0e00817 	ldw	r3,-32736(gp)
   20ae4:	d0a00717 	ldw	r2,-32740(gp)
   20ae8:	1885c83a 	sub	r2,r3,r2
   20aec:	1004d17a 	srli	r2,r2,5
   20af0:	e0bfff15 	stw	r2,-4(fp)
  s_pcsamples    = (unsigned short*)sbrk(pcsamples_size * sizeof(unsigned short));
   20af4:	e0bfff17 	ldw	r2,-4(fp)
   20af8:	1085883a 	add	r2,r2,r2
   20afc:	1009883a 	mov	r4,r2
   20b00:	0020cc00 	call	20cc0 <sbrk>
   20b04:	d0a0d515 	stw	r2,-31916(gp)

  if (s_pcsamples != 0)
   20b08:	d0a0d517 	ldw	r2,-31916(gp)
   20b0c:	10001726 	beq	r2,zero,20b6c <nios2_pcsample_init+0xb4>
  {
    /* initialize the buffer to zero */
    memset(s_pcsamples, 0, pcsamples_size * sizeof(unsigned short));
   20b10:	d0e0d517 	ldw	r3,-31916(gp)
   20b14:	e0bfff17 	ldw	r2,-4(fp)
   20b18:	1085883a 	add	r2,r2,r2
   20b1c:	100d883a 	mov	r6,r2
   20b20:	000b883a 	mov	r5,zero
   20b24:	1809883a 	mov	r4,r3
   20b28:	00210e00 	call	210e0 <memset>

    alt_gmon_data[GMON_DATA_PROFILE_DATA] = (int)s_pcsamples;
   20b2c:	d0a0d517 	ldw	r2,-31916(gp)
   20b30:	1007883a 	mov	r3,r2
   20b34:	008000b4 	movhi	r2,2
   20b38:	1085a604 	addi	r2,r2,5784
   20b3c:	10c00215 	stw	r3,8(r2)
    alt_gmon_data[GMON_DATA_PROFILE_RATE] = prof_rate;
   20b40:	008000b4 	movhi	r2,2
   20b44:	1085a604 	addi	r2,r2,5784
   20b48:	e0fffe17 	ldw	r3,-8(fp)
   20b4c:	10c00615 	stw	r3,24(r2)

    /* Sample every tick (it's cheap) */
    alt_alarm_start(&s_nios2_pcsample_alarm, 1, nios2_pcsample, 0);
   20b50:	000f883a 	mov	r7,zero
   20b54:	018000b4 	movhi	r6,2
   20b58:	3182e104 	addi	r6,r6,2948
   20b5c:	01400044 	movi	r5,1
   20b60:	010000b4 	movhi	r4,2
   20b64:	2106c204 	addi	r4,r4,6920
   20b68:	0020f5c0 	call	20f5c <alt_alarm_start>
  }

  return 0;
   20b6c:	0005883a 	mov	r2,zero
}
   20b70:	e037883a 	mov	sp,fp
   20b74:	dfc00117 	ldw	ra,4(sp)
   20b78:	df000017 	ldw	fp,0(sp)
   20b7c:	dec00204 	addi	sp,sp,8
   20b80:	f800283a 	ret

00020b84 <nios2_pcsample>:

/*
 * Sample the PC value and store it in the histogram
 */
static alt_u32 nios2_pcsample(void* context)
{
   20b84:	defffc04 	addi	sp,sp,-16
   20b88:	df000315 	stw	fp,12(sp)
   20b8c:	df000304 	addi	fp,sp,12
   20b90:	e13fff15 	stw	r4,-4(fp)
  unsigned int pc=0;
   20b94:	e03ffd15 	stw	zero,-12(fp)

  /* read the exception return address - this will be
   * inaccurate if there are nested interrupts but we
   * assume that this is rare and the inaccuracy will
   * not be great */
  NIOS2_READ_EA(pc);
   20b98:	e805883a 	mov	r2,ea
   20b9c:	e0bffd15 	stw	r2,-12(fp)

  /*
   * If we're within the profilable range then increment the relevant
   * bucket in the histogram
   */
  if (pc >= s_low_pc && pc < s_high_pc && s_pcsamples != 0)
   20ba0:	d0a00717 	ldw	r2,-32740(gp)
   20ba4:	e0fffd17 	ldw	r3,-12(fp)
   20ba8:	18801136 	bltu	r3,r2,20bf0 <nios2_pcsample+0x6c>
   20bac:	d0a00817 	ldw	r2,-32736(gp)
   20bb0:	e0fffd17 	ldw	r3,-12(fp)
   20bb4:	18800e2e 	bgeu	r3,r2,20bf0 <nios2_pcsample+0x6c>
   20bb8:	d0a0d517 	ldw	r2,-31916(gp)
   20bbc:	10000c26 	beq	r2,zero,20bf0 <nios2_pcsample+0x6c>
  {
    bucket = (pc - s_low_pc)/PCSAMPLE_BYTES_PER_BUCKET;
   20bc0:	d0a00717 	ldw	r2,-32740(gp)
   20bc4:	e0fffd17 	ldw	r3,-12(fp)
   20bc8:	1885c83a 	sub	r2,r3,r2
   20bcc:	1004d17a 	srli	r2,r2,5
   20bd0:	e0bffe15 	stw	r2,-8(fp)
    s_pcsamples[bucket]++;
   20bd4:	d0e0d517 	ldw	r3,-31916(gp)
   20bd8:	e0bffe17 	ldw	r2,-8(fp)
   20bdc:	1085883a 	add	r2,r2,r2
   20be0:	1885883a 	add	r2,r3,r2
   20be4:	10c0000b 	ldhu	r3,0(r2)
   20be8:	18c00044 	addi	r3,r3,1
   20bec:	10c0000d 	sth	r3,0(r2)
  }

  /* Sample every tick */
  return 1;
   20bf0:	00800044 	movi	r2,1
}
   20bf4:	e037883a 	mov	sp,fp
   20bf8:	df000017 	ldw	fp,0(sp)
   20bfc:	dec00104 	addi	sp,sp,4
   20c00:	f800283a 	ret

00020c04 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   20c04:	f811883a 	mov	r8,ra
   20c08:	002020c0 	call	2020c <_mcount>
   20c0c:	403f883a 	mov	ra,r8
   20c10:	deffff04 	addi	sp,sp,-4
   20c14:	df000015 	stw	fp,0(sp)
   20c18:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   20c1c:	0001883a 	nop
   20c20:	e037883a 	mov	sp,fp
   20c24:	df000017 	ldw	fp,0(sp)
   20c28:	dec00104 	addi	sp,sp,4
   20c2c:	f800283a 	ret

00020c30 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   20c30:	f811883a 	mov	r8,ra
   20c34:	002020c0 	call	2020c <_mcount>
   20c38:	403f883a 	mov	ra,r8
   20c3c:	defffc04 	addi	sp,sp,-16
   20c40:	dfc00315 	stw	ra,12(sp)
   20c44:	df000215 	stw	fp,8(sp)
   20c48:	dc000115 	stw	r16,4(sp)
   20c4c:	df000204 	addi	fp,sp,8
   20c50:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   20c54:	e0bffe17 	ldw	r2,-8(fp)
   20c58:	108000d0 	cmplti	r2,r2,3
   20c5c:	1000111e 	bne	r2,zero,20ca4 <alt_release_fd+0x74>
  {
    alt_fd_list[fd].fd_flags = 0;
   20c60:	040000b4 	movhi	r16,2
   20c64:	84054604 	addi	r16,r16,5400
   20c68:	e0bffe17 	ldw	r2,-8(fp)
   20c6c:	01400304 	movi	r5,12
   20c70:	1009883a 	mov	r4,r2
   20c74:	002140c0 	call	2140c <__mulsi3>
   20c78:	8085883a 	add	r2,r16,r2
   20c7c:	10800204 	addi	r2,r2,8
   20c80:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   20c84:	040000b4 	movhi	r16,2
   20c88:	84054604 	addi	r16,r16,5400
   20c8c:	e0bffe17 	ldw	r2,-8(fp)
   20c90:	01400304 	movi	r5,12
   20c94:	1009883a 	mov	r4,r2
   20c98:	002140c0 	call	2140c <__mulsi3>
   20c9c:	8085883a 	add	r2,r16,r2
   20ca0:	10000015 	stw	zero,0(r2)
  }
}
   20ca4:	0001883a 	nop
   20ca8:	e6ffff04 	addi	sp,fp,-4
   20cac:	dfc00217 	ldw	ra,8(sp)
   20cb0:	df000117 	ldw	fp,4(sp)
   20cb4:	dc000017 	ldw	r16,0(sp)
   20cb8:	dec00304 	addi	sp,sp,12
   20cbc:	f800283a 	ret

00020cc0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   20cc0:	defff904 	addi	sp,sp,-28
   20cc4:	df000615 	stw	fp,24(sp)
   20cc8:	df000604 	addi	fp,sp,24
   20ccc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20cd0:	0005303a 	rdctl	r2,status
   20cd4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20cd8:	e0fffe17 	ldw	r3,-8(fp)
   20cdc:	00bfff84 	movi	r2,-2
   20ce0:	1884703a 	and	r2,r3,r2
   20ce4:	1001703a 	wrctl	status,r2
  
  return context;
   20ce8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   20cec:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   20cf0:	d0a00917 	ldw	r2,-32732(gp)
   20cf4:	10c000c4 	addi	r3,r2,3
   20cf8:	00bfff04 	movi	r2,-4
   20cfc:	1884703a 	and	r2,r3,r2
   20d00:	d0a00915 	stw	r2,-32732(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   20d04:	d0e00917 	ldw	r3,-32732(gp)
   20d08:	e0bfff17 	ldw	r2,-4(fp)
   20d0c:	1887883a 	add	r3,r3,r2
   20d10:	00800134 	movhi	r2,4
   20d14:	10800004 	addi	r2,r2,0
   20d18:	10c0062e 	bgeu	r2,r3,20d34 <sbrk+0x74>
   20d1c:	e0bffb17 	ldw	r2,-20(fp)
   20d20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20d24:	e0bffa17 	ldw	r2,-24(fp)
   20d28:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   20d2c:	00bfffc4 	movi	r2,-1
   20d30:	00000b06 	br	20d60 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   20d34:	d0a00917 	ldw	r2,-32732(gp)
   20d38:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   20d3c:	d0e00917 	ldw	r3,-32732(gp)
   20d40:	e0bfff17 	ldw	r2,-4(fp)
   20d44:	1885883a 	add	r2,r3,r2
   20d48:	d0a00915 	stw	r2,-32732(gp)
   20d4c:	e0bffb17 	ldw	r2,-20(fp)
   20d50:	e0bffc15 	stw	r2,-16(fp)
   20d54:	e0bffc17 	ldw	r2,-16(fp)
   20d58:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   20d5c:	e0bffd17 	ldw	r2,-12(fp)
} 
   20d60:	e037883a 	mov	sp,fp
   20d64:	df000017 	ldw	fp,0(sp)
   20d68:	dec00104 	addi	sp,sp,4
   20d6c:	f800283a 	ret

00020d70 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   20d70:	f811883a 	mov	r8,ra
   20d74:	002020c0 	call	2020c <_mcount>
   20d78:	403f883a 	mov	ra,r8
   20d7c:	defffa04 	addi	sp,sp,-24
   20d80:	df000515 	stw	fp,20(sp)
   20d84:	df000504 	addi	fp,sp,20
   20d88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20d8c:	0005303a 	rdctl	r2,status
   20d90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20d94:	e0fffc17 	ldw	r3,-16(fp)
   20d98:	00bfff84 	movi	r2,-2
   20d9c:	1884703a 	and	r2,r3,r2
   20da0:	1001703a 	wrctl	status,r2
  
  return context;
   20da4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   20da8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   20dac:	e0bfff17 	ldw	r2,-4(fp)
   20db0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   20db4:	e0bffd17 	ldw	r2,-12(fp)
   20db8:	10800017 	ldw	r2,0(r2)
   20dbc:	e0fffd17 	ldw	r3,-12(fp)
   20dc0:	18c00117 	ldw	r3,4(r3)
   20dc4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   20dc8:	e0bffd17 	ldw	r2,-12(fp)
   20dcc:	10800117 	ldw	r2,4(r2)
   20dd0:	e0fffd17 	ldw	r3,-12(fp)
   20dd4:	18c00017 	ldw	r3,0(r3)
   20dd8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   20ddc:	e0bffd17 	ldw	r2,-12(fp)
   20de0:	e0fffd17 	ldw	r3,-12(fp)
   20de4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   20de8:	e0bffd17 	ldw	r2,-12(fp)
   20dec:	e0fffd17 	ldw	r3,-12(fp)
   20df0:	10c00015 	stw	r3,0(r2)
   20df4:	e0bffb17 	ldw	r2,-20(fp)
   20df8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20dfc:	e0bffe17 	ldw	r2,-8(fp)
   20e00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   20e04:	0001883a 	nop
   20e08:	e037883a 	mov	sp,fp
   20e0c:	df000017 	ldw	fp,0(sp)
   20e10:	dec00104 	addi	sp,sp,4
   20e14:	f800283a 	ret

00020e18 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   20e18:	f811883a 	mov	r8,ra
   20e1c:	002020c0 	call	2020c <_mcount>
   20e20:	403f883a 	mov	ra,r8
   20e24:	defffb04 	addi	sp,sp,-20
   20e28:	dfc00415 	stw	ra,16(sp)
   20e2c:	df000315 	stw	fp,12(sp)
   20e30:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   20e34:	d0a00a17 	ldw	r2,-32728(gp)
   20e38:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   20e3c:	d0a0d917 	ldw	r2,-31900(gp)
   20e40:	10800044 	addi	r2,r2,1
   20e44:	d0a0d915 	stw	r2,-31900(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   20e48:	00002e06 	br	20f04 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   20e4c:	e0bffd17 	ldw	r2,-12(fp)
   20e50:	10800017 	ldw	r2,0(r2)
   20e54:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   20e58:	e0bffd17 	ldw	r2,-12(fp)
   20e5c:	10800403 	ldbu	r2,16(r2)
   20e60:	10803fcc 	andi	r2,r2,255
   20e64:	10000426 	beq	r2,zero,20e78 <alt_tick+0x60>
   20e68:	d0a0d917 	ldw	r2,-31900(gp)
   20e6c:	1000021e 	bne	r2,zero,20e78 <alt_tick+0x60>
    {
      alarm->rollover = 0;
   20e70:	e0bffd17 	ldw	r2,-12(fp)
   20e74:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   20e78:	e0bffd17 	ldw	r2,-12(fp)
   20e7c:	10800217 	ldw	r2,8(r2)
   20e80:	d0e0d917 	ldw	r3,-31900(gp)
   20e84:	18801d36 	bltu	r3,r2,20efc <alt_tick+0xe4>
   20e88:	e0bffd17 	ldw	r2,-12(fp)
   20e8c:	10800403 	ldbu	r2,16(r2)
   20e90:	10803fcc 	andi	r2,r2,255
   20e94:	1000191e 	bne	r2,zero,20efc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   20e98:	e0bffd17 	ldw	r2,-12(fp)
   20e9c:	10800317 	ldw	r2,12(r2)
   20ea0:	e0fffd17 	ldw	r3,-12(fp)
   20ea4:	18c00517 	ldw	r3,20(r3)
   20ea8:	1809883a 	mov	r4,r3
   20eac:	103ee83a 	callr	r2
   20eb0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   20eb4:	e0bfff17 	ldw	r2,-4(fp)
   20eb8:	1000031e 	bne	r2,zero,20ec8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   20ebc:	e13ffd17 	ldw	r4,-12(fp)
   20ec0:	0020d700 	call	20d70 <alt_alarm_stop>
   20ec4:	00000d06 	br	20efc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   20ec8:	e0bffd17 	ldw	r2,-12(fp)
   20ecc:	10c00217 	ldw	r3,8(r2)
   20ed0:	e0bfff17 	ldw	r2,-4(fp)
   20ed4:	1887883a 	add	r3,r3,r2
   20ed8:	e0bffd17 	ldw	r2,-12(fp)
   20edc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   20ee0:	e0bffd17 	ldw	r2,-12(fp)
   20ee4:	10c00217 	ldw	r3,8(r2)
   20ee8:	d0a0d917 	ldw	r2,-31900(gp)
   20eec:	1880032e 	bgeu	r3,r2,20efc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   20ef0:	e0bffd17 	ldw	r2,-12(fp)
   20ef4:	00c00044 	movi	r3,1
   20ef8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   20efc:	e0bffe17 	ldw	r2,-8(fp)
   20f00:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   20f04:	e0fffd17 	ldw	r3,-12(fp)
   20f08:	d0a00a04 	addi	r2,gp,-32728
   20f0c:	18bfcf1e 	bne	r3,r2,20e4c <alt_tick+0x34>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   20f10:	0001883a 	nop
}
   20f14:	0001883a 	nop
   20f18:	e037883a 	mov	sp,fp
   20f1c:	dfc00117 	ldw	ra,4(sp)
   20f20:	df000017 	ldw	fp,0(sp)
   20f24:	dec00204 	addi	sp,sp,8
   20f28:	f800283a 	ret

00020f2c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   20f2c:	f811883a 	mov	r8,ra
   20f30:	002020c0 	call	2020c <_mcount>
   20f34:	403f883a 	mov	ra,r8
   20f38:	deffff04 	addi	sp,sp,-4
   20f3c:	df000015 	stw	fp,0(sp)
   20f40:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   20f44:	000170fa 	wrctl	ienable,zero
}
   20f48:	0001883a 	nop
   20f4c:	e037883a 	mov	sp,fp
   20f50:	df000017 	ldw	fp,0(sp)
   20f54:	dec00104 	addi	sp,sp,4
   20f58:	f800283a 	ret

00020f5c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   20f5c:	f811883a 	mov	r8,ra
   20f60:	002020c0 	call	2020c <_mcount>
   20f64:	403f883a 	mov	ra,r8
   20f68:	defff504 	addi	sp,sp,-44
   20f6c:	df000a15 	stw	fp,40(sp)
   20f70:	df000a04 	addi	fp,sp,40
   20f74:	e13ffc15 	stw	r4,-16(fp)
   20f78:	e17ffd15 	stw	r5,-12(fp)
   20f7c:	e1bffe15 	stw	r6,-8(fp)
   20f80:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   20f84:	e03ff615 	stw	zero,-40(fp)
   20f88:	d0a0d817 	ldw	r2,-31904(gp)
  
  if (alt_ticks_per_second ())
   20f8c:	10003c26 	beq	r2,zero,21080 <alt_alarm_start+0x124>
  {
    if (alarm)
   20f90:	e0bffc17 	ldw	r2,-16(fp)
   20f94:	10003826 	beq	r2,zero,21078 <alt_alarm_start+0x11c>
    {
      alarm->callback = callback;
   20f98:	e0bffc17 	ldw	r2,-16(fp)
   20f9c:	e0fffe17 	ldw	r3,-8(fp)
   20fa0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   20fa4:	e0bffc17 	ldw	r2,-16(fp)
   20fa8:	e0ffff17 	ldw	r3,-4(fp)
   20fac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20fb0:	0005303a 	rdctl	r2,status
   20fb4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20fb8:	e0fff917 	ldw	r3,-28(fp)
   20fbc:	00bfff84 	movi	r2,-2
   20fc0:	1884703a 	and	r2,r3,r2
   20fc4:	1001703a 	wrctl	status,r2
  
  return context;
   20fc8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   20fcc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   20fd0:	d0a0d917 	ldw	r2,-31900(gp)
      
      current_nticks = alt_nticks();
   20fd4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   20fd8:	e0fffd17 	ldw	r3,-12(fp)
   20fdc:	e0bff617 	ldw	r2,-40(fp)
   20fe0:	1885883a 	add	r2,r3,r2
   20fe4:	10c00044 	addi	r3,r2,1
   20fe8:	e0bffc17 	ldw	r2,-16(fp)
   20fec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   20ff0:	e0bffc17 	ldw	r2,-16(fp)
   20ff4:	10c00217 	ldw	r3,8(r2)
   20ff8:	e0bff617 	ldw	r2,-40(fp)
   20ffc:	1880042e 	bgeu	r3,r2,21010 <alt_alarm_start+0xb4>
      {
        alarm->rollover = 1;
   21000:	e0bffc17 	ldw	r2,-16(fp)
   21004:	00c00044 	movi	r3,1
   21008:	10c00405 	stb	r3,16(r2)
   2100c:	00000206 	br	21018 <alt_alarm_start+0xbc>
      }
      else
      {
        alarm->rollover = 0;
   21010:	e0bffc17 	ldw	r2,-16(fp)
   21014:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   21018:	e0bffc17 	ldw	r2,-16(fp)
   2101c:	d0e00a04 	addi	r3,gp,-32728
   21020:	e0fffa15 	stw	r3,-24(fp)
   21024:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21028:	e0bffb17 	ldw	r2,-20(fp)
   2102c:	e0fffa17 	ldw	r3,-24(fp)
   21030:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   21034:	e0bffa17 	ldw	r2,-24(fp)
   21038:	10c00017 	ldw	r3,0(r2)
   2103c:	e0bffb17 	ldw	r2,-20(fp)
   21040:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21044:	e0bffa17 	ldw	r2,-24(fp)
   21048:	10800017 	ldw	r2,0(r2)
   2104c:	e0fffb17 	ldw	r3,-20(fp)
   21050:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   21054:	e0bffa17 	ldw	r2,-24(fp)
   21058:	e0fffb17 	ldw	r3,-20(fp)
   2105c:	10c00015 	stw	r3,0(r2)
   21060:	e0bff817 	ldw	r2,-32(fp)
   21064:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21068:	e0bff717 	ldw	r2,-36(fp)
   2106c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   21070:	0005883a 	mov	r2,zero
   21074:	00000306 	br	21084 <alt_alarm_start+0x128>
    }
    else
    {
      return -EINVAL;
   21078:	00bffa84 	movi	r2,-22
   2107c:	00000106 	br	21084 <alt_alarm_start+0x128>
    }
  }
  else
  {
    return -ENOTSUP;
   21080:	00bfde84 	movi	r2,-134
  }
}
   21084:	e037883a 	mov	sp,fp
   21088:	df000017 	ldw	fp,0(sp)
   2108c:	dec00104 	addi	sp,sp,4
   21090:	f800283a 	ret

00021094 <atexit>:
   21094:	f811883a 	mov	r8,ra
   21098:	002020c0 	call	2020c <_mcount>
   2109c:	403f883a 	mov	ra,r8
   210a0:	000f883a 	mov	r7,zero
   210a4:	200b883a 	mov	r5,r4
   210a8:	000d883a 	mov	r6,zero
   210ac:	0009883a 	mov	r4,zero
   210b0:	002110c1 	jmpi	2110c <__register_exitproc>

000210b4 <exit>:
   210b4:	f811883a 	mov	r8,ra
   210b8:	002020c0 	call	2020c <_mcount>
   210bc:	403f883a 	mov	ra,r8
   210c0:	defffe04 	addi	sp,sp,-8
   210c4:	dfc00115 	stw	ra,4(sp)
   210c8:	dc000015 	stw	r16,0(sp)
   210cc:	000b883a 	mov	r5,zero
   210d0:	2021883a 	mov	r16,r4
   210d4:	00212700 	call	21270 <__call_exitprocs>
   210d8:	8009883a 	mov	r4,r16
   210dc:	002143c0 	call	2143c <_exit>

000210e0 <memset>:
   210e0:	f811883a 	mov	r8,ra
   210e4:	002020c0 	call	2020c <_mcount>
   210e8:	403f883a 	mov	ra,r8
   210ec:	2005883a 	mov	r2,r4
   210f0:	2007883a 	mov	r3,r4
   210f4:	218d883a 	add	r6,r4,r6
   210f8:	19800326 	beq	r3,r6,21108 <memset+0x28>
   210fc:	19400005 	stb	r5,0(r3)
   21100:	18c00044 	addi	r3,r3,1
   21104:	003ffc06 	br	210f8 <memset+0x18>
   21108:	f800283a 	ret

0002110c <__register_exitproc>:
   2110c:	f811883a 	mov	r8,ra
   21110:	002020c0 	call	2020c <_mcount>
   21114:	403f883a 	mov	ra,r8
   21118:	defff904 	addi	sp,sp,-28
   2111c:	dfc00615 	stw	ra,24(sp)
   21120:	dd400515 	stw	r21,20(sp)
   21124:	dd000415 	stw	r20,16(sp)
   21128:	dcc00315 	stw	r19,12(sp)
   2112c:	dc800215 	stw	r18,8(sp)
   21130:	dc400115 	stw	r17,4(sp)
   21134:	dc000015 	stw	r16,0(sp)
   21138:	008000b4 	movhi	r2,2
   2113c:	1085f304 	addi	r2,r2,6092
   21140:	10c00017 	ldw	r3,0(r2)
   21144:	202b883a 	mov	r21,r4
   21148:	2823883a 	mov	r17,r5
   2114c:	1c000c17 	ldw	r16,48(r3)
   21150:	3027883a 	mov	r19,r6
   21154:	3825883a 	mov	r18,r7
   21158:	1029883a 	mov	r20,r2
   2115c:	8000021e 	bne	r16,zero,21168 <__register_exitproc+0x5c>
   21160:	1c000d04 	addi	r16,r3,52
   21164:	1c000c15 	stw	r16,48(r3)
   21168:	80800117 	ldw	r2,4(r16)
   2116c:	00c007c4 	movi	r3,31
   21170:	1880110e 	bge	r3,r2,211b8 <__register_exitproc+0xac>
   21174:	00800034 	movhi	r2,0
   21178:	10800004 	addi	r2,r2,0
   2117c:	1000021e 	bne	r2,zero,21188 <__register_exitproc+0x7c>
   21180:	00bfffc4 	movi	r2,-1
   21184:	00003106 	br	2124c <__register_exitproc+0x140>
   21188:	01002304 	movi	r4,140
   2118c:	00000000 	call	0 <__alt_mem_onchip_memory2_1-0x20000>
   21190:	1021883a 	mov	r16,r2
   21194:	103ffa26 	beq	r2,zero,21180 <__register_exitproc+0x74>
   21198:	10000115 	stw	zero,4(r2)
   2119c:	a0800017 	ldw	r2,0(r20)
   211a0:	10c00c17 	ldw	r3,48(r2)
   211a4:	80c00015 	stw	r3,0(r16)
   211a8:	14000c15 	stw	r16,48(r2)
   211ac:	80002215 	stw	zero,136(r16)
   211b0:	a8001d26 	beq	r21,zero,21228 <__register_exitproc+0x11c>
   211b4:	00000606 	br	211d0 <__register_exitproc+0xc4>
   211b8:	a8001b26 	beq	r21,zero,21228 <__register_exitproc+0x11c>
   211bc:	80802217 	ldw	r2,136(r16)
   211c0:	1000091e 	bne	r2,zero,211e8 <__register_exitproc+0xdc>
   211c4:	00800034 	movhi	r2,0
   211c8:	10800004 	addi	r2,r2,0
   211cc:	103fec26 	beq	r2,zero,21180 <__register_exitproc+0x74>
   211d0:	01004204 	movi	r4,264
   211d4:	00000000 	call	0 <__alt_mem_onchip_memory2_1-0x20000>
   211d8:	103fe926 	beq	r2,zero,21180 <__register_exitproc+0x74>
   211dc:	10004015 	stw	zero,256(r2)
   211e0:	10004115 	stw	zero,260(r2)
   211e4:	80802215 	stw	r2,136(r16)
   211e8:	81400117 	ldw	r5,4(r16)
   211ec:	01000044 	movi	r4,1
   211f0:	2947883a 	add	r3,r5,r5
   211f4:	18c7883a 	add	r3,r3,r3
   211f8:	10c7883a 	add	r3,r2,r3
   211fc:	1cc00015 	stw	r19,0(r3)
   21200:	2148983a 	sll	r4,r4,r5
   21204:	11404017 	ldw	r5,256(r2)
   21208:	290ab03a 	or	r5,r5,r4
   2120c:	11404015 	stw	r5,256(r2)
   21210:	1c802015 	stw	r18,128(r3)
   21214:	00c00084 	movi	r3,2
   21218:	a8c0031e 	bne	r21,r3,21228 <__register_exitproc+0x11c>
   2121c:	10c04117 	ldw	r3,260(r2)
   21220:	1908b03a 	or	r4,r3,r4
   21224:	11004115 	stw	r4,260(r2)
   21228:	80800117 	ldw	r2,4(r16)
   2122c:	10c00044 	addi	r3,r2,1
   21230:	10800084 	addi	r2,r2,2
   21234:	1085883a 	add	r2,r2,r2
   21238:	1085883a 	add	r2,r2,r2
   2123c:	80c00115 	stw	r3,4(r16)
   21240:	80a1883a 	add	r16,r16,r2
   21244:	84400015 	stw	r17,0(r16)
   21248:	0005883a 	mov	r2,zero
   2124c:	dfc00617 	ldw	ra,24(sp)
   21250:	dd400517 	ldw	r21,20(sp)
   21254:	dd000417 	ldw	r20,16(sp)
   21258:	dcc00317 	ldw	r19,12(sp)
   2125c:	dc800217 	ldw	r18,8(sp)
   21260:	dc400117 	ldw	r17,4(sp)
   21264:	dc000017 	ldw	r16,0(sp)
   21268:	dec00704 	addi	sp,sp,28
   2126c:	f800283a 	ret

00021270 <__call_exitprocs>:
   21270:	f811883a 	mov	r8,ra
   21274:	002020c0 	call	2020c <_mcount>
   21278:	403f883a 	mov	ra,r8
   2127c:	defff504 	addi	sp,sp,-44
   21280:	dfc00a15 	stw	ra,40(sp)
   21284:	df000915 	stw	fp,36(sp)
   21288:	ddc00815 	stw	r23,32(sp)
   2128c:	dd800715 	stw	r22,28(sp)
   21290:	dd400615 	stw	r21,24(sp)
   21294:	dd000515 	stw	r20,20(sp)
   21298:	dcc00415 	stw	r19,16(sp)
   2129c:	dc800315 	stw	r18,12(sp)
   212a0:	dc400215 	stw	r17,8(sp)
   212a4:	dc000115 	stw	r16,4(sp)
   212a8:	050000b4 	movhi	r20,2
   212ac:	d9000015 	stw	r4,0(sp)
   212b0:	2825883a 	mov	r18,r5
   212b4:	a505f304 	addi	r20,r20,6092
   212b8:	a4400017 	ldw	r17,0(r20)
   212bc:	8cc00c17 	ldw	r19,48(r17)
   212c0:	8c400c04 	addi	r17,r17,48
   212c4:	98004526 	beq	r19,zero,213dc <__call_exitprocs+0x16c>
   212c8:	9c000117 	ldw	r16,4(r19)
   212cc:	00900034 	movhi	r2,16384
   212d0:	10bfffc4 	addi	r2,r2,-1
   212d4:	9d402217 	ldw	r21,136(r19)
   212d8:	85bfffc4 	addi	r22,r16,-1
   212dc:	80a1883a 	add	r16,r16,r2
   212e0:	8421883a 	add	r16,r16,r16
   212e4:	8421883a 	add	r16,r16,r16
   212e8:	ac2f883a 	add	r23,r21,r16
   212ec:	84000204 	addi	r16,r16,8
   212f0:	9c21883a 	add	r16,r19,r16
   212f4:	b0002716 	blt	r22,zero,21394 <__call_exitprocs+0x124>
   212f8:	90000726 	beq	r18,zero,21318 <__call_exitprocs+0xa8>
   212fc:	a800041e 	bne	r21,zero,21310 <__call_exitprocs+0xa0>
   21300:	b5bfffc4 	addi	r22,r22,-1
   21304:	bdffff04 	addi	r23,r23,-4
   21308:	843fff04 	addi	r16,r16,-4
   2130c:	003ff906 	br	212f4 <__call_exitprocs+0x84>
   21310:	b9002017 	ldw	r4,128(r23)
   21314:	913ffa1e 	bne	r18,r4,21300 <__call_exitprocs+0x90>
   21318:	99000117 	ldw	r4,4(r19)
   2131c:	82000017 	ldw	r8,0(r16)
   21320:	213fffc4 	addi	r4,r4,-1
   21324:	b100021e 	bne	r22,r4,21330 <__call_exitprocs+0xc0>
   21328:	9d800115 	stw	r22,4(r19)
   2132c:	00000106 	br	21334 <__call_exitprocs+0xc4>
   21330:	80000015 	stw	zero,0(r16)
   21334:	403ff226 	beq	r8,zero,21300 <__call_exitprocs+0x90>
   21338:	9f000117 	ldw	fp,4(r19)
   2133c:	a8000526 	beq	r21,zero,21354 <__call_exitprocs+0xe4>
   21340:	00800044 	movi	r2,1
   21344:	1592983a 	sll	r9,r2,r22
   21348:	a9404017 	ldw	r5,256(r21)
   2134c:	494a703a 	and	r5,r9,r5
   21350:	2800021e 	bne	r5,zero,2135c <__call_exitprocs+0xec>
   21354:	403ee83a 	callr	r8
   21358:	00000906 	br	21380 <__call_exitprocs+0x110>
   2135c:	a9004117 	ldw	r4,260(r21)
   21360:	4908703a 	and	r4,r9,r4
   21364:	2000041e 	bne	r4,zero,21378 <__call_exitprocs+0x108>
   21368:	b9400017 	ldw	r5,0(r23)
   2136c:	d9000017 	ldw	r4,0(sp)
   21370:	403ee83a 	callr	r8
   21374:	00000206 	br	21380 <__call_exitprocs+0x110>
   21378:	b9000017 	ldw	r4,0(r23)
   2137c:	403ee83a 	callr	r8
   21380:	99000117 	ldw	r4,4(r19)
   21384:	e13fcc1e 	bne	fp,r4,212b8 <__call_exitprocs+0x48>
   21388:	89000017 	ldw	r4,0(r17)
   2138c:	993fdc26 	beq	r19,r4,21300 <__call_exitprocs+0x90>
   21390:	003fc906 	br	212b8 <__call_exitprocs+0x48>
   21394:	00800034 	movhi	r2,0
   21398:	10800004 	addi	r2,r2,0
   2139c:	10000f26 	beq	r2,zero,213dc <__call_exitprocs+0x16c>
   213a0:	99400117 	ldw	r5,4(r19)
   213a4:	99000017 	ldw	r4,0(r19)
   213a8:	2800091e 	bne	r5,zero,213d0 <__call_exitprocs+0x160>
   213ac:	20000826 	beq	r4,zero,213d0 <__call_exitprocs+0x160>
   213b0:	89000015 	stw	r4,0(r17)
   213b4:	a8000226 	beq	r21,zero,213c0 <__call_exitprocs+0x150>
   213b8:	a809883a 	mov	r4,r21
   213bc:	00000000 	call	0 <__alt_mem_onchip_memory2_1-0x20000>
   213c0:	9809883a 	mov	r4,r19
   213c4:	00000000 	call	0 <__alt_mem_onchip_memory2_1-0x20000>
   213c8:	8cc00017 	ldw	r19,0(r17)
   213cc:	003fbd06 	br	212c4 <__call_exitprocs+0x54>
   213d0:	9823883a 	mov	r17,r19
   213d4:	2027883a 	mov	r19,r4
   213d8:	003fba06 	br	212c4 <__call_exitprocs+0x54>
   213dc:	dfc00a17 	ldw	ra,40(sp)
   213e0:	df000917 	ldw	fp,36(sp)
   213e4:	ddc00817 	ldw	r23,32(sp)
   213e8:	dd800717 	ldw	r22,28(sp)
   213ec:	dd400617 	ldw	r21,24(sp)
   213f0:	dd000517 	ldw	r20,20(sp)
   213f4:	dcc00417 	ldw	r19,16(sp)
   213f8:	dc800317 	ldw	r18,12(sp)
   213fc:	dc400217 	ldw	r17,8(sp)
   21400:	dc000117 	ldw	r16,4(sp)
   21404:	dec00b04 	addi	sp,sp,44
   21408:	f800283a 	ret

0002140c <__mulsi3>:
   2140c:	f811883a 	mov	r8,ra
   21410:	002020c0 	call	2020c <_mcount>
   21414:	403f883a 	mov	ra,r8
   21418:	0005883a 	mov	r2,zero
   2141c:	20000626 	beq	r4,zero,21438 <__mulsi3+0x2c>
   21420:	20c0004c 	andi	r3,r4,1
   21424:	2008d07a 	srli	r4,r4,1
   21428:	18000126 	beq	r3,zero,21430 <__mulsi3+0x24>
   2142c:	1145883a 	add	r2,r2,r5
   21430:	294b883a 	add	r5,r5,r5
   21434:	203ffa1e 	bne	r4,zero,21420 <__mulsi3+0x14>
   21438:	f800283a 	ret

0002143c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2143c:	f811883a 	mov	r8,ra
   21440:	002020c0 	call	2020c <_mcount>
   21444:	403f883a 	mov	ra,r8
   21448:	defffd04 	addi	sp,sp,-12
   2144c:	df000215 	stw	fp,8(sp)
   21450:	df000204 	addi	fp,sp,8
   21454:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   21458:	0001883a 	nop
   2145c:	e0bfff17 	ldw	r2,-4(fp)
   21460:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   21464:	e0bffe17 	ldw	r2,-8(fp)

#if defined(NIOS2_HAS_DEBUG_STUB) && (defined(ALT_BREAK_ON_EXIT) || defined(ALT_PROVIDE_GMON))

  register int r3 asm ("r3") = (1 << 2);
   21468:	00c00104 	movi	r3,4

#ifdef ALT_PROVIDE_GMON
  extern unsigned int alt_gmon_data[];
  register int r4 asm ("r4") = (int)alt_gmon_data;
   2146c:	010000b4 	movhi	r4,2
   21470:	2105a604 	addi	r4,r4,5784
  r3 |= (1 << 4);
   21474:	18c00414 	ori	r3,r3,16
#define ALT_GMON_DATA ,"r"(r4)
#else
#define ALT_GMON_DATA
#endif /* ALT_PROVIDE_GMON */

  if (r2) {
   21478:	100b883a 	mov	r5,r2
   2147c:	28000226 	beq	r5,zero,21488 <_exit+0x4c>
    ALT_SIM_FAIL();
   21480:	002af070 	cmpltui	zero,zero,43969
   21484:	00000106 	br	2148c <_exit+0x50>
  } else {
    ALT_SIM_PASS();
   21488:	002af0b0 	cmpltui	zero,zero,43970
  }

  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */
   2148c:	01400234 	movhi	r5,8
   21490:	29684804 	addi	r5,r5,-24288
   21494:	297fffc4 	addi	r5,r5,-1
   21498:	017ffe16 	blt	zero,r5,21494 <_exit+0x58>

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );
   2149c:	003da0ba 	break	2
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   214a0:	003fff06 	br	214a0 <_exit+0x64>
