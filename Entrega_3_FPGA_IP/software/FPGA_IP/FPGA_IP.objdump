
FPGA_IP.elf:     file format elf32-littlenios2
FPGA_IP.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000048f0 memsz 0x000048f0 flags r-x
    LOAD off    0x00005910 vaddr 0x00024910 paddr 0x0002533c align 2**12
         filesz 0x00000a2c memsz 0x00000a2c flags rw-
    LOAD off    0x00006d68 vaddr 0x00025d68 paddr 0x00025d68 align 2**12
         filesz 0x00000000 memsz 0x00000044 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  0000633c  2**0
                  CONTENTS
  2 .text         00004898  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  000248b8  000248b8  000058b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a2c  00024910  0002533c  00005910  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  00025d68  00025d68  00006d68  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_1 00000000  00025dac  00025dac  0000633c  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  00040000  00040000  0000633c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000633c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000008c8  00000000  00000000  00006360  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000148be  00000000  00000000  00006c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005358  00000000  00000000  0001b4e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005fe4  00000000  00000000  0002083e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001274  00000000  00000000  00026824  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001fb0  00000000  00000000  00027a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  00029a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0002e524  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005d0  00000000  00000000  0002e568  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00030b3e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00030b41  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00030b4d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00030b4e  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00030b4f  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00030b5a  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00030b65  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  00030b70  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003a  00000000  00000000  00030b7a  2**0
                  CONTENTS, READONLY
 27 .jdi          00005089  00000000  00000000  00030bb4  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00041368  00000000  00000000  00035c3d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
000248b8 l    d  .rodata	00000000 .rodata
00024910 l    d  .rwdata	00000000 .rwdata
00025d68 l    d  .bss	00000000 .bss
00025dac l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00040000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FPGA_IP_bsp//obj/HAL/src/crt0.o
00020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00020244 l     F .text	00000008 __fp_unlock
00020258 l     F .text	0000019c __sinit.part.1
000203f4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00024910 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00022ee4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00022ff8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00023024 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00023118 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00023200 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000232ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000234c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00025338 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0002376c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000238a8 l     F .text	00000034 alt_dev_reg
000252e4 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00023d00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00023ec0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00024020 l     F .text	0000003c alt_get_errno
0002405c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00022cb4 g     F .text	00000054 _isatty_r
00023404 g     F .text	0000007c alt_main
000200d8 g     F .text	000000c0 _puts_r
000229dc g     F .text	00000060 _lseek_r
0002533c g       *ABS*	00000000 __flash_rwdata_start
00025dac g       *ABS*	00000000 __alt_heap_start
00021f90 g     F .text	0000005c __sseek
000205a4 g     F .text	00000010 __sinit
000203fc g     F .text	00000078 __sfmoreglue
000234a4 g     F .text	00000024 __malloc_unlock
0002167c g     F .text	0000015c memmove
0002058c g     F .text	00000018 _cleanup
000242a4 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022c58 g     F .text	0000005c _fstat_r
00025d74 g     O .bss	00000004 errno
00021f0c g     F .text	00000008 __seofread
00025d7c g     O .bss	00000004 alt_argv
0002d310 g       *ABS*	00000000 _gp
0002373c g     F .text	00000030 usleep
00025164 g     O .rwdata	00000180 alt_fd_list
000242c8 g     F .text	00000090 alt_find_dev
00021534 g     F .text	00000148 memcpy
0002024c g     F .text	0000000c _cleanup_r
00023fa4 g     F .text	0000007c alt_io_redirect
000248b8 g       *ABS*	00000000 __DTOR_END__
00020198 g     F .text	00000014 puts
00023a08 g     F .text	000000ec altera_avalon_jtag_uart_read
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00022e00 g     F .text	00000064 .hidden __udivsi3
00023154 g     F .text	000000ac isatty
00025d70 g     O .bss	00000004 __malloc_top_pad
000205f4 g     F .text	000004c8 __sfvwrite_r
00021e64 g     F .text	00000054 _sbrk_r
00022bf8 g     F .text	00000060 _read_r
00025330 g     O .rwdata	00000004 alt_max_fd
000221fc g     F .text	000000f0 _fclose_r
00022578 g     F .text	00000030 fflush
00025d6c g     O .bss	00000004 __malloc_max_sbrked_mem
00023328 g     F .text	000000dc lseek
00025310 g     O .rwdata	00000004 _global_impure_ptr
00021900 g     F .text	00000564 _realloc_r
00025dac g       *ABS*	00000000 __bss_end
000205c4 g     F .text	00000018 __fp_lock_all
0002513c g     O .rwdata	00000028 alt_dev_null
00023ce0 g     F .text	00000020 alt_dcache_flush_all
0002533c g       *ABS*	00000000 __ram_rwdata_end
00025328 g     O .rwdata	00000008 alt_dev_list
000237a8 g     F .text	00000100 write
00024910 g       *ABS*	00000000 __ram_rodata_end
00023060 g     F .text	000000b8 fstat
00022e64 g     F .text	00000058 .hidden __umodsi3
00025dac g       *ABS*	00000000 end
000248b8 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
00023af4 g     F .text	00000094 altera_avalon_jtag_uart_write
000205b4 g     F .text	00000004 __sfp_lock_acquire
00021450 g     F .text	000000e4 memchr
000226cc g     F .text	00000310 _free_r
00024704 g     F .text	00000180 __call_exitprocs
00025318 g     O .rwdata	00000004 __malloc_sbrk_base
00020020 g     F .text	0000003c _start
00023504 g     F .text	00000104 read
00023914 g     F .text	00000034 alt_sys_init
000245ec g     F .text	00000118 __register_exitproc
00022ebc g     F .text	00000028 .hidden __mulsi3
00024910 g       *ABS*	00000000 __ram_rwdata_start
000248b8 g       *ABS*	00000000 __ram_rodata_start
00025d84 g     O .bss	00000028 __malloc_current_mallinfo
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00023948 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024460 g     F .text	000000c4 alt_get_fd
00023b88 g     F .text	00000158 alt_busy_sleep
000221a8 g     F .text	00000054 _close_r
00024570 g     F .text	0000007c memcmp
00025dac g       *ABS*	00000000 __alt_stack_base
00022054 g     F .text	00000154 __swsetup_r
00020474 g     F .text	00000118 __sfp
00024d34 g     O .rwdata	00000408 __malloc_av_
000205c0 g     F .text	00000004 __sinit_lock_release
00021eb8 g     F .text	00000054 __sread
00024358 g     F .text	00000108 alt_find_file
00023d3c g     F .text	000000a4 alt_dev_llist_insert
00023480 g     F .text	00000024 __malloc_lock
0002368c g     F .text	000000b0 sbrk
0002251c g     F .text	0000005c _fflush_r
00025d68 g       *ABS*	00000000 __bss_start
000217d8 g     F .text	00000128 memset
0002005c g     F .text	0000007c main
00025d80 g     O .bss	00000004 alt_envp
00025d68 g     O .bss	00000004 __malloc_max_total_mem
000239a8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00021fec g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
000222ec g     F .text	00000014 fclose
00020c44 g     F .text	0000080c _malloc_r
00025334 g     O .rwdata	00000004 alt_errno
00020abc g     F .text	000000c4 _fwalk
00022d08 g     F .text	00000084 .hidden __divsi3
000225a8 g     F .text	00000124 _malloc_trim_r
000248b8 g       *ABS*	00000000 __CTOR_END__
000248b8 g       *ABS*	00000000 __flash_rodata_start
000248b8 g       *ABS*	00000000 __DTOR_LIST__
000238dc g     F .text	00000038 alt_irq_init
00023608 g     F .text	00000084 alt_release_fd
00024524 g     F .text	00000014 atexit
00021ff4 g     F .text	00000060 _write_r
00025314 g     O .rwdata	00000004 _impure_ptr
00025d78 g     O .bss	00000004 alt_argc
00022300 g     F .text	0000021c __sflush_r
00023e40 g     F .text	00000060 _do_dtors
000205dc g     F .text	00000018 __fp_unlock_all
00025320 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002533c g       *ABS*	00000000 _edata
00025dac g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
00021f14 g     F .text	0000007c __swrite
0002531c g     O .rwdata	00000004 __malloc_trim_threshold
00024538 g     F .text	00000038 exit
00020b80 g     F .text	000000c4 _fwalk_reent
00022d8c g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
000205b8 g     F .text	00000004 __sfp_lock_release
00024884 g     F .text	00000034 _exit
00022a3c g     F .text	000001bc __smakebuf_r
000201ac g     F .text	00000098 strlen
00024148 g     F .text	0000015c open
00023ea0 g     F .text	00000020 alt_icache_flush_all
00023de0 g     F .text	00000060 _do_ctors
00022f20 g     F .text	000000d8 close
00023268 g     F .text	00000084 alt_load
000205bc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2002c:	d6b4c414 	ori	gp,gp,54032
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20030:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20034:	10975a14 	ori	r2,r2,23912

    movhi r3, %hi(__bss_end)
   20038:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2003c:	18d76b14 	ori	r3,r3,23980

    beq r2, r3, 1f
   20040:	10c00326 	beq	r2,r3,20050 <_start+0x30>

0:
    stw zero, (r2)
   20044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2004c:	10fffd36 	bltu	r2,r3,20044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20050:	00232680 	call	23268 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20054:	00234040 	call	23404 <alt_main>

00020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20058:	003fff06 	br	20058 <alt_after_alt_main>

0002005c <main>:
//#define SIM

// LED Peripheral
#define REG_DATA_OFFSET 1

int main(void){
   2005c:	defffc04 	addi	sp,sp,-16
   20060:	dfc00315 	stw	ra,12(sp)
   20064:	df000215 	stw	fp,8(sp)
   20068:	df000204 	addi	fp,sp,8
  unsigned int led = 0;
   2006c:	e03ffe15 	stw	zero,-8(fp)
  unsigned int *p_led = (unsigned int *) PERIPHERAL_LED_0_BASE;
   20070:	008001b4 	movhi	r2,6
   20074:	10840004 	addi	r2,r2,4096
   20078:	e0bfff15 	stw	r2,-4(fp)

#ifndef SIM
  printf("Embarcados++ \n");
   2007c:	010000b4 	movhi	r4,2
   20080:	21122e04 	addi	r4,r4,18616
   20084:	00201980 	call	20198 <puts>
#endif
  printf("reggae++ \n");
   20088:	010000b4 	movhi	r4,2
   2008c:	21123204 	addi	r4,r4,18632
   20090:	00201980 	call	20198 <puts>
  while(1){
      if (led < 4){
   20094:	e0bffe17 	ldw	r2,-8(fp)
   20098:	10800128 	cmpgeui	r2,r2,4
   2009c:	10000c1e 	bne	r2,zero,200d0 <main+0x74>
          *(p_led+REG_DATA_OFFSET) = (0x1 << led++);
   200a0:	e0bfff17 	ldw	r2,-4(fp)
   200a4:	10c00104 	addi	r3,r2,4
   200a8:	e0bffe17 	ldw	r2,-8(fp)
   200ac:	11000044 	addi	r4,r2,1
   200b0:	e13ffe15 	stw	r4,-8(fp)
   200b4:	01000044 	movi	r4,1
   200b8:	2084983a 	sll	r2,r4,r2
   200bc:	18800015 	stw	r2,0(r3)
#ifndef SIM
          usleep(500000); // remover durante a simulação
   200c0:	01000234 	movhi	r4,8
   200c4:	21284804 	addi	r4,r4,-24288
   200c8:	002373c0 	call	2373c <usleep>
   200cc:	003ff106 	br	20094 <main+0x38>
#endif
      }
      else{
          led = 0;
   200d0:	e03ffe15 	stw	zero,-8(fp)
      }
  };
   200d4:	003fef06 	br	20094 <main+0x38>

000200d8 <_puts_r>:
   200d8:	defff604 	addi	sp,sp,-40
   200dc:	dc000715 	stw	r16,28(sp)
   200e0:	2021883a 	mov	r16,r4
   200e4:	2809883a 	mov	r4,r5
   200e8:	dc400815 	stw	r17,32(sp)
   200ec:	dfc00915 	stw	ra,36(sp)
   200f0:	2823883a 	mov	r17,r5
   200f4:	00201ac0 	call	201ac <strlen>
   200f8:	10c00044 	addi	r3,r2,1
   200fc:	d8800115 	stw	r2,4(sp)
   20100:	008000b4 	movhi	r2,2
   20104:	10923504 	addi	r2,r2,18644
   20108:	d8800215 	stw	r2,8(sp)
   2010c:	00800044 	movi	r2,1
   20110:	d8800315 	stw	r2,12(sp)
   20114:	00800084 	movi	r2,2
   20118:	dc400015 	stw	r17,0(sp)
   2011c:	d8c00615 	stw	r3,24(sp)
   20120:	dec00415 	stw	sp,16(sp)
   20124:	d8800515 	stw	r2,20(sp)
   20128:	80000226 	beq	r16,zero,20134 <_puts_r+0x5c>
   2012c:	80800e17 	ldw	r2,56(r16)
   20130:	10001426 	beq	r2,zero,20184 <_puts_r+0xac>
   20134:	81400217 	ldw	r5,8(r16)
   20138:	2880030b 	ldhu	r2,12(r5)
   2013c:	10c8000c 	andi	r3,r2,8192
   20140:	1800061e 	bne	r3,zero,2015c <_puts_r+0x84>
   20144:	29001917 	ldw	r4,100(r5)
   20148:	00f7ffc4 	movi	r3,-8193
   2014c:	10880014 	ori	r2,r2,8192
   20150:	20c6703a 	and	r3,r4,r3
   20154:	2880030d 	sth	r2,12(r5)
   20158:	28c01915 	stw	r3,100(r5)
   2015c:	d9800404 	addi	r6,sp,16
   20160:	8009883a 	mov	r4,r16
   20164:	00205f40 	call	205f4 <__sfvwrite_r>
   20168:	1000091e 	bne	r2,zero,20190 <_puts_r+0xb8>
   2016c:	00800284 	movi	r2,10
   20170:	dfc00917 	ldw	ra,36(sp)
   20174:	dc400817 	ldw	r17,32(sp)
   20178:	dc000717 	ldw	r16,28(sp)
   2017c:	dec00a04 	addi	sp,sp,40
   20180:	f800283a 	ret
   20184:	8009883a 	mov	r4,r16
   20188:	00205a40 	call	205a4 <__sinit>
   2018c:	003fe906 	br	20134 <_puts_r+0x5c>
   20190:	00bfffc4 	movi	r2,-1
   20194:	003ff606 	br	20170 <_puts_r+0x98>

00020198 <puts>:
   20198:	008000b4 	movhi	r2,2
   2019c:	1094c504 	addi	r2,r2,21268
   201a0:	200b883a 	mov	r5,r4
   201a4:	11000017 	ldw	r4,0(r2)
   201a8:	00200d81 	jmpi	200d8 <_puts_r>

000201ac <strlen>:
   201ac:	208000cc 	andi	r2,r4,3
   201b0:	10002026 	beq	r2,zero,20234 <strlen+0x88>
   201b4:	20800007 	ldb	r2,0(r4)
   201b8:	10002026 	beq	r2,zero,2023c <strlen+0x90>
   201bc:	2005883a 	mov	r2,r4
   201c0:	00000206 	br	201cc <strlen+0x20>
   201c4:	10c00007 	ldb	r3,0(r2)
   201c8:	18001826 	beq	r3,zero,2022c <strlen+0x80>
   201cc:	10800044 	addi	r2,r2,1
   201d0:	10c000cc 	andi	r3,r2,3
   201d4:	183ffb1e 	bne	r3,zero,201c4 <strlen+0x18>
   201d8:	10c00017 	ldw	r3,0(r2)
   201dc:	01ffbff4 	movhi	r7,65279
   201e0:	39ffbfc4 	addi	r7,r7,-257
   201e4:	00ca303a 	nor	r5,zero,r3
   201e8:	01a02074 	movhi	r6,32897
   201ec:	19c7883a 	add	r3,r3,r7
   201f0:	31a02004 	addi	r6,r6,-32640
   201f4:	1946703a 	and	r3,r3,r5
   201f8:	1986703a 	and	r3,r3,r6
   201fc:	1800091e 	bne	r3,zero,20224 <strlen+0x78>
   20200:	10800104 	addi	r2,r2,4
   20204:	10c00017 	ldw	r3,0(r2)
   20208:	19cb883a 	add	r5,r3,r7
   2020c:	00c6303a 	nor	r3,zero,r3
   20210:	28c6703a 	and	r3,r5,r3
   20214:	1986703a 	and	r3,r3,r6
   20218:	183ff926 	beq	r3,zero,20200 <strlen+0x54>
   2021c:	00000106 	br	20224 <strlen+0x78>
   20220:	10800044 	addi	r2,r2,1
   20224:	10c00007 	ldb	r3,0(r2)
   20228:	183ffd1e 	bne	r3,zero,20220 <strlen+0x74>
   2022c:	1105c83a 	sub	r2,r2,r4
   20230:	f800283a 	ret
   20234:	2005883a 	mov	r2,r4
   20238:	003fe706 	br	201d8 <strlen+0x2c>
   2023c:	0005883a 	mov	r2,zero
   20240:	f800283a 	ret

00020244 <__fp_unlock>:
   20244:	0005883a 	mov	r2,zero
   20248:	f800283a 	ret

0002024c <_cleanup_r>:
   2024c:	014000b4 	movhi	r5,2
   20250:	29487f04 	addi	r5,r5,8700
   20254:	0020b801 	jmpi	20b80 <_fwalk_reent>

00020258 <__sinit.part.1>:
   20258:	defff704 	addi	sp,sp,-36
   2025c:	00c000b4 	movhi	r3,2
   20260:	dfc00815 	stw	ra,32(sp)
   20264:	ddc00715 	stw	r23,28(sp)
   20268:	dd800615 	stw	r22,24(sp)
   2026c:	dd400515 	stw	r21,20(sp)
   20270:	dd000415 	stw	r20,16(sp)
   20274:	dcc00315 	stw	r19,12(sp)
   20278:	dc800215 	stw	r18,8(sp)
   2027c:	dc400115 	stw	r17,4(sp)
   20280:	dc000015 	stw	r16,0(sp)
   20284:	18c09304 	addi	r3,r3,588
   20288:	24000117 	ldw	r16,4(r4)
   2028c:	20c00f15 	stw	r3,60(r4)
   20290:	2080bb04 	addi	r2,r4,748
   20294:	00c000c4 	movi	r3,3
   20298:	20c0b915 	stw	r3,740(r4)
   2029c:	2080ba15 	stw	r2,744(r4)
   202a0:	2000b815 	stw	zero,736(r4)
   202a4:	05c00204 	movi	r23,8
   202a8:	00800104 	movi	r2,4
   202ac:	2025883a 	mov	r18,r4
   202b0:	b80d883a 	mov	r6,r23
   202b4:	81001704 	addi	r4,r16,92
   202b8:	000b883a 	mov	r5,zero
   202bc:	80000015 	stw	zero,0(r16)
   202c0:	80000115 	stw	zero,4(r16)
   202c4:	80000215 	stw	zero,8(r16)
   202c8:	8080030d 	sth	r2,12(r16)
   202cc:	80001915 	stw	zero,100(r16)
   202d0:	8000038d 	sth	zero,14(r16)
   202d4:	80000415 	stw	zero,16(r16)
   202d8:	80000515 	stw	zero,20(r16)
   202dc:	80000615 	stw	zero,24(r16)
   202e0:	00217d80 	call	217d8 <memset>
   202e4:	058000b4 	movhi	r22,2
   202e8:	94400217 	ldw	r17,8(r18)
   202ec:	054000b4 	movhi	r21,2
   202f0:	050000b4 	movhi	r20,2
   202f4:	04c000b4 	movhi	r19,2
   202f8:	b587ae04 	addi	r22,r22,7864
   202fc:	ad47c504 	addi	r21,r21,7956
   20300:	a507e404 	addi	r20,r20,8080
   20304:	9cc7fb04 	addi	r19,r19,8172
   20308:	85800815 	stw	r22,32(r16)
   2030c:	85400915 	stw	r21,36(r16)
   20310:	85000a15 	stw	r20,40(r16)
   20314:	84c00b15 	stw	r19,44(r16)
   20318:	84000715 	stw	r16,28(r16)
   2031c:	00800284 	movi	r2,10
   20320:	8880030d 	sth	r2,12(r17)
   20324:	00800044 	movi	r2,1
   20328:	b80d883a 	mov	r6,r23
   2032c:	89001704 	addi	r4,r17,92
   20330:	000b883a 	mov	r5,zero
   20334:	88000015 	stw	zero,0(r17)
   20338:	88000115 	stw	zero,4(r17)
   2033c:	88000215 	stw	zero,8(r17)
   20340:	88001915 	stw	zero,100(r17)
   20344:	8880038d 	sth	r2,14(r17)
   20348:	88000415 	stw	zero,16(r17)
   2034c:	88000515 	stw	zero,20(r17)
   20350:	88000615 	stw	zero,24(r17)
   20354:	00217d80 	call	217d8 <memset>
   20358:	94000317 	ldw	r16,12(r18)
   2035c:	00800484 	movi	r2,18
   20360:	8c400715 	stw	r17,28(r17)
   20364:	8d800815 	stw	r22,32(r17)
   20368:	8d400915 	stw	r21,36(r17)
   2036c:	8d000a15 	stw	r20,40(r17)
   20370:	8cc00b15 	stw	r19,44(r17)
   20374:	8080030d 	sth	r2,12(r16)
   20378:	00800084 	movi	r2,2
   2037c:	80000015 	stw	zero,0(r16)
   20380:	80000115 	stw	zero,4(r16)
   20384:	80000215 	stw	zero,8(r16)
   20388:	80001915 	stw	zero,100(r16)
   2038c:	8080038d 	sth	r2,14(r16)
   20390:	80000415 	stw	zero,16(r16)
   20394:	80000515 	stw	zero,20(r16)
   20398:	80000615 	stw	zero,24(r16)
   2039c:	b80d883a 	mov	r6,r23
   203a0:	000b883a 	mov	r5,zero
   203a4:	81001704 	addi	r4,r16,92
   203a8:	00217d80 	call	217d8 <memset>
   203ac:	00800044 	movi	r2,1
   203b0:	84000715 	stw	r16,28(r16)
   203b4:	85800815 	stw	r22,32(r16)
   203b8:	85400915 	stw	r21,36(r16)
   203bc:	85000a15 	stw	r20,40(r16)
   203c0:	84c00b15 	stw	r19,44(r16)
   203c4:	90800e15 	stw	r2,56(r18)
   203c8:	dfc00817 	ldw	ra,32(sp)
   203cc:	ddc00717 	ldw	r23,28(sp)
   203d0:	dd800617 	ldw	r22,24(sp)
   203d4:	dd400517 	ldw	r21,20(sp)
   203d8:	dd000417 	ldw	r20,16(sp)
   203dc:	dcc00317 	ldw	r19,12(sp)
   203e0:	dc800217 	ldw	r18,8(sp)
   203e4:	dc400117 	ldw	r17,4(sp)
   203e8:	dc000017 	ldw	r16,0(sp)
   203ec:	dec00904 	addi	sp,sp,36
   203f0:	f800283a 	ret

000203f4 <__fp_lock>:
   203f4:	0005883a 	mov	r2,zero
   203f8:	f800283a 	ret

000203fc <__sfmoreglue>:
   203fc:	defffc04 	addi	sp,sp,-16
   20400:	dc800215 	stw	r18,8(sp)
   20404:	2825883a 	mov	r18,r5
   20408:	dc000015 	stw	r16,0(sp)
   2040c:	01401a04 	movi	r5,104
   20410:	2021883a 	mov	r16,r4
   20414:	913fffc4 	addi	r4,r18,-1
   20418:	dfc00315 	stw	ra,12(sp)
   2041c:	dc400115 	stw	r17,4(sp)
   20420:	0022ebc0 	call	22ebc <__mulsi3>
   20424:	8009883a 	mov	r4,r16
   20428:	11401d04 	addi	r5,r2,116
   2042c:	1023883a 	mov	r17,r2
   20430:	0020c440 	call	20c44 <_malloc_r>
   20434:	1021883a 	mov	r16,r2
   20438:	10000726 	beq	r2,zero,20458 <__sfmoreglue+0x5c>
   2043c:	11000304 	addi	r4,r2,12
   20440:	10000015 	stw	zero,0(r2)
   20444:	14800115 	stw	r18,4(r2)
   20448:	11000215 	stw	r4,8(r2)
   2044c:	89801a04 	addi	r6,r17,104
   20450:	000b883a 	mov	r5,zero
   20454:	00217d80 	call	217d8 <memset>
   20458:	8005883a 	mov	r2,r16
   2045c:	dfc00317 	ldw	ra,12(sp)
   20460:	dc800217 	ldw	r18,8(sp)
   20464:	dc400117 	ldw	r17,4(sp)
   20468:	dc000017 	ldw	r16,0(sp)
   2046c:	dec00404 	addi	sp,sp,16
   20470:	f800283a 	ret

00020474 <__sfp>:
   20474:	defffb04 	addi	sp,sp,-20
   20478:	dc000015 	stw	r16,0(sp)
   2047c:	040000b4 	movhi	r16,2
   20480:	8414c404 	addi	r16,r16,21264
   20484:	dcc00315 	stw	r19,12(sp)
   20488:	2027883a 	mov	r19,r4
   2048c:	81000017 	ldw	r4,0(r16)
   20490:	dfc00415 	stw	ra,16(sp)
   20494:	dc800215 	stw	r18,8(sp)
   20498:	20800e17 	ldw	r2,56(r4)
   2049c:	dc400115 	stw	r17,4(sp)
   204a0:	1000021e 	bne	r2,zero,204ac <__sfp+0x38>
   204a4:	00202580 	call	20258 <__sinit.part.1>
   204a8:	81000017 	ldw	r4,0(r16)
   204ac:	2480b804 	addi	r18,r4,736
   204b0:	047fffc4 	movi	r17,-1
   204b4:	91000117 	ldw	r4,4(r18)
   204b8:	94000217 	ldw	r16,8(r18)
   204bc:	213fffc4 	addi	r4,r4,-1
   204c0:	20000a16 	blt	r4,zero,204ec <__sfp+0x78>
   204c4:	8080030f 	ldh	r2,12(r16)
   204c8:	10000c26 	beq	r2,zero,204fc <__sfp+0x88>
   204cc:	80c01d04 	addi	r3,r16,116
   204d0:	00000206 	br	204dc <__sfp+0x68>
   204d4:	18bfe60f 	ldh	r2,-104(r3)
   204d8:	10000826 	beq	r2,zero,204fc <__sfp+0x88>
   204dc:	213fffc4 	addi	r4,r4,-1
   204e0:	1c3ffd04 	addi	r16,r3,-12
   204e4:	18c01a04 	addi	r3,r3,104
   204e8:	247ffa1e 	bne	r4,r17,204d4 <__sfp+0x60>
   204ec:	90800017 	ldw	r2,0(r18)
   204f0:	10001d26 	beq	r2,zero,20568 <__sfp+0xf4>
   204f4:	1025883a 	mov	r18,r2
   204f8:	003fee06 	br	204b4 <__sfp+0x40>
   204fc:	00bfffc4 	movi	r2,-1
   20500:	8080038d 	sth	r2,14(r16)
   20504:	00800044 	movi	r2,1
   20508:	8080030d 	sth	r2,12(r16)
   2050c:	80001915 	stw	zero,100(r16)
   20510:	80000015 	stw	zero,0(r16)
   20514:	80000215 	stw	zero,8(r16)
   20518:	80000115 	stw	zero,4(r16)
   2051c:	80000415 	stw	zero,16(r16)
   20520:	80000515 	stw	zero,20(r16)
   20524:	80000615 	stw	zero,24(r16)
   20528:	01800204 	movi	r6,8
   2052c:	000b883a 	mov	r5,zero
   20530:	81001704 	addi	r4,r16,92
   20534:	00217d80 	call	217d8 <memset>
   20538:	8005883a 	mov	r2,r16
   2053c:	80000c15 	stw	zero,48(r16)
   20540:	80000d15 	stw	zero,52(r16)
   20544:	80001115 	stw	zero,68(r16)
   20548:	80001215 	stw	zero,72(r16)
   2054c:	dfc00417 	ldw	ra,16(sp)
   20550:	dcc00317 	ldw	r19,12(sp)
   20554:	dc800217 	ldw	r18,8(sp)
   20558:	dc400117 	ldw	r17,4(sp)
   2055c:	dc000017 	ldw	r16,0(sp)
   20560:	dec00504 	addi	sp,sp,20
   20564:	f800283a 	ret
   20568:	01400104 	movi	r5,4
   2056c:	9809883a 	mov	r4,r19
   20570:	00203fc0 	call	203fc <__sfmoreglue>
   20574:	90800015 	stw	r2,0(r18)
   20578:	103fde1e 	bne	r2,zero,204f4 <__sfp+0x80>
   2057c:	00800304 	movi	r2,12
   20580:	98800015 	stw	r2,0(r19)
   20584:	0005883a 	mov	r2,zero
   20588:	003ff006 	br	2054c <__sfp+0xd8>

0002058c <_cleanup>:
   2058c:	008000b4 	movhi	r2,2
   20590:	1094c404 	addi	r2,r2,21264
   20594:	11000017 	ldw	r4,0(r2)
   20598:	014000b4 	movhi	r5,2
   2059c:	29487f04 	addi	r5,r5,8700
   205a0:	0020b801 	jmpi	20b80 <_fwalk_reent>

000205a4 <__sinit>:
   205a4:	20800e17 	ldw	r2,56(r4)
   205a8:	10000126 	beq	r2,zero,205b0 <__sinit+0xc>
   205ac:	f800283a 	ret
   205b0:	00202581 	jmpi	20258 <__sinit.part.1>

000205b4 <__sfp_lock_acquire>:
   205b4:	f800283a 	ret

000205b8 <__sfp_lock_release>:
   205b8:	f800283a 	ret

000205bc <__sinit_lock_acquire>:
   205bc:	f800283a 	ret

000205c0 <__sinit_lock_release>:
   205c0:	f800283a 	ret

000205c4 <__fp_lock_all>:
   205c4:	008000b4 	movhi	r2,2
   205c8:	1094c504 	addi	r2,r2,21268
   205cc:	11000017 	ldw	r4,0(r2)
   205d0:	014000b4 	movhi	r5,2
   205d4:	2940fd04 	addi	r5,r5,1012
   205d8:	0020abc1 	jmpi	20abc <_fwalk>

000205dc <__fp_unlock_all>:
   205dc:	008000b4 	movhi	r2,2
   205e0:	1094c504 	addi	r2,r2,21268
   205e4:	11000017 	ldw	r4,0(r2)
   205e8:	014000b4 	movhi	r5,2
   205ec:	29409104 	addi	r5,r5,580
   205f0:	0020abc1 	jmpi	20abc <_fwalk>

000205f4 <__sfvwrite_r>:
   205f4:	30800217 	ldw	r2,8(r6)
   205f8:	10006726 	beq	r2,zero,20798 <__sfvwrite_r+0x1a4>
   205fc:	28c0030b 	ldhu	r3,12(r5)
   20600:	defff404 	addi	sp,sp,-48
   20604:	dd400715 	stw	r21,28(sp)
   20608:	dd000615 	stw	r20,24(sp)
   2060c:	dc000215 	stw	r16,8(sp)
   20610:	dfc00b15 	stw	ra,44(sp)
   20614:	df000a15 	stw	fp,40(sp)
   20618:	ddc00915 	stw	r23,36(sp)
   2061c:	dd800815 	stw	r22,32(sp)
   20620:	dcc00515 	stw	r19,20(sp)
   20624:	dc800415 	stw	r18,16(sp)
   20628:	dc400315 	stw	r17,12(sp)
   2062c:	1880020c 	andi	r2,r3,8
   20630:	2821883a 	mov	r16,r5
   20634:	202b883a 	mov	r21,r4
   20638:	3029883a 	mov	r20,r6
   2063c:	10002726 	beq	r2,zero,206dc <__sfvwrite_r+0xe8>
   20640:	28800417 	ldw	r2,16(r5)
   20644:	10002526 	beq	r2,zero,206dc <__sfvwrite_r+0xe8>
   20648:	1880008c 	andi	r2,r3,2
   2064c:	a4400017 	ldw	r17,0(r20)
   20650:	10002a26 	beq	r2,zero,206fc <__sfvwrite_r+0x108>
   20654:	05a00034 	movhi	r22,32768
   20658:	0027883a 	mov	r19,zero
   2065c:	0025883a 	mov	r18,zero
   20660:	b5bf0004 	addi	r22,r22,-1024
   20664:	980d883a 	mov	r6,r19
   20668:	a809883a 	mov	r4,r21
   2066c:	90004626 	beq	r18,zero,20788 <__sfvwrite_r+0x194>
   20670:	900f883a 	mov	r7,r18
   20674:	b480022e 	bgeu	r22,r18,20680 <__sfvwrite_r+0x8c>
   20678:	01e00034 	movhi	r7,32768
   2067c:	39ff0004 	addi	r7,r7,-1024
   20680:	80800917 	ldw	r2,36(r16)
   20684:	81400717 	ldw	r5,28(r16)
   20688:	103ee83a 	callr	r2
   2068c:	00805a0e 	bge	zero,r2,207f8 <__sfvwrite_r+0x204>
   20690:	a0c00217 	ldw	r3,8(r20)
   20694:	98a7883a 	add	r19,r19,r2
   20698:	90a5c83a 	sub	r18,r18,r2
   2069c:	1885c83a 	sub	r2,r3,r2
   206a0:	a0800215 	stw	r2,8(r20)
   206a4:	103fef1e 	bne	r2,zero,20664 <__sfvwrite_r+0x70>
   206a8:	0005883a 	mov	r2,zero
   206ac:	dfc00b17 	ldw	ra,44(sp)
   206b0:	df000a17 	ldw	fp,40(sp)
   206b4:	ddc00917 	ldw	r23,36(sp)
   206b8:	dd800817 	ldw	r22,32(sp)
   206bc:	dd400717 	ldw	r21,28(sp)
   206c0:	dd000617 	ldw	r20,24(sp)
   206c4:	dcc00517 	ldw	r19,20(sp)
   206c8:	dc800417 	ldw	r18,16(sp)
   206cc:	dc400317 	ldw	r17,12(sp)
   206d0:	dc000217 	ldw	r16,8(sp)
   206d4:	dec00c04 	addi	sp,sp,48
   206d8:	f800283a 	ret
   206dc:	800b883a 	mov	r5,r16
   206e0:	a809883a 	mov	r4,r21
   206e4:	00220540 	call	22054 <__swsetup_r>
   206e8:	1000ee1e 	bne	r2,zero,20aa4 <__sfvwrite_r+0x4b0>
   206ec:	80c0030b 	ldhu	r3,12(r16)
   206f0:	a4400017 	ldw	r17,0(r20)
   206f4:	1880008c 	andi	r2,r3,2
   206f8:	103fd61e 	bne	r2,zero,20654 <__sfvwrite_r+0x60>
   206fc:	1880004c 	andi	r2,r3,1
   20700:	1000421e 	bne	r2,zero,2080c <__sfvwrite_r+0x218>
   20704:	0039883a 	mov	fp,zero
   20708:	0025883a 	mov	r18,zero
   2070c:	90001a26 	beq	r18,zero,20778 <__sfvwrite_r+0x184>
   20710:	1880800c 	andi	r2,r3,512
   20714:	84c00217 	ldw	r19,8(r16)
   20718:	10002126 	beq	r2,zero,207a0 <__sfvwrite_r+0x1ac>
   2071c:	982f883a 	mov	r23,r19
   20720:	94c09636 	bltu	r18,r19,2097c <__sfvwrite_r+0x388>
   20724:	1881200c 	andi	r2,r3,1152
   20728:	1000a11e 	bne	r2,zero,209b0 <__sfvwrite_r+0x3bc>
   2072c:	81000017 	ldw	r4,0(r16)
   20730:	b80d883a 	mov	r6,r23
   20734:	e00b883a 	mov	r5,fp
   20738:	002167c0 	call	2167c <memmove>
   2073c:	80c00217 	ldw	r3,8(r16)
   20740:	81000017 	ldw	r4,0(r16)
   20744:	9005883a 	mov	r2,r18
   20748:	1ce7c83a 	sub	r19,r3,r19
   2074c:	25cf883a 	add	r7,r4,r23
   20750:	84c00215 	stw	r19,8(r16)
   20754:	81c00015 	stw	r7,0(r16)
   20758:	a0c00217 	ldw	r3,8(r20)
   2075c:	e0b9883a 	add	fp,fp,r2
   20760:	90a5c83a 	sub	r18,r18,r2
   20764:	18a7c83a 	sub	r19,r3,r2
   20768:	a4c00215 	stw	r19,8(r20)
   2076c:	983fce26 	beq	r19,zero,206a8 <__sfvwrite_r+0xb4>
   20770:	80c0030b 	ldhu	r3,12(r16)
   20774:	903fe61e 	bne	r18,zero,20710 <__sfvwrite_r+0x11c>
   20778:	8f000017 	ldw	fp,0(r17)
   2077c:	8c800117 	ldw	r18,4(r17)
   20780:	8c400204 	addi	r17,r17,8
   20784:	003fe106 	br	2070c <__sfvwrite_r+0x118>
   20788:	8cc00017 	ldw	r19,0(r17)
   2078c:	8c800117 	ldw	r18,4(r17)
   20790:	8c400204 	addi	r17,r17,8
   20794:	003fb306 	br	20664 <__sfvwrite_r+0x70>
   20798:	0005883a 	mov	r2,zero
   2079c:	f800283a 	ret
   207a0:	81000017 	ldw	r4,0(r16)
   207a4:	80800417 	ldw	r2,16(r16)
   207a8:	11005a36 	bltu	r2,r4,20914 <__sfvwrite_r+0x320>
   207ac:	85c00517 	ldw	r23,20(r16)
   207b0:	95c05836 	bltu	r18,r23,20914 <__sfvwrite_r+0x320>
   207b4:	00a00034 	movhi	r2,32768
   207b8:	10bfffc4 	addi	r2,r2,-1
   207bc:	9009883a 	mov	r4,r18
   207c0:	1480012e 	bgeu	r2,r18,207c8 <__sfvwrite_r+0x1d4>
   207c4:	1009883a 	mov	r4,r2
   207c8:	b80b883a 	mov	r5,r23
   207cc:	0022d080 	call	22d08 <__divsi3>
   207d0:	b80b883a 	mov	r5,r23
   207d4:	1009883a 	mov	r4,r2
   207d8:	0022ebc0 	call	22ebc <__mulsi3>
   207dc:	81400717 	ldw	r5,28(r16)
   207e0:	80c00917 	ldw	r3,36(r16)
   207e4:	100f883a 	mov	r7,r2
   207e8:	e00d883a 	mov	r6,fp
   207ec:	a809883a 	mov	r4,r21
   207f0:	183ee83a 	callr	r3
   207f4:	00bfd816 	blt	zero,r2,20758 <__sfvwrite_r+0x164>
   207f8:	8080030b 	ldhu	r2,12(r16)
   207fc:	10801014 	ori	r2,r2,64
   20800:	8080030d 	sth	r2,12(r16)
   20804:	00bfffc4 	movi	r2,-1
   20808:	003fa806 	br	206ac <__sfvwrite_r+0xb8>
   2080c:	0027883a 	mov	r19,zero
   20810:	0011883a 	mov	r8,zero
   20814:	0039883a 	mov	fp,zero
   20818:	0025883a 	mov	r18,zero
   2081c:	90001f26 	beq	r18,zero,2089c <__sfvwrite_r+0x2a8>
   20820:	40005a26 	beq	r8,zero,2098c <__sfvwrite_r+0x398>
   20824:	982d883a 	mov	r22,r19
   20828:	94c0012e 	bgeu	r18,r19,20830 <__sfvwrite_r+0x23c>
   2082c:	902d883a 	mov	r22,r18
   20830:	81000017 	ldw	r4,0(r16)
   20834:	80800417 	ldw	r2,16(r16)
   20838:	b02f883a 	mov	r23,r22
   2083c:	81c00517 	ldw	r7,20(r16)
   20840:	1100032e 	bgeu	r2,r4,20850 <__sfvwrite_r+0x25c>
   20844:	80c00217 	ldw	r3,8(r16)
   20848:	38c7883a 	add	r3,r7,r3
   2084c:	1d801816 	blt	r3,r22,208b0 <__sfvwrite_r+0x2bc>
   20850:	b1c03e16 	blt	r22,r7,2094c <__sfvwrite_r+0x358>
   20854:	80800917 	ldw	r2,36(r16)
   20858:	81400717 	ldw	r5,28(r16)
   2085c:	e00d883a 	mov	r6,fp
   20860:	da000115 	stw	r8,4(sp)
   20864:	a809883a 	mov	r4,r21
   20868:	103ee83a 	callr	r2
   2086c:	102f883a 	mov	r23,r2
   20870:	da000117 	ldw	r8,4(sp)
   20874:	00bfe00e 	bge	zero,r2,207f8 <__sfvwrite_r+0x204>
   20878:	9de7c83a 	sub	r19,r19,r23
   2087c:	98001f26 	beq	r19,zero,208fc <__sfvwrite_r+0x308>
   20880:	a0800217 	ldw	r2,8(r20)
   20884:	e5f9883a 	add	fp,fp,r23
   20888:	95e5c83a 	sub	r18,r18,r23
   2088c:	15efc83a 	sub	r23,r2,r23
   20890:	a5c00215 	stw	r23,8(r20)
   20894:	b83f8426 	beq	r23,zero,206a8 <__sfvwrite_r+0xb4>
   20898:	903fe11e 	bne	r18,zero,20820 <__sfvwrite_r+0x22c>
   2089c:	8f000017 	ldw	fp,0(r17)
   208a0:	8c800117 	ldw	r18,4(r17)
   208a4:	0011883a 	mov	r8,zero
   208a8:	8c400204 	addi	r17,r17,8
   208ac:	003fdb06 	br	2081c <__sfvwrite_r+0x228>
   208b0:	180d883a 	mov	r6,r3
   208b4:	e00b883a 	mov	r5,fp
   208b8:	da000115 	stw	r8,4(sp)
   208bc:	d8c00015 	stw	r3,0(sp)
   208c0:	002167c0 	call	2167c <memmove>
   208c4:	d8c00017 	ldw	r3,0(sp)
   208c8:	80800017 	ldw	r2,0(r16)
   208cc:	800b883a 	mov	r5,r16
   208d0:	a809883a 	mov	r4,r21
   208d4:	10c5883a 	add	r2,r2,r3
   208d8:	80800015 	stw	r2,0(r16)
   208dc:	d8c00015 	stw	r3,0(sp)
   208e0:	002251c0 	call	2251c <_fflush_r>
   208e4:	d8c00017 	ldw	r3,0(sp)
   208e8:	da000117 	ldw	r8,4(sp)
   208ec:	103fc21e 	bne	r2,zero,207f8 <__sfvwrite_r+0x204>
   208f0:	182f883a 	mov	r23,r3
   208f4:	9de7c83a 	sub	r19,r19,r23
   208f8:	983fe11e 	bne	r19,zero,20880 <__sfvwrite_r+0x28c>
   208fc:	800b883a 	mov	r5,r16
   20900:	a809883a 	mov	r4,r21
   20904:	002251c0 	call	2251c <_fflush_r>
   20908:	103fbb1e 	bne	r2,zero,207f8 <__sfvwrite_r+0x204>
   2090c:	0011883a 	mov	r8,zero
   20910:	003fdb06 	br	20880 <__sfvwrite_r+0x28c>
   20914:	94c0012e 	bgeu	r18,r19,2091c <__sfvwrite_r+0x328>
   20918:	9027883a 	mov	r19,r18
   2091c:	980d883a 	mov	r6,r19
   20920:	e00b883a 	mov	r5,fp
   20924:	002167c0 	call	2167c <memmove>
   20928:	80800217 	ldw	r2,8(r16)
   2092c:	80c00017 	ldw	r3,0(r16)
   20930:	14c5c83a 	sub	r2,r2,r19
   20934:	1cc7883a 	add	r3,r3,r19
   20938:	80800215 	stw	r2,8(r16)
   2093c:	80c00015 	stw	r3,0(r16)
   20940:	10004326 	beq	r2,zero,20a50 <__sfvwrite_r+0x45c>
   20944:	9805883a 	mov	r2,r19
   20948:	003f8306 	br	20758 <__sfvwrite_r+0x164>
   2094c:	b00d883a 	mov	r6,r22
   20950:	e00b883a 	mov	r5,fp
   20954:	da000115 	stw	r8,4(sp)
   20958:	002167c0 	call	2167c <memmove>
   2095c:	80800217 	ldw	r2,8(r16)
   20960:	80c00017 	ldw	r3,0(r16)
   20964:	da000117 	ldw	r8,4(sp)
   20968:	1585c83a 	sub	r2,r2,r22
   2096c:	1dad883a 	add	r22,r3,r22
   20970:	80800215 	stw	r2,8(r16)
   20974:	85800015 	stw	r22,0(r16)
   20978:	003fbf06 	br	20878 <__sfvwrite_r+0x284>
   2097c:	81000017 	ldw	r4,0(r16)
   20980:	9027883a 	mov	r19,r18
   20984:	902f883a 	mov	r23,r18
   20988:	003f6906 	br	20730 <__sfvwrite_r+0x13c>
   2098c:	900d883a 	mov	r6,r18
   20990:	01400284 	movi	r5,10
   20994:	e009883a 	mov	r4,fp
   20998:	00214500 	call	21450 <memchr>
   2099c:	10003e26 	beq	r2,zero,20a98 <__sfvwrite_r+0x4a4>
   209a0:	10800044 	addi	r2,r2,1
   209a4:	1727c83a 	sub	r19,r2,fp
   209a8:	02000044 	movi	r8,1
   209ac:	003f9d06 	br	20824 <__sfvwrite_r+0x230>
   209b0:	80800517 	ldw	r2,20(r16)
   209b4:	81400417 	ldw	r5,16(r16)
   209b8:	81c00017 	ldw	r7,0(r16)
   209bc:	10a7883a 	add	r19,r2,r2
   209c0:	9885883a 	add	r2,r19,r2
   209c4:	1026d7fa 	srli	r19,r2,31
   209c8:	396dc83a 	sub	r22,r7,r5
   209cc:	b1000044 	addi	r4,r22,1
   209d0:	9885883a 	add	r2,r19,r2
   209d4:	1027d07a 	srai	r19,r2,1
   209d8:	2485883a 	add	r2,r4,r18
   209dc:	980d883a 	mov	r6,r19
   209e0:	9880022e 	bgeu	r19,r2,209ec <__sfvwrite_r+0x3f8>
   209e4:	1027883a 	mov	r19,r2
   209e8:	100d883a 	mov	r6,r2
   209ec:	18c1000c 	andi	r3,r3,1024
   209f0:	18001c26 	beq	r3,zero,20a64 <__sfvwrite_r+0x470>
   209f4:	300b883a 	mov	r5,r6
   209f8:	a809883a 	mov	r4,r21
   209fc:	0020c440 	call	20c44 <_malloc_r>
   20a00:	102f883a 	mov	r23,r2
   20a04:	10002926 	beq	r2,zero,20aac <__sfvwrite_r+0x4b8>
   20a08:	81400417 	ldw	r5,16(r16)
   20a0c:	b00d883a 	mov	r6,r22
   20a10:	1009883a 	mov	r4,r2
   20a14:	00215340 	call	21534 <memcpy>
   20a18:	8080030b 	ldhu	r2,12(r16)
   20a1c:	00fedfc4 	movi	r3,-1153
   20a20:	10c4703a 	and	r2,r2,r3
   20a24:	10802014 	ori	r2,r2,128
   20a28:	8080030d 	sth	r2,12(r16)
   20a2c:	bd89883a 	add	r4,r23,r22
   20a30:	9d8fc83a 	sub	r7,r19,r22
   20a34:	85c00415 	stw	r23,16(r16)
   20a38:	84c00515 	stw	r19,20(r16)
   20a3c:	81000015 	stw	r4,0(r16)
   20a40:	9027883a 	mov	r19,r18
   20a44:	81c00215 	stw	r7,8(r16)
   20a48:	902f883a 	mov	r23,r18
   20a4c:	003f3806 	br	20730 <__sfvwrite_r+0x13c>
   20a50:	800b883a 	mov	r5,r16
   20a54:	a809883a 	mov	r4,r21
   20a58:	002251c0 	call	2251c <_fflush_r>
   20a5c:	103fb926 	beq	r2,zero,20944 <__sfvwrite_r+0x350>
   20a60:	003f6506 	br	207f8 <__sfvwrite_r+0x204>
   20a64:	a809883a 	mov	r4,r21
   20a68:	00219000 	call	21900 <_realloc_r>
   20a6c:	102f883a 	mov	r23,r2
   20a70:	103fee1e 	bne	r2,zero,20a2c <__sfvwrite_r+0x438>
   20a74:	81400417 	ldw	r5,16(r16)
   20a78:	a809883a 	mov	r4,r21
   20a7c:	00226cc0 	call	226cc <_free_r>
   20a80:	8080030b 	ldhu	r2,12(r16)
   20a84:	00ffdfc4 	movi	r3,-129
   20a88:	1884703a 	and	r2,r3,r2
   20a8c:	00c00304 	movi	r3,12
   20a90:	a8c00015 	stw	r3,0(r21)
   20a94:	003f5906 	br	207fc <__sfvwrite_r+0x208>
   20a98:	94c00044 	addi	r19,r18,1
   20a9c:	02000044 	movi	r8,1
   20aa0:	003f6006 	br	20824 <__sfvwrite_r+0x230>
   20aa4:	00bfffc4 	movi	r2,-1
   20aa8:	003f0006 	br	206ac <__sfvwrite_r+0xb8>
   20aac:	00800304 	movi	r2,12
   20ab0:	a8800015 	stw	r2,0(r21)
   20ab4:	8080030b 	ldhu	r2,12(r16)
   20ab8:	003f5006 	br	207fc <__sfvwrite_r+0x208>

00020abc <_fwalk>:
   20abc:	defff704 	addi	sp,sp,-36
   20ac0:	dd000415 	stw	r20,16(sp)
   20ac4:	dfc00815 	stw	ra,32(sp)
   20ac8:	ddc00715 	stw	r23,28(sp)
   20acc:	dd800615 	stw	r22,24(sp)
   20ad0:	dd400515 	stw	r21,20(sp)
   20ad4:	dcc00315 	stw	r19,12(sp)
   20ad8:	dc800215 	stw	r18,8(sp)
   20adc:	dc400115 	stw	r17,4(sp)
   20ae0:	dc000015 	stw	r16,0(sp)
   20ae4:	2500b804 	addi	r20,r4,736
   20ae8:	a0002326 	beq	r20,zero,20b78 <_fwalk+0xbc>
   20aec:	282b883a 	mov	r21,r5
   20af0:	002f883a 	mov	r23,zero
   20af4:	05800044 	movi	r22,1
   20af8:	04ffffc4 	movi	r19,-1
   20afc:	a4400117 	ldw	r17,4(r20)
   20b00:	a4800217 	ldw	r18,8(r20)
   20b04:	8c7fffc4 	addi	r17,r17,-1
   20b08:	88000d16 	blt	r17,zero,20b40 <_fwalk+0x84>
   20b0c:	94000304 	addi	r16,r18,12
   20b10:	94800384 	addi	r18,r18,14
   20b14:	8080000b 	ldhu	r2,0(r16)
   20b18:	8c7fffc4 	addi	r17,r17,-1
   20b1c:	813ffd04 	addi	r4,r16,-12
   20b20:	b080042e 	bgeu	r22,r2,20b34 <_fwalk+0x78>
   20b24:	9080000f 	ldh	r2,0(r18)
   20b28:	14c00226 	beq	r2,r19,20b34 <_fwalk+0x78>
   20b2c:	a83ee83a 	callr	r21
   20b30:	b8aeb03a 	or	r23,r23,r2
   20b34:	84001a04 	addi	r16,r16,104
   20b38:	94801a04 	addi	r18,r18,104
   20b3c:	8cfff51e 	bne	r17,r19,20b14 <_fwalk+0x58>
   20b40:	a5000017 	ldw	r20,0(r20)
   20b44:	a03fed1e 	bne	r20,zero,20afc <_fwalk+0x40>
   20b48:	b805883a 	mov	r2,r23
   20b4c:	dfc00817 	ldw	ra,32(sp)
   20b50:	ddc00717 	ldw	r23,28(sp)
   20b54:	dd800617 	ldw	r22,24(sp)
   20b58:	dd400517 	ldw	r21,20(sp)
   20b5c:	dd000417 	ldw	r20,16(sp)
   20b60:	dcc00317 	ldw	r19,12(sp)
   20b64:	dc800217 	ldw	r18,8(sp)
   20b68:	dc400117 	ldw	r17,4(sp)
   20b6c:	dc000017 	ldw	r16,0(sp)
   20b70:	dec00904 	addi	sp,sp,36
   20b74:	f800283a 	ret
   20b78:	002f883a 	mov	r23,zero
   20b7c:	003ff206 	br	20b48 <_fwalk+0x8c>

00020b80 <_fwalk_reent>:
   20b80:	defff704 	addi	sp,sp,-36
   20b84:	dd000415 	stw	r20,16(sp)
   20b88:	dfc00815 	stw	ra,32(sp)
   20b8c:	ddc00715 	stw	r23,28(sp)
   20b90:	dd800615 	stw	r22,24(sp)
   20b94:	dd400515 	stw	r21,20(sp)
   20b98:	dcc00315 	stw	r19,12(sp)
   20b9c:	dc800215 	stw	r18,8(sp)
   20ba0:	dc400115 	stw	r17,4(sp)
   20ba4:	dc000015 	stw	r16,0(sp)
   20ba8:	2500b804 	addi	r20,r4,736
   20bac:	a0002326 	beq	r20,zero,20c3c <_fwalk_reent+0xbc>
   20bb0:	282b883a 	mov	r21,r5
   20bb4:	2027883a 	mov	r19,r4
   20bb8:	002f883a 	mov	r23,zero
   20bbc:	05800044 	movi	r22,1
   20bc0:	04bfffc4 	movi	r18,-1
   20bc4:	a4400117 	ldw	r17,4(r20)
   20bc8:	a4000217 	ldw	r16,8(r20)
   20bcc:	8c7fffc4 	addi	r17,r17,-1
   20bd0:	88000c16 	blt	r17,zero,20c04 <_fwalk_reent+0x84>
   20bd4:	84000304 	addi	r16,r16,12
   20bd8:	8080000b 	ldhu	r2,0(r16)
   20bdc:	8c7fffc4 	addi	r17,r17,-1
   20be0:	817ffd04 	addi	r5,r16,-12
   20be4:	b080052e 	bgeu	r22,r2,20bfc <_fwalk_reent+0x7c>
   20be8:	8080008f 	ldh	r2,2(r16)
   20bec:	9809883a 	mov	r4,r19
   20bf0:	14800226 	beq	r2,r18,20bfc <_fwalk_reent+0x7c>
   20bf4:	a83ee83a 	callr	r21
   20bf8:	b8aeb03a 	or	r23,r23,r2
   20bfc:	84001a04 	addi	r16,r16,104
   20c00:	8cbff51e 	bne	r17,r18,20bd8 <_fwalk_reent+0x58>
   20c04:	a5000017 	ldw	r20,0(r20)
   20c08:	a03fee1e 	bne	r20,zero,20bc4 <_fwalk_reent+0x44>
   20c0c:	b805883a 	mov	r2,r23
   20c10:	dfc00817 	ldw	ra,32(sp)
   20c14:	ddc00717 	ldw	r23,28(sp)
   20c18:	dd800617 	ldw	r22,24(sp)
   20c1c:	dd400517 	ldw	r21,20(sp)
   20c20:	dd000417 	ldw	r20,16(sp)
   20c24:	dcc00317 	ldw	r19,12(sp)
   20c28:	dc800217 	ldw	r18,8(sp)
   20c2c:	dc400117 	ldw	r17,4(sp)
   20c30:	dc000017 	ldw	r16,0(sp)
   20c34:	dec00904 	addi	sp,sp,36
   20c38:	f800283a 	ret
   20c3c:	002f883a 	mov	r23,zero
   20c40:	003ff206 	br	20c0c <_fwalk_reent+0x8c>

00020c44 <_malloc_r>:
   20c44:	defff504 	addi	sp,sp,-44
   20c48:	dc800315 	stw	r18,12(sp)
   20c4c:	dfc00a15 	stw	ra,40(sp)
   20c50:	df000915 	stw	fp,36(sp)
   20c54:	ddc00815 	stw	r23,32(sp)
   20c58:	dd800715 	stw	r22,28(sp)
   20c5c:	dd400615 	stw	r21,24(sp)
   20c60:	dd000515 	stw	r20,20(sp)
   20c64:	dcc00415 	stw	r19,16(sp)
   20c68:	dc400215 	stw	r17,8(sp)
   20c6c:	dc000115 	stw	r16,4(sp)
   20c70:	288002c4 	addi	r2,r5,11
   20c74:	00c00584 	movi	r3,22
   20c78:	2025883a 	mov	r18,r4
   20c7c:	18807f2e 	bgeu	r3,r2,20e7c <_malloc_r+0x238>
   20c80:	047ffe04 	movi	r17,-8
   20c84:	1462703a 	and	r17,r2,r17
   20c88:	8800a316 	blt	r17,zero,20f18 <_malloc_r+0x2d4>
   20c8c:	8940a236 	bltu	r17,r5,20f18 <_malloc_r+0x2d4>
   20c90:	00234800 	call	23480 <__malloc_lock>
   20c94:	00807dc4 	movi	r2,503
   20c98:	1441e92e 	bgeu	r2,r17,21440 <_malloc_r+0x7fc>
   20c9c:	8804d27a 	srli	r2,r17,9
   20ca0:	1000a126 	beq	r2,zero,20f28 <_malloc_r+0x2e4>
   20ca4:	00c00104 	movi	r3,4
   20ca8:	18811e36 	bltu	r3,r2,21124 <_malloc_r+0x4e0>
   20cac:	8804d1ba 	srli	r2,r17,6
   20cb0:	12000e44 	addi	r8,r2,57
   20cb4:	11c00e04 	addi	r7,r2,56
   20cb8:	4209883a 	add	r4,r8,r8
   20cbc:	04c000b4 	movhi	r19,2
   20cc0:	2109883a 	add	r4,r4,r4
   20cc4:	9cd34d04 	addi	r19,r19,19764
   20cc8:	2109883a 	add	r4,r4,r4
   20ccc:	9909883a 	add	r4,r19,r4
   20cd0:	24000117 	ldw	r16,4(r4)
   20cd4:	213ffe04 	addi	r4,r4,-8
   20cd8:	24009726 	beq	r4,r16,20f38 <_malloc_r+0x2f4>
   20cdc:	80800117 	ldw	r2,4(r16)
   20ce0:	01bfff04 	movi	r6,-4
   20ce4:	014003c4 	movi	r5,15
   20ce8:	1184703a 	and	r2,r2,r6
   20cec:	1447c83a 	sub	r3,r2,r17
   20cf0:	28c00716 	blt	r5,r3,20d10 <_malloc_r+0xcc>
   20cf4:	1800920e 	bge	r3,zero,20f40 <_malloc_r+0x2fc>
   20cf8:	84000317 	ldw	r16,12(r16)
   20cfc:	24008e26 	beq	r4,r16,20f38 <_malloc_r+0x2f4>
   20d00:	80800117 	ldw	r2,4(r16)
   20d04:	1184703a 	and	r2,r2,r6
   20d08:	1447c83a 	sub	r3,r2,r17
   20d0c:	28fff90e 	bge	r5,r3,20cf4 <_malloc_r+0xb0>
   20d10:	3809883a 	mov	r4,r7
   20d14:	018000b4 	movhi	r6,2
   20d18:	9c000417 	ldw	r16,16(r19)
   20d1c:	31934d04 	addi	r6,r6,19764
   20d20:	32000204 	addi	r8,r6,8
   20d24:	82013426 	beq	r16,r8,211f8 <_malloc_r+0x5b4>
   20d28:	80c00117 	ldw	r3,4(r16)
   20d2c:	00bfff04 	movi	r2,-4
   20d30:	188e703a 	and	r7,r3,r2
   20d34:	3c45c83a 	sub	r2,r7,r17
   20d38:	00c003c4 	movi	r3,15
   20d3c:	18811f16 	blt	r3,r2,211bc <_malloc_r+0x578>
   20d40:	32000515 	stw	r8,20(r6)
   20d44:	32000415 	stw	r8,16(r6)
   20d48:	10007f0e 	bge	r2,zero,20f48 <_malloc_r+0x304>
   20d4c:	00807fc4 	movi	r2,511
   20d50:	11c0fd36 	bltu	r2,r7,21148 <_malloc_r+0x504>
   20d54:	3806d0fa 	srli	r3,r7,3
   20d58:	01c00044 	movi	r7,1
   20d5c:	30800117 	ldw	r2,4(r6)
   20d60:	19400044 	addi	r5,r3,1
   20d64:	294b883a 	add	r5,r5,r5
   20d68:	1807d0ba 	srai	r3,r3,2
   20d6c:	294b883a 	add	r5,r5,r5
   20d70:	294b883a 	add	r5,r5,r5
   20d74:	298b883a 	add	r5,r5,r6
   20d78:	38c6983a 	sll	r3,r7,r3
   20d7c:	29c00017 	ldw	r7,0(r5)
   20d80:	2a7ffe04 	addi	r9,r5,-8
   20d84:	1886b03a 	or	r3,r3,r2
   20d88:	82400315 	stw	r9,12(r16)
   20d8c:	81c00215 	stw	r7,8(r16)
   20d90:	30c00115 	stw	r3,4(r6)
   20d94:	2c000015 	stw	r16,0(r5)
   20d98:	3c000315 	stw	r16,12(r7)
   20d9c:	2005d0ba 	srai	r2,r4,2
   20da0:	01400044 	movi	r5,1
   20da4:	288a983a 	sll	r5,r5,r2
   20da8:	19406f36 	bltu	r3,r5,20f68 <_malloc_r+0x324>
   20dac:	28c4703a 	and	r2,r5,r3
   20db0:	10000a1e 	bne	r2,zero,20ddc <_malloc_r+0x198>
   20db4:	00bfff04 	movi	r2,-4
   20db8:	294b883a 	add	r5,r5,r5
   20dbc:	2088703a 	and	r4,r4,r2
   20dc0:	28c4703a 	and	r2,r5,r3
   20dc4:	21000104 	addi	r4,r4,4
   20dc8:	1000041e 	bne	r2,zero,20ddc <_malloc_r+0x198>
   20dcc:	294b883a 	add	r5,r5,r5
   20dd0:	28c4703a 	and	r2,r5,r3
   20dd4:	21000104 	addi	r4,r4,4
   20dd8:	103ffc26 	beq	r2,zero,20dcc <_malloc_r+0x188>
   20ddc:	02bfff04 	movi	r10,-4
   20de0:	024003c4 	movi	r9,15
   20de4:	21800044 	addi	r6,r4,1
   20de8:	318d883a 	add	r6,r6,r6
   20dec:	318d883a 	add	r6,r6,r6
   20df0:	318d883a 	add	r6,r6,r6
   20df4:	998d883a 	add	r6,r19,r6
   20df8:	333ffe04 	addi	r12,r6,-8
   20dfc:	2017883a 	mov	r11,r4
   20e00:	31800104 	addi	r6,r6,4
   20e04:	34000017 	ldw	r16,0(r6)
   20e08:	31fffd04 	addi	r7,r6,-12
   20e0c:	81c0041e 	bne	r16,r7,20e20 <_malloc_r+0x1dc>
   20e10:	0000fb06 	br	21200 <_malloc_r+0x5bc>
   20e14:	1801030e 	bge	r3,zero,21224 <_malloc_r+0x5e0>
   20e18:	84000317 	ldw	r16,12(r16)
   20e1c:	81c0f826 	beq	r16,r7,21200 <_malloc_r+0x5bc>
   20e20:	80800117 	ldw	r2,4(r16)
   20e24:	1284703a 	and	r2,r2,r10
   20e28:	1447c83a 	sub	r3,r2,r17
   20e2c:	48fff90e 	bge	r9,r3,20e14 <_malloc_r+0x1d0>
   20e30:	80800317 	ldw	r2,12(r16)
   20e34:	81000217 	ldw	r4,8(r16)
   20e38:	89400054 	ori	r5,r17,1
   20e3c:	81400115 	stw	r5,4(r16)
   20e40:	20800315 	stw	r2,12(r4)
   20e44:	11000215 	stw	r4,8(r2)
   20e48:	8463883a 	add	r17,r16,r17
   20e4c:	9c400515 	stw	r17,20(r19)
   20e50:	9c400415 	stw	r17,16(r19)
   20e54:	18800054 	ori	r2,r3,1
   20e58:	88800115 	stw	r2,4(r17)
   20e5c:	8a000315 	stw	r8,12(r17)
   20e60:	8a000215 	stw	r8,8(r17)
   20e64:	88e3883a 	add	r17,r17,r3
   20e68:	88c00015 	stw	r3,0(r17)
   20e6c:	9009883a 	mov	r4,r18
   20e70:	00234a40 	call	234a4 <__malloc_unlock>
   20e74:	80800204 	addi	r2,r16,8
   20e78:	00001b06 	br	20ee8 <_malloc_r+0x2a4>
   20e7c:	04400404 	movi	r17,16
   20e80:	89402536 	bltu	r17,r5,20f18 <_malloc_r+0x2d4>
   20e84:	00234800 	call	23480 <__malloc_lock>
   20e88:	00800184 	movi	r2,6
   20e8c:	01000084 	movi	r4,2
   20e90:	04c000b4 	movhi	r19,2
   20e94:	1085883a 	add	r2,r2,r2
   20e98:	9cd34d04 	addi	r19,r19,19764
   20e9c:	1085883a 	add	r2,r2,r2
   20ea0:	9885883a 	add	r2,r19,r2
   20ea4:	14000117 	ldw	r16,4(r2)
   20ea8:	10fffe04 	addi	r3,r2,-8
   20eac:	80c0d926 	beq	r16,r3,21214 <_malloc_r+0x5d0>
   20eb0:	80c00117 	ldw	r3,4(r16)
   20eb4:	81000317 	ldw	r4,12(r16)
   20eb8:	00bfff04 	movi	r2,-4
   20ebc:	1884703a 	and	r2,r3,r2
   20ec0:	81400217 	ldw	r5,8(r16)
   20ec4:	8085883a 	add	r2,r16,r2
   20ec8:	10c00117 	ldw	r3,4(r2)
   20ecc:	29000315 	stw	r4,12(r5)
   20ed0:	21400215 	stw	r5,8(r4)
   20ed4:	18c00054 	ori	r3,r3,1
   20ed8:	10c00115 	stw	r3,4(r2)
   20edc:	9009883a 	mov	r4,r18
   20ee0:	00234a40 	call	234a4 <__malloc_unlock>
   20ee4:	80800204 	addi	r2,r16,8
   20ee8:	dfc00a17 	ldw	ra,40(sp)
   20eec:	df000917 	ldw	fp,36(sp)
   20ef0:	ddc00817 	ldw	r23,32(sp)
   20ef4:	dd800717 	ldw	r22,28(sp)
   20ef8:	dd400617 	ldw	r21,24(sp)
   20efc:	dd000517 	ldw	r20,20(sp)
   20f00:	dcc00417 	ldw	r19,16(sp)
   20f04:	dc800317 	ldw	r18,12(sp)
   20f08:	dc400217 	ldw	r17,8(sp)
   20f0c:	dc000117 	ldw	r16,4(sp)
   20f10:	dec00b04 	addi	sp,sp,44
   20f14:	f800283a 	ret
   20f18:	00800304 	movi	r2,12
   20f1c:	90800015 	stw	r2,0(r18)
   20f20:	0005883a 	mov	r2,zero
   20f24:	003ff006 	br	20ee8 <_malloc_r+0x2a4>
   20f28:	01002004 	movi	r4,128
   20f2c:	02001004 	movi	r8,64
   20f30:	01c00fc4 	movi	r7,63
   20f34:	003f6106 	br	20cbc <_malloc_r+0x78>
   20f38:	4009883a 	mov	r4,r8
   20f3c:	003f7506 	br	20d14 <_malloc_r+0xd0>
   20f40:	81000317 	ldw	r4,12(r16)
   20f44:	003fde06 	br	20ec0 <_malloc_r+0x27c>
   20f48:	81c5883a 	add	r2,r16,r7
   20f4c:	11400117 	ldw	r5,4(r2)
   20f50:	9009883a 	mov	r4,r18
   20f54:	29400054 	ori	r5,r5,1
   20f58:	11400115 	stw	r5,4(r2)
   20f5c:	00234a40 	call	234a4 <__malloc_unlock>
   20f60:	80800204 	addi	r2,r16,8
   20f64:	003fe006 	br	20ee8 <_malloc_r+0x2a4>
   20f68:	9c000217 	ldw	r16,8(r19)
   20f6c:	00bfff04 	movi	r2,-4
   20f70:	85800117 	ldw	r22,4(r16)
   20f74:	b0ac703a 	and	r22,r22,r2
   20f78:	b4400336 	bltu	r22,r17,20f88 <_malloc_r+0x344>
   20f7c:	b445c83a 	sub	r2,r22,r17
   20f80:	00c003c4 	movi	r3,15
   20f84:	18805d16 	blt	r3,r2,210fc <_malloc_r+0x4b8>
   20f88:	05c000b4 	movhi	r23,2
   20f8c:	008000b4 	movhi	r2,2
   20f90:	10975c04 	addi	r2,r2,23920
   20f94:	bdd4c604 	addi	r23,r23,21272
   20f98:	15400017 	ldw	r21,0(r2)
   20f9c:	b8c00017 	ldw	r3,0(r23)
   20fa0:	00bfffc4 	movi	r2,-1
   20fa4:	858d883a 	add	r6,r16,r22
   20fa8:	8d6b883a 	add	r21,r17,r21
   20fac:	1880ea26 	beq	r3,r2,21358 <_malloc_r+0x714>
   20fb0:	ad4403c4 	addi	r21,r21,4111
   20fb4:	00bc0004 	movi	r2,-4096
   20fb8:	a8aa703a 	and	r21,r21,r2
   20fbc:	a80b883a 	mov	r5,r21
   20fc0:	9009883a 	mov	r4,r18
   20fc4:	d9800015 	stw	r6,0(sp)
   20fc8:	0021e640 	call	21e64 <_sbrk_r>
   20fcc:	1029883a 	mov	r20,r2
   20fd0:	00bfffc4 	movi	r2,-1
   20fd4:	d9800017 	ldw	r6,0(sp)
   20fd8:	a080e826 	beq	r20,r2,2137c <_malloc_r+0x738>
   20fdc:	a180a636 	bltu	r20,r6,21278 <_malloc_r+0x634>
   20fe0:	070000b4 	movhi	fp,2
   20fe4:	e7176104 	addi	fp,fp,23940
   20fe8:	e0800017 	ldw	r2,0(fp)
   20fec:	a887883a 	add	r3,r21,r2
   20ff0:	e0c00015 	stw	r3,0(fp)
   20ff4:	3500e626 	beq	r6,r20,21390 <_malloc_r+0x74c>
   20ff8:	b9000017 	ldw	r4,0(r23)
   20ffc:	00bfffc4 	movi	r2,-1
   21000:	2080ee26 	beq	r4,r2,213bc <_malloc_r+0x778>
   21004:	a185c83a 	sub	r2,r20,r6
   21008:	10c5883a 	add	r2,r2,r3
   2100c:	e0800015 	stw	r2,0(fp)
   21010:	a0c001cc 	andi	r3,r20,7
   21014:	1800bc26 	beq	r3,zero,21308 <_malloc_r+0x6c4>
   21018:	a0e9c83a 	sub	r20,r20,r3
   2101c:	00840204 	movi	r2,4104
   21020:	a5000204 	addi	r20,r20,8
   21024:	10c7c83a 	sub	r3,r2,r3
   21028:	a545883a 	add	r2,r20,r21
   2102c:	1083ffcc 	andi	r2,r2,4095
   21030:	18abc83a 	sub	r21,r3,r2
   21034:	a80b883a 	mov	r5,r21
   21038:	9009883a 	mov	r4,r18
   2103c:	0021e640 	call	21e64 <_sbrk_r>
   21040:	00ffffc4 	movi	r3,-1
   21044:	10c0e126 	beq	r2,r3,213cc <_malloc_r+0x788>
   21048:	1505c83a 	sub	r2,r2,r20
   2104c:	1545883a 	add	r2,r2,r21
   21050:	10800054 	ori	r2,r2,1
   21054:	e0c00017 	ldw	r3,0(fp)
   21058:	9d000215 	stw	r20,8(r19)
   2105c:	a0800115 	stw	r2,4(r20)
   21060:	a8c7883a 	add	r3,r21,r3
   21064:	e0c00015 	stw	r3,0(fp)
   21068:	84c00e26 	beq	r16,r19,210a4 <_malloc_r+0x460>
   2106c:	018003c4 	movi	r6,15
   21070:	3580a72e 	bgeu	r6,r22,21310 <_malloc_r+0x6cc>
   21074:	81400117 	ldw	r5,4(r16)
   21078:	013ffe04 	movi	r4,-8
   2107c:	b0bffd04 	addi	r2,r22,-12
   21080:	1104703a 	and	r2,r2,r4
   21084:	2900004c 	andi	r4,r5,1
   21088:	2088b03a 	or	r4,r4,r2
   2108c:	81000115 	stw	r4,4(r16)
   21090:	01400144 	movi	r5,5
   21094:	8089883a 	add	r4,r16,r2
   21098:	21400115 	stw	r5,4(r4)
   2109c:	21400215 	stw	r5,8(r4)
   210a0:	3080cd36 	bltu	r6,r2,213d8 <_malloc_r+0x794>
   210a4:	008000b4 	movhi	r2,2
   210a8:	10975b04 	addi	r2,r2,23916
   210ac:	11000017 	ldw	r4,0(r2)
   210b0:	20c0012e 	bgeu	r4,r3,210b8 <_malloc_r+0x474>
   210b4:	10c00015 	stw	r3,0(r2)
   210b8:	008000b4 	movhi	r2,2
   210bc:	10975a04 	addi	r2,r2,23912
   210c0:	11000017 	ldw	r4,0(r2)
   210c4:	9c000217 	ldw	r16,8(r19)
   210c8:	20c0012e 	bgeu	r4,r3,210d0 <_malloc_r+0x48c>
   210cc:	10c00015 	stw	r3,0(r2)
   210d0:	80c00117 	ldw	r3,4(r16)
   210d4:	00bfff04 	movi	r2,-4
   210d8:	1886703a 	and	r3,r3,r2
   210dc:	1c45c83a 	sub	r2,r3,r17
   210e0:	1c400236 	bltu	r3,r17,210ec <_malloc_r+0x4a8>
   210e4:	00c003c4 	movi	r3,15
   210e8:	18800416 	blt	r3,r2,210fc <_malloc_r+0x4b8>
   210ec:	9009883a 	mov	r4,r18
   210f0:	00234a40 	call	234a4 <__malloc_unlock>
   210f4:	0005883a 	mov	r2,zero
   210f8:	003f7b06 	br	20ee8 <_malloc_r+0x2a4>
   210fc:	88c00054 	ori	r3,r17,1
   21100:	80c00115 	stw	r3,4(r16)
   21104:	8463883a 	add	r17,r16,r17
   21108:	10800054 	ori	r2,r2,1
   2110c:	9c400215 	stw	r17,8(r19)
   21110:	88800115 	stw	r2,4(r17)
   21114:	9009883a 	mov	r4,r18
   21118:	00234a40 	call	234a4 <__malloc_unlock>
   2111c:	80800204 	addi	r2,r16,8
   21120:	003f7106 	br	20ee8 <_malloc_r+0x2a4>
   21124:	00c00504 	movi	r3,20
   21128:	18804a2e 	bgeu	r3,r2,21254 <_malloc_r+0x610>
   2112c:	00c01504 	movi	r3,84
   21130:	18806e36 	bltu	r3,r2,212ec <_malloc_r+0x6a8>
   21134:	8804d33a 	srli	r2,r17,12
   21138:	12001bc4 	addi	r8,r2,111
   2113c:	11c01b84 	addi	r7,r2,110
   21140:	4209883a 	add	r4,r8,r8
   21144:	003edd06 	br	20cbc <_malloc_r+0x78>
   21148:	3804d27a 	srli	r2,r7,9
   2114c:	00c00104 	movi	r3,4
   21150:	1880442e 	bgeu	r3,r2,21264 <_malloc_r+0x620>
   21154:	00c00504 	movi	r3,20
   21158:	18808136 	bltu	r3,r2,21360 <_malloc_r+0x71c>
   2115c:	11401704 	addi	r5,r2,92
   21160:	10c016c4 	addi	r3,r2,91
   21164:	294b883a 	add	r5,r5,r5
   21168:	294b883a 	add	r5,r5,r5
   2116c:	294b883a 	add	r5,r5,r5
   21170:	994b883a 	add	r5,r19,r5
   21174:	28800017 	ldw	r2,0(r5)
   21178:	018000b4 	movhi	r6,2
   2117c:	297ffe04 	addi	r5,r5,-8
   21180:	31934d04 	addi	r6,r6,19764
   21184:	28806526 	beq	r5,r2,2131c <_malloc_r+0x6d8>
   21188:	01bfff04 	movi	r6,-4
   2118c:	10c00117 	ldw	r3,4(r2)
   21190:	1986703a 	and	r3,r3,r6
   21194:	38c0022e 	bgeu	r7,r3,211a0 <_malloc_r+0x55c>
   21198:	10800217 	ldw	r2,8(r2)
   2119c:	28bffb1e 	bne	r5,r2,2118c <_malloc_r+0x548>
   211a0:	11400317 	ldw	r5,12(r2)
   211a4:	98c00117 	ldw	r3,4(r19)
   211a8:	81400315 	stw	r5,12(r16)
   211ac:	80800215 	stw	r2,8(r16)
   211b0:	2c000215 	stw	r16,8(r5)
   211b4:	14000315 	stw	r16,12(r2)
   211b8:	003ef806 	br	20d9c <_malloc_r+0x158>
   211bc:	88c00054 	ori	r3,r17,1
   211c0:	80c00115 	stw	r3,4(r16)
   211c4:	8463883a 	add	r17,r16,r17
   211c8:	34400515 	stw	r17,20(r6)
   211cc:	34400415 	stw	r17,16(r6)
   211d0:	10c00054 	ori	r3,r2,1
   211d4:	8a000315 	stw	r8,12(r17)
   211d8:	8a000215 	stw	r8,8(r17)
   211dc:	88c00115 	stw	r3,4(r17)
   211e0:	88a3883a 	add	r17,r17,r2
   211e4:	88800015 	stw	r2,0(r17)
   211e8:	9009883a 	mov	r4,r18
   211ec:	00234a40 	call	234a4 <__malloc_unlock>
   211f0:	80800204 	addi	r2,r16,8
   211f4:	003f3c06 	br	20ee8 <_malloc_r+0x2a4>
   211f8:	30c00117 	ldw	r3,4(r6)
   211fc:	003ee706 	br	20d9c <_malloc_r+0x158>
   21200:	5ac00044 	addi	r11,r11,1
   21204:	588000cc 	andi	r2,r11,3
   21208:	31800204 	addi	r6,r6,8
   2120c:	103efd1e 	bne	r2,zero,20e04 <_malloc_r+0x1c0>
   21210:	00002406 	br	212a4 <_malloc_r+0x660>
   21214:	14000317 	ldw	r16,12(r2)
   21218:	143f251e 	bne	r2,r16,20eb0 <_malloc_r+0x26c>
   2121c:	21000084 	addi	r4,r4,2
   21220:	003ebc06 	br	20d14 <_malloc_r+0xd0>
   21224:	8085883a 	add	r2,r16,r2
   21228:	10c00117 	ldw	r3,4(r2)
   2122c:	81000317 	ldw	r4,12(r16)
   21230:	81400217 	ldw	r5,8(r16)
   21234:	18c00054 	ori	r3,r3,1
   21238:	10c00115 	stw	r3,4(r2)
   2123c:	29000315 	stw	r4,12(r5)
   21240:	21400215 	stw	r5,8(r4)
   21244:	9009883a 	mov	r4,r18
   21248:	00234a40 	call	234a4 <__malloc_unlock>
   2124c:	80800204 	addi	r2,r16,8
   21250:	003f2506 	br	20ee8 <_malloc_r+0x2a4>
   21254:	12001704 	addi	r8,r2,92
   21258:	11c016c4 	addi	r7,r2,91
   2125c:	4209883a 	add	r4,r8,r8
   21260:	003e9606 	br	20cbc <_malloc_r+0x78>
   21264:	3804d1ba 	srli	r2,r7,6
   21268:	11400e44 	addi	r5,r2,57
   2126c:	10c00e04 	addi	r3,r2,56
   21270:	294b883a 	add	r5,r5,r5
   21274:	003fbc06 	br	21168 <_malloc_r+0x524>
   21278:	84ff5926 	beq	r16,r19,20fe0 <_malloc_r+0x39c>
   2127c:	008000b4 	movhi	r2,2
   21280:	10934d04 	addi	r2,r2,19764
   21284:	14000217 	ldw	r16,8(r2)
   21288:	00bfff04 	movi	r2,-4
   2128c:	80c00117 	ldw	r3,4(r16)
   21290:	1886703a 	and	r3,r3,r2
   21294:	003f9106 	br	210dc <_malloc_r+0x498>
   21298:	60800217 	ldw	r2,8(r12)
   2129c:	213fffc4 	addi	r4,r4,-1
   212a0:	1300651e 	bne	r2,r12,21438 <_malloc_r+0x7f4>
   212a4:	208000cc 	andi	r2,r4,3
   212a8:	633ffe04 	addi	r12,r12,-8
   212ac:	103ffa1e 	bne	r2,zero,21298 <_malloc_r+0x654>
   212b0:	98800117 	ldw	r2,4(r19)
   212b4:	0146303a 	nor	r3,zero,r5
   212b8:	1884703a 	and	r2,r3,r2
   212bc:	98800115 	stw	r2,4(r19)
   212c0:	294b883a 	add	r5,r5,r5
   212c4:	117f2836 	bltu	r2,r5,20f68 <_malloc_r+0x324>
   212c8:	283f2726 	beq	r5,zero,20f68 <_malloc_r+0x324>
   212cc:	2886703a 	and	r3,r5,r2
   212d0:	5809883a 	mov	r4,r11
   212d4:	183ec31e 	bne	r3,zero,20de4 <_malloc_r+0x1a0>
   212d8:	294b883a 	add	r5,r5,r5
   212dc:	2886703a 	and	r3,r5,r2
   212e0:	21000104 	addi	r4,r4,4
   212e4:	183ffc26 	beq	r3,zero,212d8 <_malloc_r+0x694>
   212e8:	003ebe06 	br	20de4 <_malloc_r+0x1a0>
   212ec:	00c05504 	movi	r3,340
   212f0:	18801236 	bltu	r3,r2,2133c <_malloc_r+0x6f8>
   212f4:	8804d3fa 	srli	r2,r17,15
   212f8:	12001e04 	addi	r8,r2,120
   212fc:	11c01dc4 	addi	r7,r2,119
   21300:	4209883a 	add	r4,r8,r8
   21304:	003e6d06 	br	20cbc <_malloc_r+0x78>
   21308:	00c40004 	movi	r3,4096
   2130c:	003f4606 	br	21028 <_malloc_r+0x3e4>
   21310:	00800044 	movi	r2,1
   21314:	a0800115 	stw	r2,4(r20)
   21318:	003f7406 	br	210ec <_malloc_r+0x4a8>
   2131c:	1805d0ba 	srai	r2,r3,2
   21320:	01c00044 	movi	r7,1
   21324:	30c00117 	ldw	r3,4(r6)
   21328:	388e983a 	sll	r7,r7,r2
   2132c:	2805883a 	mov	r2,r5
   21330:	38c6b03a 	or	r3,r7,r3
   21334:	30c00115 	stw	r3,4(r6)
   21338:	003f9b06 	br	211a8 <_malloc_r+0x564>
   2133c:	00c15504 	movi	r3,1364
   21340:	18801a36 	bltu	r3,r2,213ac <_malloc_r+0x768>
   21344:	8804d4ba 	srli	r2,r17,18
   21348:	12001f44 	addi	r8,r2,125
   2134c:	11c01f04 	addi	r7,r2,124
   21350:	4209883a 	add	r4,r8,r8
   21354:	003e5906 	br	20cbc <_malloc_r+0x78>
   21358:	ad400404 	addi	r21,r21,16
   2135c:	003f1706 	br	20fbc <_malloc_r+0x378>
   21360:	00c01504 	movi	r3,84
   21364:	18802336 	bltu	r3,r2,213f4 <_malloc_r+0x7b0>
   21368:	3804d33a 	srli	r2,r7,12
   2136c:	11401bc4 	addi	r5,r2,111
   21370:	10c01b84 	addi	r3,r2,110
   21374:	294b883a 	add	r5,r5,r5
   21378:	003f7b06 	br	21168 <_malloc_r+0x524>
   2137c:	9c000217 	ldw	r16,8(r19)
   21380:	00bfff04 	movi	r2,-4
   21384:	80c00117 	ldw	r3,4(r16)
   21388:	1886703a 	and	r3,r3,r2
   2138c:	003f5306 	br	210dc <_malloc_r+0x498>
   21390:	3083ffcc 	andi	r2,r6,4095
   21394:	103f181e 	bne	r2,zero,20ff8 <_malloc_r+0x3b4>
   21398:	99000217 	ldw	r4,8(r19)
   2139c:	b545883a 	add	r2,r22,r21
   213a0:	10800054 	ori	r2,r2,1
   213a4:	20800115 	stw	r2,4(r4)
   213a8:	003f3e06 	br	210a4 <_malloc_r+0x460>
   213ac:	01003f84 	movi	r4,254
   213b0:	02001fc4 	movi	r8,127
   213b4:	01c01f84 	movi	r7,126
   213b8:	003e4006 	br	20cbc <_malloc_r+0x78>
   213bc:	008000b4 	movhi	r2,2
   213c0:	1094c604 	addi	r2,r2,21272
   213c4:	15000015 	stw	r20,0(r2)
   213c8:	003f1106 	br	21010 <_malloc_r+0x3cc>
   213cc:	00800044 	movi	r2,1
   213d0:	002b883a 	mov	r21,zero
   213d4:	003f1f06 	br	21054 <_malloc_r+0x410>
   213d8:	81400204 	addi	r5,r16,8
   213dc:	9009883a 	mov	r4,r18
   213e0:	00226cc0 	call	226cc <_free_r>
   213e4:	008000b4 	movhi	r2,2
   213e8:	10976104 	addi	r2,r2,23940
   213ec:	10c00017 	ldw	r3,0(r2)
   213f0:	003f2c06 	br	210a4 <_malloc_r+0x460>
   213f4:	00c05504 	movi	r3,340
   213f8:	18800536 	bltu	r3,r2,21410 <_malloc_r+0x7cc>
   213fc:	3804d3fa 	srli	r2,r7,15
   21400:	11401e04 	addi	r5,r2,120
   21404:	10c01dc4 	addi	r3,r2,119
   21408:	294b883a 	add	r5,r5,r5
   2140c:	003f5606 	br	21168 <_malloc_r+0x524>
   21410:	00c15504 	movi	r3,1364
   21414:	18800536 	bltu	r3,r2,2142c <_malloc_r+0x7e8>
   21418:	3804d4ba 	srli	r2,r7,18
   2141c:	11401f44 	addi	r5,r2,125
   21420:	10c01f04 	addi	r3,r2,124
   21424:	294b883a 	add	r5,r5,r5
   21428:	003f4f06 	br	21168 <_malloc_r+0x524>
   2142c:	01403f84 	movi	r5,254
   21430:	00c01f84 	movi	r3,126
   21434:	003f4c06 	br	21168 <_malloc_r+0x524>
   21438:	98800117 	ldw	r2,4(r19)
   2143c:	003fa006 	br	212c0 <_malloc_r+0x67c>
   21440:	8808d0fa 	srli	r4,r17,3
   21444:	20800044 	addi	r2,r4,1
   21448:	1085883a 	add	r2,r2,r2
   2144c:	003e9006 	br	20e90 <_malloc_r+0x24c>

00021450 <memchr>:
   21450:	208000cc 	andi	r2,r4,3
   21454:	280f883a 	mov	r7,r5
   21458:	10003426 	beq	r2,zero,2152c <memchr+0xdc>
   2145c:	30bfffc4 	addi	r2,r6,-1
   21460:	30001a26 	beq	r6,zero,214cc <memchr+0x7c>
   21464:	20c00003 	ldbu	r3,0(r4)
   21468:	29803fcc 	andi	r6,r5,255
   2146c:	30c0051e 	bne	r6,r3,21484 <memchr+0x34>
   21470:	00001806 	br	214d4 <memchr+0x84>
   21474:	10001526 	beq	r2,zero,214cc <memchr+0x7c>
   21478:	20c00003 	ldbu	r3,0(r4)
   2147c:	10bfffc4 	addi	r2,r2,-1
   21480:	30c01426 	beq	r6,r3,214d4 <memchr+0x84>
   21484:	21000044 	addi	r4,r4,1
   21488:	20c000cc 	andi	r3,r4,3
   2148c:	183ff91e 	bne	r3,zero,21474 <memchr+0x24>
   21490:	020000c4 	movi	r8,3
   21494:	40801136 	bltu	r8,r2,214dc <memchr+0x8c>
   21498:	10000c26 	beq	r2,zero,214cc <memchr+0x7c>
   2149c:	20c00003 	ldbu	r3,0(r4)
   214a0:	29403fcc 	andi	r5,r5,255
   214a4:	28c00b26 	beq	r5,r3,214d4 <memchr+0x84>
   214a8:	20c00044 	addi	r3,r4,1
   214ac:	39803fcc 	andi	r6,r7,255
   214b0:	2089883a 	add	r4,r4,r2
   214b4:	00000306 	br	214c4 <memchr+0x74>
   214b8:	18c00044 	addi	r3,r3,1
   214bc:	197fffc3 	ldbu	r5,-1(r3)
   214c0:	31400526 	beq	r6,r5,214d8 <memchr+0x88>
   214c4:	1805883a 	mov	r2,r3
   214c8:	20fffb1e 	bne	r4,r3,214b8 <memchr+0x68>
   214cc:	0005883a 	mov	r2,zero
   214d0:	f800283a 	ret
   214d4:	2005883a 	mov	r2,r4
   214d8:	f800283a 	ret
   214dc:	28c03fcc 	andi	r3,r5,255
   214e0:	1812923a 	slli	r9,r3,8
   214e4:	02ffbff4 	movhi	r11,65279
   214e8:	02a02074 	movhi	r10,32897
   214ec:	48d2b03a 	or	r9,r9,r3
   214f0:	4806943a 	slli	r3,r9,16
   214f4:	5affbfc4 	addi	r11,r11,-257
   214f8:	52a02004 	addi	r10,r10,-32640
   214fc:	48d2b03a 	or	r9,r9,r3
   21500:	20c00017 	ldw	r3,0(r4)
   21504:	48c6f03a 	xor	r3,r9,r3
   21508:	1acd883a 	add	r6,r3,r11
   2150c:	00c6303a 	nor	r3,zero,r3
   21510:	30c6703a 	and	r3,r6,r3
   21514:	1a86703a 	and	r3,r3,r10
   21518:	183fe01e 	bne	r3,zero,2149c <memchr+0x4c>
   2151c:	10bfff04 	addi	r2,r2,-4
   21520:	21000104 	addi	r4,r4,4
   21524:	40bff636 	bltu	r8,r2,21500 <memchr+0xb0>
   21528:	003fdb06 	br	21498 <memchr+0x48>
   2152c:	3005883a 	mov	r2,r6
   21530:	003fd706 	br	21490 <memchr+0x40>

00021534 <memcpy>:
   21534:	defffd04 	addi	sp,sp,-12
   21538:	dfc00215 	stw	ra,8(sp)
   2153c:	dc400115 	stw	r17,4(sp)
   21540:	dc000015 	stw	r16,0(sp)
   21544:	00c003c4 	movi	r3,15
   21548:	2005883a 	mov	r2,r4
   2154c:	1980452e 	bgeu	r3,r6,21664 <memcpy+0x130>
   21550:	2906b03a 	or	r3,r5,r4
   21554:	18c000cc 	andi	r3,r3,3
   21558:	1800441e 	bne	r3,zero,2166c <memcpy+0x138>
   2155c:	347ffc04 	addi	r17,r6,-16
   21560:	8822d13a 	srli	r17,r17,4
   21564:	28c00104 	addi	r3,r5,4
   21568:	23400104 	addi	r13,r4,4
   2156c:	8820913a 	slli	r16,r17,4
   21570:	2b000204 	addi	r12,r5,8
   21574:	22c00204 	addi	r11,r4,8
   21578:	84000504 	addi	r16,r16,20
   2157c:	2a800304 	addi	r10,r5,12
   21580:	22400304 	addi	r9,r4,12
   21584:	2c21883a 	add	r16,r5,r16
   21588:	2811883a 	mov	r8,r5
   2158c:	200f883a 	mov	r7,r4
   21590:	41000017 	ldw	r4,0(r8)
   21594:	1fc00017 	ldw	ra,0(r3)
   21598:	63c00017 	ldw	r15,0(r12)
   2159c:	39000015 	stw	r4,0(r7)
   215a0:	53800017 	ldw	r14,0(r10)
   215a4:	6fc00015 	stw	ra,0(r13)
   215a8:	5bc00015 	stw	r15,0(r11)
   215ac:	4b800015 	stw	r14,0(r9)
   215b0:	18c00404 	addi	r3,r3,16
   215b4:	39c00404 	addi	r7,r7,16
   215b8:	42000404 	addi	r8,r8,16
   215bc:	6b400404 	addi	r13,r13,16
   215c0:	63000404 	addi	r12,r12,16
   215c4:	5ac00404 	addi	r11,r11,16
   215c8:	52800404 	addi	r10,r10,16
   215cc:	4a400404 	addi	r9,r9,16
   215d0:	1c3fef1e 	bne	r3,r16,21590 <memcpy+0x5c>
   215d4:	89c00044 	addi	r7,r17,1
   215d8:	380e913a 	slli	r7,r7,4
   215dc:	310003cc 	andi	r4,r6,15
   215e0:	02c000c4 	movi	r11,3
   215e4:	11c7883a 	add	r3,r2,r7
   215e8:	29cb883a 	add	r5,r5,r7
   215ec:	5900212e 	bgeu	r11,r4,21674 <memcpy+0x140>
   215f0:	1813883a 	mov	r9,r3
   215f4:	2811883a 	mov	r8,r5
   215f8:	200f883a 	mov	r7,r4
   215fc:	42800017 	ldw	r10,0(r8)
   21600:	4a400104 	addi	r9,r9,4
   21604:	39ffff04 	addi	r7,r7,-4
   21608:	4abfff15 	stw	r10,-4(r9)
   2160c:	42000104 	addi	r8,r8,4
   21610:	59fffa36 	bltu	r11,r7,215fc <memcpy+0xc8>
   21614:	213fff04 	addi	r4,r4,-4
   21618:	2008d0ba 	srli	r4,r4,2
   2161c:	318000cc 	andi	r6,r6,3
   21620:	21000044 	addi	r4,r4,1
   21624:	2109883a 	add	r4,r4,r4
   21628:	2109883a 	add	r4,r4,r4
   2162c:	1907883a 	add	r3,r3,r4
   21630:	290b883a 	add	r5,r5,r4
   21634:	30000626 	beq	r6,zero,21650 <memcpy+0x11c>
   21638:	198d883a 	add	r6,r3,r6
   2163c:	29c00003 	ldbu	r7,0(r5)
   21640:	18c00044 	addi	r3,r3,1
   21644:	29400044 	addi	r5,r5,1
   21648:	19ffffc5 	stb	r7,-1(r3)
   2164c:	19bffb1e 	bne	r3,r6,2163c <memcpy+0x108>
   21650:	dfc00217 	ldw	ra,8(sp)
   21654:	dc400117 	ldw	r17,4(sp)
   21658:	dc000017 	ldw	r16,0(sp)
   2165c:	dec00304 	addi	sp,sp,12
   21660:	f800283a 	ret
   21664:	2007883a 	mov	r3,r4
   21668:	003ff206 	br	21634 <memcpy+0x100>
   2166c:	2007883a 	mov	r3,r4
   21670:	003ff106 	br	21638 <memcpy+0x104>
   21674:	200d883a 	mov	r6,r4
   21678:	003fee06 	br	21634 <memcpy+0x100>

0002167c <memmove>:
   2167c:	2005883a 	mov	r2,r4
   21680:	29000b2e 	bgeu	r5,r4,216b0 <memmove+0x34>
   21684:	298f883a 	add	r7,r5,r6
   21688:	21c0092e 	bgeu	r4,r7,216b0 <memmove+0x34>
   2168c:	2187883a 	add	r3,r4,r6
   21690:	198bc83a 	sub	r5,r3,r6
   21694:	30004826 	beq	r6,zero,217b8 <memmove+0x13c>
   21698:	39ffffc4 	addi	r7,r7,-1
   2169c:	39000003 	ldbu	r4,0(r7)
   216a0:	18ffffc4 	addi	r3,r3,-1
   216a4:	19000005 	stb	r4,0(r3)
   216a8:	28fffb1e 	bne	r5,r3,21698 <memmove+0x1c>
   216ac:	f800283a 	ret
   216b0:	00c003c4 	movi	r3,15
   216b4:	1980412e 	bgeu	r3,r6,217bc <memmove+0x140>
   216b8:	2886b03a 	or	r3,r5,r2
   216bc:	18c000cc 	andi	r3,r3,3
   216c0:	1800401e 	bne	r3,zero,217c4 <memmove+0x148>
   216c4:	33fffc04 	addi	r15,r6,-16
   216c8:	781ed13a 	srli	r15,r15,4
   216cc:	28c00104 	addi	r3,r5,4
   216d0:	13400104 	addi	r13,r2,4
   216d4:	781c913a 	slli	r14,r15,4
   216d8:	2b000204 	addi	r12,r5,8
   216dc:	12c00204 	addi	r11,r2,8
   216e0:	73800504 	addi	r14,r14,20
   216e4:	2a800304 	addi	r10,r5,12
   216e8:	12400304 	addi	r9,r2,12
   216ec:	2b9d883a 	add	r14,r5,r14
   216f0:	2811883a 	mov	r8,r5
   216f4:	100f883a 	mov	r7,r2
   216f8:	41000017 	ldw	r4,0(r8)
   216fc:	39c00404 	addi	r7,r7,16
   21700:	18c00404 	addi	r3,r3,16
   21704:	393ffc15 	stw	r4,-16(r7)
   21708:	193ffc17 	ldw	r4,-16(r3)
   2170c:	6b400404 	addi	r13,r13,16
   21710:	5ac00404 	addi	r11,r11,16
   21714:	693ffc15 	stw	r4,-16(r13)
   21718:	61000017 	ldw	r4,0(r12)
   2171c:	4a400404 	addi	r9,r9,16
   21720:	42000404 	addi	r8,r8,16
   21724:	593ffc15 	stw	r4,-16(r11)
   21728:	51000017 	ldw	r4,0(r10)
   2172c:	63000404 	addi	r12,r12,16
   21730:	52800404 	addi	r10,r10,16
   21734:	493ffc15 	stw	r4,-16(r9)
   21738:	1bbfef1e 	bne	r3,r14,216f8 <memmove+0x7c>
   2173c:	79000044 	addi	r4,r15,1
   21740:	2008913a 	slli	r4,r4,4
   21744:	328003cc 	andi	r10,r6,15
   21748:	02c000c4 	movi	r11,3
   2174c:	1107883a 	add	r3,r2,r4
   21750:	290b883a 	add	r5,r5,r4
   21754:	5a801e2e 	bgeu	r11,r10,217d0 <memmove+0x154>
   21758:	1813883a 	mov	r9,r3
   2175c:	2811883a 	mov	r8,r5
   21760:	500f883a 	mov	r7,r10
   21764:	41000017 	ldw	r4,0(r8)
   21768:	4a400104 	addi	r9,r9,4
   2176c:	39ffff04 	addi	r7,r7,-4
   21770:	493fff15 	stw	r4,-4(r9)
   21774:	42000104 	addi	r8,r8,4
   21778:	59fffa36 	bltu	r11,r7,21764 <memmove+0xe8>
   2177c:	513fff04 	addi	r4,r10,-4
   21780:	2008d0ba 	srli	r4,r4,2
   21784:	318000cc 	andi	r6,r6,3
   21788:	21000044 	addi	r4,r4,1
   2178c:	2109883a 	add	r4,r4,r4
   21790:	2109883a 	add	r4,r4,r4
   21794:	1907883a 	add	r3,r3,r4
   21798:	290b883a 	add	r5,r5,r4
   2179c:	30000b26 	beq	r6,zero,217cc <memmove+0x150>
   217a0:	198d883a 	add	r6,r3,r6
   217a4:	29c00003 	ldbu	r7,0(r5)
   217a8:	18c00044 	addi	r3,r3,1
   217ac:	29400044 	addi	r5,r5,1
   217b0:	19ffffc5 	stb	r7,-1(r3)
   217b4:	19bffb1e 	bne	r3,r6,217a4 <memmove+0x128>
   217b8:	f800283a 	ret
   217bc:	1007883a 	mov	r3,r2
   217c0:	003ff606 	br	2179c <memmove+0x120>
   217c4:	1007883a 	mov	r3,r2
   217c8:	003ff506 	br	217a0 <memmove+0x124>
   217cc:	f800283a 	ret
   217d0:	500d883a 	mov	r6,r10
   217d4:	003ff106 	br	2179c <memmove+0x120>

000217d8 <memset>:
   217d8:	20c000cc 	andi	r3,r4,3
   217dc:	2005883a 	mov	r2,r4
   217e0:	18004426 	beq	r3,zero,218f4 <memset+0x11c>
   217e4:	31ffffc4 	addi	r7,r6,-1
   217e8:	30004026 	beq	r6,zero,218ec <memset+0x114>
   217ec:	2813883a 	mov	r9,r5
   217f0:	200d883a 	mov	r6,r4
   217f4:	2007883a 	mov	r3,r4
   217f8:	00000406 	br	2180c <memset+0x34>
   217fc:	3a3fffc4 	addi	r8,r7,-1
   21800:	31800044 	addi	r6,r6,1
   21804:	38003926 	beq	r7,zero,218ec <memset+0x114>
   21808:	400f883a 	mov	r7,r8
   2180c:	18c00044 	addi	r3,r3,1
   21810:	32400005 	stb	r9,0(r6)
   21814:	1a0000cc 	andi	r8,r3,3
   21818:	403ff81e 	bne	r8,zero,217fc <memset+0x24>
   2181c:	010000c4 	movi	r4,3
   21820:	21c02d2e 	bgeu	r4,r7,218d8 <memset+0x100>
   21824:	29003fcc 	andi	r4,r5,255
   21828:	200c923a 	slli	r6,r4,8
   2182c:	3108b03a 	or	r4,r6,r4
   21830:	200c943a 	slli	r6,r4,16
   21834:	218cb03a 	or	r6,r4,r6
   21838:	010003c4 	movi	r4,15
   2183c:	21c0182e 	bgeu	r4,r7,218a0 <memset+0xc8>
   21840:	3b3ffc04 	addi	r12,r7,-16
   21844:	6018d13a 	srli	r12,r12,4
   21848:	1a000104 	addi	r8,r3,4
   2184c:	1ac00204 	addi	r11,r3,8
   21850:	6008913a 	slli	r4,r12,4
   21854:	1a800304 	addi	r10,r3,12
   21858:	1813883a 	mov	r9,r3
   2185c:	21000504 	addi	r4,r4,20
   21860:	1909883a 	add	r4,r3,r4
   21864:	49800015 	stw	r6,0(r9)
   21868:	41800015 	stw	r6,0(r8)
   2186c:	59800015 	stw	r6,0(r11)
   21870:	51800015 	stw	r6,0(r10)
   21874:	42000404 	addi	r8,r8,16
   21878:	4a400404 	addi	r9,r9,16
   2187c:	5ac00404 	addi	r11,r11,16
   21880:	52800404 	addi	r10,r10,16
   21884:	413ff71e 	bne	r8,r4,21864 <memset+0x8c>
   21888:	63000044 	addi	r12,r12,1
   2188c:	6018913a 	slli	r12,r12,4
   21890:	39c003cc 	andi	r7,r7,15
   21894:	010000c4 	movi	r4,3
   21898:	1b07883a 	add	r3,r3,r12
   2189c:	21c00e2e 	bgeu	r4,r7,218d8 <memset+0x100>
   218a0:	1813883a 	mov	r9,r3
   218a4:	3811883a 	mov	r8,r7
   218a8:	010000c4 	movi	r4,3
   218ac:	49800015 	stw	r6,0(r9)
   218b0:	423fff04 	addi	r8,r8,-4
   218b4:	4a400104 	addi	r9,r9,4
   218b8:	223ffc36 	bltu	r4,r8,218ac <memset+0xd4>
   218bc:	393fff04 	addi	r4,r7,-4
   218c0:	2008d0ba 	srli	r4,r4,2
   218c4:	39c000cc 	andi	r7,r7,3
   218c8:	21000044 	addi	r4,r4,1
   218cc:	2109883a 	add	r4,r4,r4
   218d0:	2109883a 	add	r4,r4,r4
   218d4:	1907883a 	add	r3,r3,r4
   218d8:	38000526 	beq	r7,zero,218f0 <memset+0x118>
   218dc:	19cf883a 	add	r7,r3,r7
   218e0:	19400005 	stb	r5,0(r3)
   218e4:	18c00044 	addi	r3,r3,1
   218e8:	38fffd1e 	bne	r7,r3,218e0 <memset+0x108>
   218ec:	f800283a 	ret
   218f0:	f800283a 	ret
   218f4:	2007883a 	mov	r3,r4
   218f8:	300f883a 	mov	r7,r6
   218fc:	003fc706 	br	2181c <memset+0x44>

00021900 <_realloc_r>:
   21900:	defff604 	addi	sp,sp,-40
   21904:	dc800215 	stw	r18,8(sp)
   21908:	dfc00915 	stw	ra,36(sp)
   2190c:	df000815 	stw	fp,32(sp)
   21910:	ddc00715 	stw	r23,28(sp)
   21914:	dd800615 	stw	r22,24(sp)
   21918:	dd400515 	stw	r21,20(sp)
   2191c:	dd000415 	stw	r20,16(sp)
   21920:	dcc00315 	stw	r19,12(sp)
   21924:	dc400115 	stw	r17,4(sp)
   21928:	dc000015 	stw	r16,0(sp)
   2192c:	3025883a 	mov	r18,r6
   21930:	2800b726 	beq	r5,zero,21c10 <_realloc_r+0x310>
   21934:	282b883a 	mov	r21,r5
   21938:	2029883a 	mov	r20,r4
   2193c:	00234800 	call	23480 <__malloc_lock>
   21940:	a8bfff17 	ldw	r2,-4(r21)
   21944:	043fff04 	movi	r16,-4
   21948:	90c002c4 	addi	r3,r18,11
   2194c:	01000584 	movi	r4,22
   21950:	acfffe04 	addi	r19,r21,-8
   21954:	1420703a 	and	r16,r2,r16
   21958:	20c0332e 	bgeu	r4,r3,21a28 <_realloc_r+0x128>
   2195c:	047ffe04 	movi	r17,-8
   21960:	1c62703a 	and	r17,r3,r17
   21964:	8807883a 	mov	r3,r17
   21968:	88005816 	blt	r17,zero,21acc <_realloc_r+0x1cc>
   2196c:	8c805736 	bltu	r17,r18,21acc <_realloc_r+0x1cc>
   21970:	80c0300e 	bge	r16,r3,21a34 <_realloc_r+0x134>
   21974:	070000b4 	movhi	fp,2
   21978:	e7134d04 	addi	fp,fp,19764
   2197c:	e1c00217 	ldw	r7,8(fp)
   21980:	9c09883a 	add	r4,r19,r16
   21984:	22000117 	ldw	r8,4(r4)
   21988:	21c06326 	beq	r4,r7,21b18 <_realloc_r+0x218>
   2198c:	017fff84 	movi	r5,-2
   21990:	414a703a 	and	r5,r8,r5
   21994:	214b883a 	add	r5,r4,r5
   21998:	29800117 	ldw	r6,4(r5)
   2199c:	3180004c 	andi	r6,r6,1
   219a0:	30003f26 	beq	r6,zero,21aa0 <_realloc_r+0x1a0>
   219a4:	1080004c 	andi	r2,r2,1
   219a8:	10008326 	beq	r2,zero,21bb8 <_realloc_r+0x2b8>
   219ac:	900b883a 	mov	r5,r18
   219b0:	a009883a 	mov	r4,r20
   219b4:	0020c440 	call	20c44 <_malloc_r>
   219b8:	1025883a 	mov	r18,r2
   219bc:	10011e26 	beq	r2,zero,21e38 <_realloc_r+0x538>
   219c0:	a93fff17 	ldw	r4,-4(r21)
   219c4:	10fffe04 	addi	r3,r2,-8
   219c8:	00bfff84 	movi	r2,-2
   219cc:	2084703a 	and	r2,r4,r2
   219d0:	9885883a 	add	r2,r19,r2
   219d4:	1880ee26 	beq	r3,r2,21d90 <_realloc_r+0x490>
   219d8:	81bfff04 	addi	r6,r16,-4
   219dc:	00800904 	movi	r2,36
   219e0:	1180b836 	bltu	r2,r6,21cc4 <_realloc_r+0x3c4>
   219e4:	00c004c4 	movi	r3,19
   219e8:	19809636 	bltu	r3,r6,21c44 <_realloc_r+0x344>
   219ec:	9005883a 	mov	r2,r18
   219f0:	a807883a 	mov	r3,r21
   219f4:	19000017 	ldw	r4,0(r3)
   219f8:	11000015 	stw	r4,0(r2)
   219fc:	19000117 	ldw	r4,4(r3)
   21a00:	11000115 	stw	r4,4(r2)
   21a04:	18c00217 	ldw	r3,8(r3)
   21a08:	10c00215 	stw	r3,8(r2)
   21a0c:	a80b883a 	mov	r5,r21
   21a10:	a009883a 	mov	r4,r20
   21a14:	00226cc0 	call	226cc <_free_r>
   21a18:	a009883a 	mov	r4,r20
   21a1c:	00234a40 	call	234a4 <__malloc_unlock>
   21a20:	9005883a 	mov	r2,r18
   21a24:	00001206 	br	21a70 <_realloc_r+0x170>
   21a28:	00c00404 	movi	r3,16
   21a2c:	1823883a 	mov	r17,r3
   21a30:	003fce06 	br	2196c <_realloc_r+0x6c>
   21a34:	a825883a 	mov	r18,r21
   21a38:	8445c83a 	sub	r2,r16,r17
   21a3c:	00c003c4 	movi	r3,15
   21a40:	18802636 	bltu	r3,r2,21adc <_realloc_r+0x1dc>
   21a44:	99800117 	ldw	r6,4(r19)
   21a48:	9c07883a 	add	r3,r19,r16
   21a4c:	3180004c 	andi	r6,r6,1
   21a50:	3420b03a 	or	r16,r6,r16
   21a54:	9c000115 	stw	r16,4(r19)
   21a58:	18800117 	ldw	r2,4(r3)
   21a5c:	10800054 	ori	r2,r2,1
   21a60:	18800115 	stw	r2,4(r3)
   21a64:	a009883a 	mov	r4,r20
   21a68:	00234a40 	call	234a4 <__malloc_unlock>
   21a6c:	9005883a 	mov	r2,r18
   21a70:	dfc00917 	ldw	ra,36(sp)
   21a74:	df000817 	ldw	fp,32(sp)
   21a78:	ddc00717 	ldw	r23,28(sp)
   21a7c:	dd800617 	ldw	r22,24(sp)
   21a80:	dd400517 	ldw	r21,20(sp)
   21a84:	dd000417 	ldw	r20,16(sp)
   21a88:	dcc00317 	ldw	r19,12(sp)
   21a8c:	dc800217 	ldw	r18,8(sp)
   21a90:	dc400117 	ldw	r17,4(sp)
   21a94:	dc000017 	ldw	r16,0(sp)
   21a98:	dec00a04 	addi	sp,sp,40
   21a9c:	f800283a 	ret
   21aa0:	017fff04 	movi	r5,-4
   21aa4:	414a703a 	and	r5,r8,r5
   21aa8:	814d883a 	add	r6,r16,r5
   21aac:	30c01f16 	blt	r6,r3,21b2c <_realloc_r+0x22c>
   21ab0:	20800317 	ldw	r2,12(r4)
   21ab4:	20c00217 	ldw	r3,8(r4)
   21ab8:	a825883a 	mov	r18,r21
   21abc:	3021883a 	mov	r16,r6
   21ac0:	18800315 	stw	r2,12(r3)
   21ac4:	10c00215 	stw	r3,8(r2)
   21ac8:	003fdb06 	br	21a38 <_realloc_r+0x138>
   21acc:	00800304 	movi	r2,12
   21ad0:	a0800015 	stw	r2,0(r20)
   21ad4:	0005883a 	mov	r2,zero
   21ad8:	003fe506 	br	21a70 <_realloc_r+0x170>
   21adc:	98c00117 	ldw	r3,4(r19)
   21ae0:	9c4b883a 	add	r5,r19,r17
   21ae4:	11000054 	ori	r4,r2,1
   21ae8:	18c0004c 	andi	r3,r3,1
   21aec:	1c62b03a 	or	r17,r3,r17
   21af0:	9c400115 	stw	r17,4(r19)
   21af4:	29000115 	stw	r4,4(r5)
   21af8:	2885883a 	add	r2,r5,r2
   21afc:	10c00117 	ldw	r3,4(r2)
   21b00:	29400204 	addi	r5,r5,8
   21b04:	a009883a 	mov	r4,r20
   21b08:	18c00054 	ori	r3,r3,1
   21b0c:	10c00115 	stw	r3,4(r2)
   21b10:	00226cc0 	call	226cc <_free_r>
   21b14:	003fd306 	br	21a64 <_realloc_r+0x164>
   21b18:	017fff04 	movi	r5,-4
   21b1c:	414a703a 	and	r5,r8,r5
   21b20:	89800404 	addi	r6,r17,16
   21b24:	8151883a 	add	r8,r16,r5
   21b28:	4180590e 	bge	r8,r6,21c90 <_realloc_r+0x390>
   21b2c:	1080004c 	andi	r2,r2,1
   21b30:	103f9e1e 	bne	r2,zero,219ac <_realloc_r+0xac>
   21b34:	adbffe17 	ldw	r22,-8(r21)
   21b38:	00bfff04 	movi	r2,-4
   21b3c:	9dadc83a 	sub	r22,r19,r22
   21b40:	b1800117 	ldw	r6,4(r22)
   21b44:	3084703a 	and	r2,r6,r2
   21b48:	20002026 	beq	r4,zero,21bcc <_realloc_r+0x2cc>
   21b4c:	80af883a 	add	r23,r16,r2
   21b50:	b96f883a 	add	r23,r23,r5
   21b54:	21c05f26 	beq	r4,r7,21cd4 <_realloc_r+0x3d4>
   21b58:	b8c01c16 	blt	r23,r3,21bcc <_realloc_r+0x2cc>
   21b5c:	20800317 	ldw	r2,12(r4)
   21b60:	20c00217 	ldw	r3,8(r4)
   21b64:	81bfff04 	addi	r6,r16,-4
   21b68:	01000904 	movi	r4,36
   21b6c:	18800315 	stw	r2,12(r3)
   21b70:	10c00215 	stw	r3,8(r2)
   21b74:	b0c00217 	ldw	r3,8(r22)
   21b78:	b0800317 	ldw	r2,12(r22)
   21b7c:	b4800204 	addi	r18,r22,8
   21b80:	18800315 	stw	r2,12(r3)
   21b84:	10c00215 	stw	r3,8(r2)
   21b88:	21801b36 	bltu	r4,r6,21bf8 <_realloc_r+0x2f8>
   21b8c:	008004c4 	movi	r2,19
   21b90:	1180352e 	bgeu	r2,r6,21c68 <_realloc_r+0x368>
   21b94:	a8800017 	ldw	r2,0(r21)
   21b98:	b0800215 	stw	r2,8(r22)
   21b9c:	a8800117 	ldw	r2,4(r21)
   21ba0:	b0800315 	stw	r2,12(r22)
   21ba4:	008006c4 	movi	r2,27
   21ba8:	11807f36 	bltu	r2,r6,21da8 <_realloc_r+0x4a8>
   21bac:	b0800404 	addi	r2,r22,16
   21bb0:	ad400204 	addi	r21,r21,8
   21bb4:	00002d06 	br	21c6c <_realloc_r+0x36c>
   21bb8:	adbffe17 	ldw	r22,-8(r21)
   21bbc:	00bfff04 	movi	r2,-4
   21bc0:	9dadc83a 	sub	r22,r19,r22
   21bc4:	b1000117 	ldw	r4,4(r22)
   21bc8:	2084703a 	and	r2,r4,r2
   21bcc:	b03f7726 	beq	r22,zero,219ac <_realloc_r+0xac>
   21bd0:	80af883a 	add	r23,r16,r2
   21bd4:	b8ff7516 	blt	r23,r3,219ac <_realloc_r+0xac>
   21bd8:	b0800317 	ldw	r2,12(r22)
   21bdc:	b0c00217 	ldw	r3,8(r22)
   21be0:	81bfff04 	addi	r6,r16,-4
   21be4:	01000904 	movi	r4,36
   21be8:	18800315 	stw	r2,12(r3)
   21bec:	10c00215 	stw	r3,8(r2)
   21bf0:	b4800204 	addi	r18,r22,8
   21bf4:	21bfe52e 	bgeu	r4,r6,21b8c <_realloc_r+0x28c>
   21bf8:	a80b883a 	mov	r5,r21
   21bfc:	9009883a 	mov	r4,r18
   21c00:	002167c0 	call	2167c <memmove>
   21c04:	b821883a 	mov	r16,r23
   21c08:	b027883a 	mov	r19,r22
   21c0c:	003f8a06 	br	21a38 <_realloc_r+0x138>
   21c10:	300b883a 	mov	r5,r6
   21c14:	dfc00917 	ldw	ra,36(sp)
   21c18:	df000817 	ldw	fp,32(sp)
   21c1c:	ddc00717 	ldw	r23,28(sp)
   21c20:	dd800617 	ldw	r22,24(sp)
   21c24:	dd400517 	ldw	r21,20(sp)
   21c28:	dd000417 	ldw	r20,16(sp)
   21c2c:	dcc00317 	ldw	r19,12(sp)
   21c30:	dc800217 	ldw	r18,8(sp)
   21c34:	dc400117 	ldw	r17,4(sp)
   21c38:	dc000017 	ldw	r16,0(sp)
   21c3c:	dec00a04 	addi	sp,sp,40
   21c40:	0020c441 	jmpi	20c44 <_malloc_r>
   21c44:	a8c00017 	ldw	r3,0(r21)
   21c48:	90c00015 	stw	r3,0(r18)
   21c4c:	a8c00117 	ldw	r3,4(r21)
   21c50:	90c00115 	stw	r3,4(r18)
   21c54:	00c006c4 	movi	r3,27
   21c58:	19804536 	bltu	r3,r6,21d70 <_realloc_r+0x470>
   21c5c:	90800204 	addi	r2,r18,8
   21c60:	a8c00204 	addi	r3,r21,8
   21c64:	003f6306 	br	219f4 <_realloc_r+0xf4>
   21c68:	9005883a 	mov	r2,r18
   21c6c:	a8c00017 	ldw	r3,0(r21)
   21c70:	b821883a 	mov	r16,r23
   21c74:	b027883a 	mov	r19,r22
   21c78:	10c00015 	stw	r3,0(r2)
   21c7c:	a8c00117 	ldw	r3,4(r21)
   21c80:	10c00115 	stw	r3,4(r2)
   21c84:	a8c00217 	ldw	r3,8(r21)
   21c88:	10c00215 	stw	r3,8(r2)
   21c8c:	003f6a06 	br	21a38 <_realloc_r+0x138>
   21c90:	9c67883a 	add	r19,r19,r17
   21c94:	4445c83a 	sub	r2,r8,r17
   21c98:	e4c00215 	stw	r19,8(fp)
   21c9c:	10800054 	ori	r2,r2,1
   21ca0:	98800115 	stw	r2,4(r19)
   21ca4:	a8bfff17 	ldw	r2,-4(r21)
   21ca8:	a009883a 	mov	r4,r20
   21cac:	1080004c 	andi	r2,r2,1
   21cb0:	1462b03a 	or	r17,r2,r17
   21cb4:	ac7fff15 	stw	r17,-4(r21)
   21cb8:	00234a40 	call	234a4 <__malloc_unlock>
   21cbc:	a805883a 	mov	r2,r21
   21cc0:	003f6b06 	br	21a70 <_realloc_r+0x170>
   21cc4:	a80b883a 	mov	r5,r21
   21cc8:	9009883a 	mov	r4,r18
   21ccc:	002167c0 	call	2167c <memmove>
   21cd0:	003f4e06 	br	21a0c <_realloc_r+0x10c>
   21cd4:	89000404 	addi	r4,r17,16
   21cd8:	b93fbc16 	blt	r23,r4,21bcc <_realloc_r+0x2cc>
   21cdc:	b0800317 	ldw	r2,12(r22)
   21ce0:	b0c00217 	ldw	r3,8(r22)
   21ce4:	81bfff04 	addi	r6,r16,-4
   21ce8:	01000904 	movi	r4,36
   21cec:	18800315 	stw	r2,12(r3)
   21cf0:	10c00215 	stw	r3,8(r2)
   21cf4:	b4800204 	addi	r18,r22,8
   21cf8:	21804336 	bltu	r4,r6,21e08 <_realloc_r+0x508>
   21cfc:	008004c4 	movi	r2,19
   21d00:	11803f2e 	bgeu	r2,r6,21e00 <_realloc_r+0x500>
   21d04:	a8800017 	ldw	r2,0(r21)
   21d08:	b0800215 	stw	r2,8(r22)
   21d0c:	a8800117 	ldw	r2,4(r21)
   21d10:	b0800315 	stw	r2,12(r22)
   21d14:	008006c4 	movi	r2,27
   21d18:	11803f36 	bltu	r2,r6,21e18 <_realloc_r+0x518>
   21d1c:	b0800404 	addi	r2,r22,16
   21d20:	ad400204 	addi	r21,r21,8
   21d24:	a8c00017 	ldw	r3,0(r21)
   21d28:	10c00015 	stw	r3,0(r2)
   21d2c:	a8c00117 	ldw	r3,4(r21)
   21d30:	10c00115 	stw	r3,4(r2)
   21d34:	a8c00217 	ldw	r3,8(r21)
   21d38:	10c00215 	stw	r3,8(r2)
   21d3c:	b447883a 	add	r3,r22,r17
   21d40:	bc45c83a 	sub	r2,r23,r17
   21d44:	e0c00215 	stw	r3,8(fp)
   21d48:	10800054 	ori	r2,r2,1
   21d4c:	18800115 	stw	r2,4(r3)
   21d50:	b0800117 	ldw	r2,4(r22)
   21d54:	a009883a 	mov	r4,r20
   21d58:	1080004c 	andi	r2,r2,1
   21d5c:	1462b03a 	or	r17,r2,r17
   21d60:	b4400115 	stw	r17,4(r22)
   21d64:	00234a40 	call	234a4 <__malloc_unlock>
   21d68:	9005883a 	mov	r2,r18
   21d6c:	003f4006 	br	21a70 <_realloc_r+0x170>
   21d70:	a8c00217 	ldw	r3,8(r21)
   21d74:	90c00215 	stw	r3,8(r18)
   21d78:	a8c00317 	ldw	r3,12(r21)
   21d7c:	90c00315 	stw	r3,12(r18)
   21d80:	30801126 	beq	r6,r2,21dc8 <_realloc_r+0x4c8>
   21d84:	90800404 	addi	r2,r18,16
   21d88:	a8c00404 	addi	r3,r21,16
   21d8c:	003f1906 	br	219f4 <_realloc_r+0xf4>
   21d90:	90ffff17 	ldw	r3,-4(r18)
   21d94:	00bfff04 	movi	r2,-4
   21d98:	a825883a 	mov	r18,r21
   21d9c:	1884703a 	and	r2,r3,r2
   21da0:	80a1883a 	add	r16,r16,r2
   21da4:	003f2406 	br	21a38 <_realloc_r+0x138>
   21da8:	a8800217 	ldw	r2,8(r21)
   21dac:	b0800415 	stw	r2,16(r22)
   21db0:	a8800317 	ldw	r2,12(r21)
   21db4:	b0800515 	stw	r2,20(r22)
   21db8:	31000a26 	beq	r6,r4,21de4 <_realloc_r+0x4e4>
   21dbc:	b0800604 	addi	r2,r22,24
   21dc0:	ad400404 	addi	r21,r21,16
   21dc4:	003fa906 	br	21c6c <_realloc_r+0x36c>
   21dc8:	a9000417 	ldw	r4,16(r21)
   21dcc:	90800604 	addi	r2,r18,24
   21dd0:	a8c00604 	addi	r3,r21,24
   21dd4:	91000415 	stw	r4,16(r18)
   21dd8:	a9000517 	ldw	r4,20(r21)
   21ddc:	91000515 	stw	r4,20(r18)
   21de0:	003f0406 	br	219f4 <_realloc_r+0xf4>
   21de4:	a8c00417 	ldw	r3,16(r21)
   21de8:	ad400604 	addi	r21,r21,24
   21dec:	b0800804 	addi	r2,r22,32
   21df0:	b0c00615 	stw	r3,24(r22)
   21df4:	a8ffff17 	ldw	r3,-4(r21)
   21df8:	b0c00715 	stw	r3,28(r22)
   21dfc:	003f9b06 	br	21c6c <_realloc_r+0x36c>
   21e00:	9005883a 	mov	r2,r18
   21e04:	003fc706 	br	21d24 <_realloc_r+0x424>
   21e08:	a80b883a 	mov	r5,r21
   21e0c:	9009883a 	mov	r4,r18
   21e10:	002167c0 	call	2167c <memmove>
   21e14:	003fc906 	br	21d3c <_realloc_r+0x43c>
   21e18:	a8800217 	ldw	r2,8(r21)
   21e1c:	b0800415 	stw	r2,16(r22)
   21e20:	a8800317 	ldw	r2,12(r21)
   21e24:	b0800515 	stw	r2,20(r22)
   21e28:	31000726 	beq	r6,r4,21e48 <_realloc_r+0x548>
   21e2c:	b0800604 	addi	r2,r22,24
   21e30:	ad400404 	addi	r21,r21,16
   21e34:	003fbb06 	br	21d24 <_realloc_r+0x424>
   21e38:	a009883a 	mov	r4,r20
   21e3c:	00234a40 	call	234a4 <__malloc_unlock>
   21e40:	0005883a 	mov	r2,zero
   21e44:	003f0a06 	br	21a70 <_realloc_r+0x170>
   21e48:	a8c00417 	ldw	r3,16(r21)
   21e4c:	ad400604 	addi	r21,r21,24
   21e50:	b0800804 	addi	r2,r22,32
   21e54:	b0c00615 	stw	r3,24(r22)
   21e58:	a8ffff17 	ldw	r3,-4(r21)
   21e5c:	b0c00715 	stw	r3,28(r22)
   21e60:	003fb006 	br	21d24 <_realloc_r+0x424>

00021e64 <_sbrk_r>:
   21e64:	defffd04 	addi	sp,sp,-12
   21e68:	dc000015 	stw	r16,0(sp)
   21e6c:	040000b4 	movhi	r16,2
   21e70:	dc400115 	stw	r17,4(sp)
   21e74:	84175d04 	addi	r16,r16,23924
   21e78:	2023883a 	mov	r17,r4
   21e7c:	2809883a 	mov	r4,r5
   21e80:	dfc00215 	stw	ra,8(sp)
   21e84:	80000015 	stw	zero,0(r16)
   21e88:	002368c0 	call	2368c <sbrk>
   21e8c:	00ffffc4 	movi	r3,-1
   21e90:	10c00526 	beq	r2,r3,21ea8 <_sbrk_r+0x44>
   21e94:	dfc00217 	ldw	ra,8(sp)
   21e98:	dc400117 	ldw	r17,4(sp)
   21e9c:	dc000017 	ldw	r16,0(sp)
   21ea0:	dec00304 	addi	sp,sp,12
   21ea4:	f800283a 	ret
   21ea8:	80c00017 	ldw	r3,0(r16)
   21eac:	183ff926 	beq	r3,zero,21e94 <_sbrk_r+0x30>
   21eb0:	88c00015 	stw	r3,0(r17)
   21eb4:	003ff706 	br	21e94 <_sbrk_r+0x30>

00021eb8 <__sread>:
   21eb8:	defffe04 	addi	sp,sp,-8
   21ebc:	dc000015 	stw	r16,0(sp)
   21ec0:	2821883a 	mov	r16,r5
   21ec4:	2940038f 	ldh	r5,14(r5)
   21ec8:	dfc00115 	stw	ra,4(sp)
   21ecc:	0022bf80 	call	22bf8 <_read_r>
   21ed0:	10000716 	blt	r2,zero,21ef0 <__sread+0x38>
   21ed4:	80c01417 	ldw	r3,80(r16)
   21ed8:	1887883a 	add	r3,r3,r2
   21edc:	80c01415 	stw	r3,80(r16)
   21ee0:	dfc00117 	ldw	ra,4(sp)
   21ee4:	dc000017 	ldw	r16,0(sp)
   21ee8:	dec00204 	addi	sp,sp,8
   21eec:	f800283a 	ret
   21ef0:	80c0030b 	ldhu	r3,12(r16)
   21ef4:	18fbffcc 	andi	r3,r3,61439
   21ef8:	80c0030d 	sth	r3,12(r16)
   21efc:	dfc00117 	ldw	ra,4(sp)
   21f00:	dc000017 	ldw	r16,0(sp)
   21f04:	dec00204 	addi	sp,sp,8
   21f08:	f800283a 	ret

00021f0c <__seofread>:
   21f0c:	0005883a 	mov	r2,zero
   21f10:	f800283a 	ret

00021f14 <__swrite>:
   21f14:	2880030b 	ldhu	r2,12(r5)
   21f18:	defffb04 	addi	sp,sp,-20
   21f1c:	dcc00315 	stw	r19,12(sp)
   21f20:	dc800215 	stw	r18,8(sp)
   21f24:	dc400115 	stw	r17,4(sp)
   21f28:	dc000015 	stw	r16,0(sp)
   21f2c:	dfc00415 	stw	ra,16(sp)
   21f30:	10c0400c 	andi	r3,r2,256
   21f34:	2821883a 	mov	r16,r5
   21f38:	2023883a 	mov	r17,r4
   21f3c:	3025883a 	mov	r18,r6
   21f40:	3827883a 	mov	r19,r7
   21f44:	18000526 	beq	r3,zero,21f5c <__swrite+0x48>
   21f48:	2940038f 	ldh	r5,14(r5)
   21f4c:	01c00084 	movi	r7,2
   21f50:	000d883a 	mov	r6,zero
   21f54:	00229dc0 	call	229dc <_lseek_r>
   21f58:	8080030b 	ldhu	r2,12(r16)
   21f5c:	8140038f 	ldh	r5,14(r16)
   21f60:	10bbffcc 	andi	r2,r2,61439
   21f64:	980f883a 	mov	r7,r19
   21f68:	900d883a 	mov	r6,r18
   21f6c:	8809883a 	mov	r4,r17
   21f70:	8080030d 	sth	r2,12(r16)
   21f74:	dfc00417 	ldw	ra,16(sp)
   21f78:	dcc00317 	ldw	r19,12(sp)
   21f7c:	dc800217 	ldw	r18,8(sp)
   21f80:	dc400117 	ldw	r17,4(sp)
   21f84:	dc000017 	ldw	r16,0(sp)
   21f88:	dec00504 	addi	sp,sp,20
   21f8c:	0021ff41 	jmpi	21ff4 <_write_r>

00021f90 <__sseek>:
   21f90:	defffe04 	addi	sp,sp,-8
   21f94:	dc000015 	stw	r16,0(sp)
   21f98:	2821883a 	mov	r16,r5
   21f9c:	2940038f 	ldh	r5,14(r5)
   21fa0:	dfc00115 	stw	ra,4(sp)
   21fa4:	00229dc0 	call	229dc <_lseek_r>
   21fa8:	00ffffc4 	movi	r3,-1
   21fac:	10c00826 	beq	r2,r3,21fd0 <__sseek+0x40>
   21fb0:	80c0030b 	ldhu	r3,12(r16)
   21fb4:	80801415 	stw	r2,80(r16)
   21fb8:	18c40014 	ori	r3,r3,4096
   21fbc:	80c0030d 	sth	r3,12(r16)
   21fc0:	dfc00117 	ldw	ra,4(sp)
   21fc4:	dc000017 	ldw	r16,0(sp)
   21fc8:	dec00204 	addi	sp,sp,8
   21fcc:	f800283a 	ret
   21fd0:	80c0030b 	ldhu	r3,12(r16)
   21fd4:	18fbffcc 	andi	r3,r3,61439
   21fd8:	80c0030d 	sth	r3,12(r16)
   21fdc:	dfc00117 	ldw	ra,4(sp)
   21fe0:	dc000017 	ldw	r16,0(sp)
   21fe4:	dec00204 	addi	sp,sp,8
   21fe8:	f800283a 	ret

00021fec <__sclose>:
   21fec:	2940038f 	ldh	r5,14(r5)
   21ff0:	00221a81 	jmpi	221a8 <_close_r>

00021ff4 <_write_r>:
   21ff4:	defffd04 	addi	sp,sp,-12
   21ff8:	2805883a 	mov	r2,r5
   21ffc:	dc000015 	stw	r16,0(sp)
   22000:	040000b4 	movhi	r16,2
   22004:	dc400115 	stw	r17,4(sp)
   22008:	300b883a 	mov	r5,r6
   2200c:	84175d04 	addi	r16,r16,23924
   22010:	2023883a 	mov	r17,r4
   22014:	380d883a 	mov	r6,r7
   22018:	1009883a 	mov	r4,r2
   2201c:	dfc00215 	stw	ra,8(sp)
   22020:	80000015 	stw	zero,0(r16)
   22024:	00237a80 	call	237a8 <write>
   22028:	00ffffc4 	movi	r3,-1
   2202c:	10c00526 	beq	r2,r3,22044 <_write_r+0x50>
   22030:	dfc00217 	ldw	ra,8(sp)
   22034:	dc400117 	ldw	r17,4(sp)
   22038:	dc000017 	ldw	r16,0(sp)
   2203c:	dec00304 	addi	sp,sp,12
   22040:	f800283a 	ret
   22044:	80c00017 	ldw	r3,0(r16)
   22048:	183ff926 	beq	r3,zero,22030 <_write_r+0x3c>
   2204c:	88c00015 	stw	r3,0(r17)
   22050:	003ff706 	br	22030 <_write_r+0x3c>

00022054 <__swsetup_r>:
   22054:	008000b4 	movhi	r2,2
   22058:	defffd04 	addi	sp,sp,-12
   2205c:	1094c504 	addi	r2,r2,21268
   22060:	dc400115 	stw	r17,4(sp)
   22064:	2023883a 	mov	r17,r4
   22068:	11000017 	ldw	r4,0(r2)
   2206c:	dc000015 	stw	r16,0(sp)
   22070:	dfc00215 	stw	ra,8(sp)
   22074:	2821883a 	mov	r16,r5
   22078:	20000226 	beq	r4,zero,22084 <__swsetup_r+0x30>
   2207c:	20800e17 	ldw	r2,56(r4)
   22080:	10003126 	beq	r2,zero,22148 <__swsetup_r+0xf4>
   22084:	8080030b 	ldhu	r2,12(r16)
   22088:	10c0020c 	andi	r3,r2,8
   2208c:	1009883a 	mov	r4,r2
   22090:	18000f26 	beq	r3,zero,220d0 <__swsetup_r+0x7c>
   22094:	80c00417 	ldw	r3,16(r16)
   22098:	18001526 	beq	r3,zero,220f0 <__swsetup_r+0x9c>
   2209c:	1100004c 	andi	r4,r2,1
   220a0:	20001c1e 	bne	r4,zero,22114 <__swsetup_r+0xc0>
   220a4:	1080008c 	andi	r2,r2,2
   220a8:	1000291e 	bne	r2,zero,22150 <__swsetup_r+0xfc>
   220ac:	80800517 	ldw	r2,20(r16)
   220b0:	80800215 	stw	r2,8(r16)
   220b4:	18001c26 	beq	r3,zero,22128 <__swsetup_r+0xd4>
   220b8:	0005883a 	mov	r2,zero
   220bc:	dfc00217 	ldw	ra,8(sp)
   220c0:	dc400117 	ldw	r17,4(sp)
   220c4:	dc000017 	ldw	r16,0(sp)
   220c8:	dec00304 	addi	sp,sp,12
   220cc:	f800283a 	ret
   220d0:	2080040c 	andi	r2,r4,16
   220d4:	10002e26 	beq	r2,zero,22190 <__swsetup_r+0x13c>
   220d8:	2080010c 	andi	r2,r4,4
   220dc:	10001e1e 	bne	r2,zero,22158 <__swsetup_r+0x104>
   220e0:	80c00417 	ldw	r3,16(r16)
   220e4:	20800214 	ori	r2,r4,8
   220e8:	8080030d 	sth	r2,12(r16)
   220ec:	183feb1e 	bne	r3,zero,2209c <__swsetup_r+0x48>
   220f0:	1100a00c 	andi	r4,r2,640
   220f4:	01408004 	movi	r5,512
   220f8:	217fe826 	beq	r4,r5,2209c <__swsetup_r+0x48>
   220fc:	800b883a 	mov	r5,r16
   22100:	8809883a 	mov	r4,r17
   22104:	0022a3c0 	call	22a3c <__smakebuf_r>
   22108:	8080030b 	ldhu	r2,12(r16)
   2210c:	80c00417 	ldw	r3,16(r16)
   22110:	003fe206 	br	2209c <__swsetup_r+0x48>
   22114:	80800517 	ldw	r2,20(r16)
   22118:	80000215 	stw	zero,8(r16)
   2211c:	0085c83a 	sub	r2,zero,r2
   22120:	80800615 	stw	r2,24(r16)
   22124:	183fe41e 	bne	r3,zero,220b8 <__swsetup_r+0x64>
   22128:	80c0030b 	ldhu	r3,12(r16)
   2212c:	0005883a 	mov	r2,zero
   22130:	1900200c 	andi	r4,r3,128
   22134:	203fe126 	beq	r4,zero,220bc <__swsetup_r+0x68>
   22138:	18c01014 	ori	r3,r3,64
   2213c:	80c0030d 	sth	r3,12(r16)
   22140:	00bfffc4 	movi	r2,-1
   22144:	003fdd06 	br	220bc <__swsetup_r+0x68>
   22148:	00205a40 	call	205a4 <__sinit>
   2214c:	003fcd06 	br	22084 <__swsetup_r+0x30>
   22150:	0005883a 	mov	r2,zero
   22154:	003fd606 	br	220b0 <__swsetup_r+0x5c>
   22158:	81400c17 	ldw	r5,48(r16)
   2215c:	28000626 	beq	r5,zero,22178 <__swsetup_r+0x124>
   22160:	80801004 	addi	r2,r16,64
   22164:	28800326 	beq	r5,r2,22174 <__swsetup_r+0x120>
   22168:	8809883a 	mov	r4,r17
   2216c:	00226cc0 	call	226cc <_free_r>
   22170:	8100030b 	ldhu	r4,12(r16)
   22174:	80000c15 	stw	zero,48(r16)
   22178:	80c00417 	ldw	r3,16(r16)
   2217c:	00bff6c4 	movi	r2,-37
   22180:	1108703a 	and	r4,r2,r4
   22184:	80000115 	stw	zero,4(r16)
   22188:	80c00015 	stw	r3,0(r16)
   2218c:	003fd506 	br	220e4 <__swsetup_r+0x90>
   22190:	00800244 	movi	r2,9
   22194:	88800015 	stw	r2,0(r17)
   22198:	20801014 	ori	r2,r4,64
   2219c:	8080030d 	sth	r2,12(r16)
   221a0:	00bfffc4 	movi	r2,-1
   221a4:	003fc506 	br	220bc <__swsetup_r+0x68>

000221a8 <_close_r>:
   221a8:	defffd04 	addi	sp,sp,-12
   221ac:	dc000015 	stw	r16,0(sp)
   221b0:	040000b4 	movhi	r16,2
   221b4:	dc400115 	stw	r17,4(sp)
   221b8:	84175d04 	addi	r16,r16,23924
   221bc:	2023883a 	mov	r17,r4
   221c0:	2809883a 	mov	r4,r5
   221c4:	dfc00215 	stw	ra,8(sp)
   221c8:	80000015 	stw	zero,0(r16)
   221cc:	0022f200 	call	22f20 <close>
   221d0:	00ffffc4 	movi	r3,-1
   221d4:	10c00526 	beq	r2,r3,221ec <_close_r+0x44>
   221d8:	dfc00217 	ldw	ra,8(sp)
   221dc:	dc400117 	ldw	r17,4(sp)
   221e0:	dc000017 	ldw	r16,0(sp)
   221e4:	dec00304 	addi	sp,sp,12
   221e8:	f800283a 	ret
   221ec:	80c00017 	ldw	r3,0(r16)
   221f0:	183ff926 	beq	r3,zero,221d8 <_close_r+0x30>
   221f4:	88c00015 	stw	r3,0(r17)
   221f8:	003ff706 	br	221d8 <_close_r+0x30>

000221fc <_fclose_r>:
   221fc:	28003926 	beq	r5,zero,222e4 <_fclose_r+0xe8>
   22200:	defffc04 	addi	sp,sp,-16
   22204:	dc400115 	stw	r17,4(sp)
   22208:	dc000015 	stw	r16,0(sp)
   2220c:	dfc00315 	stw	ra,12(sp)
   22210:	dc800215 	stw	r18,8(sp)
   22214:	2023883a 	mov	r17,r4
   22218:	2821883a 	mov	r16,r5
   2221c:	20000226 	beq	r4,zero,22228 <_fclose_r+0x2c>
   22220:	20800e17 	ldw	r2,56(r4)
   22224:	10002726 	beq	r2,zero,222c4 <_fclose_r+0xc8>
   22228:	8080030f 	ldh	r2,12(r16)
   2222c:	1000071e 	bne	r2,zero,2224c <_fclose_r+0x50>
   22230:	0005883a 	mov	r2,zero
   22234:	dfc00317 	ldw	ra,12(sp)
   22238:	dc800217 	ldw	r18,8(sp)
   2223c:	dc400117 	ldw	r17,4(sp)
   22240:	dc000017 	ldw	r16,0(sp)
   22244:	dec00404 	addi	sp,sp,16
   22248:	f800283a 	ret
   2224c:	800b883a 	mov	r5,r16
   22250:	8809883a 	mov	r4,r17
   22254:	00223000 	call	22300 <__sflush_r>
   22258:	1025883a 	mov	r18,r2
   2225c:	80800b17 	ldw	r2,44(r16)
   22260:	10000426 	beq	r2,zero,22274 <_fclose_r+0x78>
   22264:	81400717 	ldw	r5,28(r16)
   22268:	8809883a 	mov	r4,r17
   2226c:	103ee83a 	callr	r2
   22270:	10001616 	blt	r2,zero,222cc <_fclose_r+0xd0>
   22274:	8080030b 	ldhu	r2,12(r16)
   22278:	1080200c 	andi	r2,r2,128
   2227c:	1000151e 	bne	r2,zero,222d4 <_fclose_r+0xd8>
   22280:	81400c17 	ldw	r5,48(r16)
   22284:	28000526 	beq	r5,zero,2229c <_fclose_r+0xa0>
   22288:	80801004 	addi	r2,r16,64
   2228c:	28800226 	beq	r5,r2,22298 <_fclose_r+0x9c>
   22290:	8809883a 	mov	r4,r17
   22294:	00226cc0 	call	226cc <_free_r>
   22298:	80000c15 	stw	zero,48(r16)
   2229c:	81401117 	ldw	r5,68(r16)
   222a0:	28000326 	beq	r5,zero,222b0 <_fclose_r+0xb4>
   222a4:	8809883a 	mov	r4,r17
   222a8:	00226cc0 	call	226cc <_free_r>
   222ac:	80001115 	stw	zero,68(r16)
   222b0:	00205b40 	call	205b4 <__sfp_lock_acquire>
   222b4:	8000030d 	sth	zero,12(r16)
   222b8:	00205b80 	call	205b8 <__sfp_lock_release>
   222bc:	9005883a 	mov	r2,r18
   222c0:	003fdc06 	br	22234 <_fclose_r+0x38>
   222c4:	00205a40 	call	205a4 <__sinit>
   222c8:	003fd706 	br	22228 <_fclose_r+0x2c>
   222cc:	04bfffc4 	movi	r18,-1
   222d0:	003fe806 	br	22274 <_fclose_r+0x78>
   222d4:	81400417 	ldw	r5,16(r16)
   222d8:	8809883a 	mov	r4,r17
   222dc:	00226cc0 	call	226cc <_free_r>
   222e0:	003fe706 	br	22280 <_fclose_r+0x84>
   222e4:	0005883a 	mov	r2,zero
   222e8:	f800283a 	ret

000222ec <fclose>:
   222ec:	008000b4 	movhi	r2,2
   222f0:	1094c504 	addi	r2,r2,21268
   222f4:	200b883a 	mov	r5,r4
   222f8:	11000017 	ldw	r4,0(r2)
   222fc:	00221fc1 	jmpi	221fc <_fclose_r>

00022300 <__sflush_r>:
   22300:	2880030b 	ldhu	r2,12(r5)
   22304:	defffb04 	addi	sp,sp,-20
   22308:	dcc00315 	stw	r19,12(sp)
   2230c:	dc400115 	stw	r17,4(sp)
   22310:	dfc00415 	stw	ra,16(sp)
   22314:	dc800215 	stw	r18,8(sp)
   22318:	dc000015 	stw	r16,0(sp)
   2231c:	10c0020c 	andi	r3,r2,8
   22320:	2823883a 	mov	r17,r5
   22324:	2027883a 	mov	r19,r4
   22328:	1800311e 	bne	r3,zero,223f0 <__sflush_r+0xf0>
   2232c:	28c00117 	ldw	r3,4(r5)
   22330:	10820014 	ori	r2,r2,2048
   22334:	2880030d 	sth	r2,12(r5)
   22338:	00c04b0e 	bge	zero,r3,22468 <__sflush_r+0x168>
   2233c:	8a000a17 	ldw	r8,40(r17)
   22340:	40002326 	beq	r8,zero,223d0 <__sflush_r+0xd0>
   22344:	9c000017 	ldw	r16,0(r19)
   22348:	10c4000c 	andi	r3,r2,4096
   2234c:	98000015 	stw	zero,0(r19)
   22350:	18004826 	beq	r3,zero,22474 <__sflush_r+0x174>
   22354:	89801417 	ldw	r6,80(r17)
   22358:	10c0010c 	andi	r3,r2,4
   2235c:	18000626 	beq	r3,zero,22378 <__sflush_r+0x78>
   22360:	88c00117 	ldw	r3,4(r17)
   22364:	88800c17 	ldw	r2,48(r17)
   22368:	30cdc83a 	sub	r6,r6,r3
   2236c:	10000226 	beq	r2,zero,22378 <__sflush_r+0x78>
   22370:	88800f17 	ldw	r2,60(r17)
   22374:	308dc83a 	sub	r6,r6,r2
   22378:	89400717 	ldw	r5,28(r17)
   2237c:	000f883a 	mov	r7,zero
   22380:	9809883a 	mov	r4,r19
   22384:	403ee83a 	callr	r8
   22388:	00ffffc4 	movi	r3,-1
   2238c:	10c04426 	beq	r2,r3,224a0 <__sflush_r+0x1a0>
   22390:	88c0030b 	ldhu	r3,12(r17)
   22394:	89000417 	ldw	r4,16(r17)
   22398:	88000115 	stw	zero,4(r17)
   2239c:	197dffcc 	andi	r5,r3,63487
   223a0:	8940030d 	sth	r5,12(r17)
   223a4:	89000015 	stw	r4,0(r17)
   223a8:	18c4000c 	andi	r3,r3,4096
   223ac:	18002c1e 	bne	r3,zero,22460 <__sflush_r+0x160>
   223b0:	89400c17 	ldw	r5,48(r17)
   223b4:	9c000015 	stw	r16,0(r19)
   223b8:	28000526 	beq	r5,zero,223d0 <__sflush_r+0xd0>
   223bc:	88801004 	addi	r2,r17,64
   223c0:	28800226 	beq	r5,r2,223cc <__sflush_r+0xcc>
   223c4:	9809883a 	mov	r4,r19
   223c8:	00226cc0 	call	226cc <_free_r>
   223cc:	88000c15 	stw	zero,48(r17)
   223d0:	0005883a 	mov	r2,zero
   223d4:	dfc00417 	ldw	ra,16(sp)
   223d8:	dcc00317 	ldw	r19,12(sp)
   223dc:	dc800217 	ldw	r18,8(sp)
   223e0:	dc400117 	ldw	r17,4(sp)
   223e4:	dc000017 	ldw	r16,0(sp)
   223e8:	dec00504 	addi	sp,sp,20
   223ec:	f800283a 	ret
   223f0:	2c800417 	ldw	r18,16(r5)
   223f4:	903ff626 	beq	r18,zero,223d0 <__sflush_r+0xd0>
   223f8:	2c000017 	ldw	r16,0(r5)
   223fc:	108000cc 	andi	r2,r2,3
   22400:	2c800015 	stw	r18,0(r5)
   22404:	84a1c83a 	sub	r16,r16,r18
   22408:	1000131e 	bne	r2,zero,22458 <__sflush_r+0x158>
   2240c:	28800517 	ldw	r2,20(r5)
   22410:	88800215 	stw	r2,8(r17)
   22414:	04000316 	blt	zero,r16,22424 <__sflush_r+0x124>
   22418:	003fed06 	br	223d0 <__sflush_r+0xd0>
   2241c:	90a5883a 	add	r18,r18,r2
   22420:	043feb0e 	bge	zero,r16,223d0 <__sflush_r+0xd0>
   22424:	88800917 	ldw	r2,36(r17)
   22428:	89400717 	ldw	r5,28(r17)
   2242c:	800f883a 	mov	r7,r16
   22430:	900d883a 	mov	r6,r18
   22434:	9809883a 	mov	r4,r19
   22438:	103ee83a 	callr	r2
   2243c:	80a1c83a 	sub	r16,r16,r2
   22440:	00bff616 	blt	zero,r2,2241c <__sflush_r+0x11c>
   22444:	88c0030b 	ldhu	r3,12(r17)
   22448:	00bfffc4 	movi	r2,-1
   2244c:	18c01014 	ori	r3,r3,64
   22450:	88c0030d 	sth	r3,12(r17)
   22454:	003fdf06 	br	223d4 <__sflush_r+0xd4>
   22458:	0005883a 	mov	r2,zero
   2245c:	003fec06 	br	22410 <__sflush_r+0x110>
   22460:	88801415 	stw	r2,80(r17)
   22464:	003fd206 	br	223b0 <__sflush_r+0xb0>
   22468:	28c00f17 	ldw	r3,60(r5)
   2246c:	00ffb316 	blt	zero,r3,2233c <__sflush_r+0x3c>
   22470:	003fd706 	br	223d0 <__sflush_r+0xd0>
   22474:	89400717 	ldw	r5,28(r17)
   22478:	000d883a 	mov	r6,zero
   2247c:	01c00044 	movi	r7,1
   22480:	9809883a 	mov	r4,r19
   22484:	403ee83a 	callr	r8
   22488:	100d883a 	mov	r6,r2
   2248c:	00bfffc4 	movi	r2,-1
   22490:	30801426 	beq	r6,r2,224e4 <__sflush_r+0x1e4>
   22494:	8880030b 	ldhu	r2,12(r17)
   22498:	8a000a17 	ldw	r8,40(r17)
   2249c:	003fae06 	br	22358 <__sflush_r+0x58>
   224a0:	98c00017 	ldw	r3,0(r19)
   224a4:	183fba26 	beq	r3,zero,22390 <__sflush_r+0x90>
   224a8:	01000744 	movi	r4,29
   224ac:	19000626 	beq	r3,r4,224c8 <__sflush_r+0x1c8>
   224b0:	01000584 	movi	r4,22
   224b4:	19000426 	beq	r3,r4,224c8 <__sflush_r+0x1c8>
   224b8:	88c0030b 	ldhu	r3,12(r17)
   224bc:	18c01014 	ori	r3,r3,64
   224c0:	88c0030d 	sth	r3,12(r17)
   224c4:	003fc306 	br	223d4 <__sflush_r+0xd4>
   224c8:	8880030b 	ldhu	r2,12(r17)
   224cc:	88c00417 	ldw	r3,16(r17)
   224d0:	88000115 	stw	zero,4(r17)
   224d4:	10bdffcc 	andi	r2,r2,63487
   224d8:	8880030d 	sth	r2,12(r17)
   224dc:	88c00015 	stw	r3,0(r17)
   224e0:	003fb306 	br	223b0 <__sflush_r+0xb0>
   224e4:	98800017 	ldw	r2,0(r19)
   224e8:	103fea26 	beq	r2,zero,22494 <__sflush_r+0x194>
   224ec:	00c00744 	movi	r3,29
   224f0:	10c00226 	beq	r2,r3,224fc <__sflush_r+0x1fc>
   224f4:	00c00584 	movi	r3,22
   224f8:	10c0031e 	bne	r2,r3,22508 <__sflush_r+0x208>
   224fc:	9c000015 	stw	r16,0(r19)
   22500:	0005883a 	mov	r2,zero
   22504:	003fb306 	br	223d4 <__sflush_r+0xd4>
   22508:	88c0030b 	ldhu	r3,12(r17)
   2250c:	3005883a 	mov	r2,r6
   22510:	18c01014 	ori	r3,r3,64
   22514:	88c0030d 	sth	r3,12(r17)
   22518:	003fae06 	br	223d4 <__sflush_r+0xd4>

0002251c <_fflush_r>:
   2251c:	defffd04 	addi	sp,sp,-12
   22520:	dc000115 	stw	r16,4(sp)
   22524:	dfc00215 	stw	ra,8(sp)
   22528:	2021883a 	mov	r16,r4
   2252c:	20000226 	beq	r4,zero,22538 <_fflush_r+0x1c>
   22530:	20800e17 	ldw	r2,56(r4)
   22534:	10000c26 	beq	r2,zero,22568 <_fflush_r+0x4c>
   22538:	2880030f 	ldh	r2,12(r5)
   2253c:	1000051e 	bne	r2,zero,22554 <_fflush_r+0x38>
   22540:	0005883a 	mov	r2,zero
   22544:	dfc00217 	ldw	ra,8(sp)
   22548:	dc000117 	ldw	r16,4(sp)
   2254c:	dec00304 	addi	sp,sp,12
   22550:	f800283a 	ret
   22554:	8009883a 	mov	r4,r16
   22558:	dfc00217 	ldw	ra,8(sp)
   2255c:	dc000117 	ldw	r16,4(sp)
   22560:	dec00304 	addi	sp,sp,12
   22564:	00223001 	jmpi	22300 <__sflush_r>
   22568:	d9400015 	stw	r5,0(sp)
   2256c:	00205a40 	call	205a4 <__sinit>
   22570:	d9400017 	ldw	r5,0(sp)
   22574:	003ff006 	br	22538 <_fflush_r+0x1c>

00022578 <fflush>:
   22578:	20000526 	beq	r4,zero,22590 <fflush+0x18>
   2257c:	008000b4 	movhi	r2,2
   22580:	1094c504 	addi	r2,r2,21268
   22584:	200b883a 	mov	r5,r4
   22588:	11000017 	ldw	r4,0(r2)
   2258c:	002251c1 	jmpi	2251c <_fflush_r>
   22590:	008000b4 	movhi	r2,2
   22594:	1094c404 	addi	r2,r2,21264
   22598:	11000017 	ldw	r4,0(r2)
   2259c:	014000b4 	movhi	r5,2
   225a0:	29494704 	addi	r5,r5,9500
   225a4:	0020b801 	jmpi	20b80 <_fwalk_reent>

000225a8 <_malloc_trim_r>:
   225a8:	defffb04 	addi	sp,sp,-20
   225ac:	dcc00315 	stw	r19,12(sp)
   225b0:	04c000b4 	movhi	r19,2
   225b4:	dc800215 	stw	r18,8(sp)
   225b8:	dc400115 	stw	r17,4(sp)
   225bc:	dc000015 	stw	r16,0(sp)
   225c0:	dfc00415 	stw	ra,16(sp)
   225c4:	2821883a 	mov	r16,r5
   225c8:	9cd34d04 	addi	r19,r19,19764
   225cc:	2025883a 	mov	r18,r4
   225d0:	00234800 	call	23480 <__malloc_lock>
   225d4:	98800217 	ldw	r2,8(r19)
   225d8:	14400117 	ldw	r17,4(r2)
   225dc:	00bfff04 	movi	r2,-4
   225e0:	88a2703a 	and	r17,r17,r2
   225e4:	8c21c83a 	sub	r16,r17,r16
   225e8:	8403fbc4 	addi	r16,r16,4079
   225ec:	8020d33a 	srli	r16,r16,12
   225f0:	0083ffc4 	movi	r2,4095
   225f4:	843fffc4 	addi	r16,r16,-1
   225f8:	8020933a 	slli	r16,r16,12
   225fc:	1400060e 	bge	r2,r16,22618 <_malloc_trim_r+0x70>
   22600:	000b883a 	mov	r5,zero
   22604:	9009883a 	mov	r4,r18
   22608:	0021e640 	call	21e64 <_sbrk_r>
   2260c:	98c00217 	ldw	r3,8(r19)
   22610:	1c47883a 	add	r3,r3,r17
   22614:	10c00a26 	beq	r2,r3,22640 <_malloc_trim_r+0x98>
   22618:	9009883a 	mov	r4,r18
   2261c:	00234a40 	call	234a4 <__malloc_unlock>
   22620:	0005883a 	mov	r2,zero
   22624:	dfc00417 	ldw	ra,16(sp)
   22628:	dcc00317 	ldw	r19,12(sp)
   2262c:	dc800217 	ldw	r18,8(sp)
   22630:	dc400117 	ldw	r17,4(sp)
   22634:	dc000017 	ldw	r16,0(sp)
   22638:	dec00504 	addi	sp,sp,20
   2263c:	f800283a 	ret
   22640:	040bc83a 	sub	r5,zero,r16
   22644:	9009883a 	mov	r4,r18
   22648:	0021e640 	call	21e64 <_sbrk_r>
   2264c:	00ffffc4 	movi	r3,-1
   22650:	10c00d26 	beq	r2,r3,22688 <_malloc_trim_r+0xe0>
   22654:	00c000b4 	movhi	r3,2
   22658:	18d76104 	addi	r3,r3,23940
   2265c:	18800017 	ldw	r2,0(r3)
   22660:	99000217 	ldw	r4,8(r19)
   22664:	8c23c83a 	sub	r17,r17,r16
   22668:	8c400054 	ori	r17,r17,1
   2266c:	1421c83a 	sub	r16,r2,r16
   22670:	24400115 	stw	r17,4(r4)
   22674:	9009883a 	mov	r4,r18
   22678:	1c000015 	stw	r16,0(r3)
   2267c:	00234a40 	call	234a4 <__malloc_unlock>
   22680:	00800044 	movi	r2,1
   22684:	003fe706 	br	22624 <_malloc_trim_r+0x7c>
   22688:	000b883a 	mov	r5,zero
   2268c:	9009883a 	mov	r4,r18
   22690:	0021e640 	call	21e64 <_sbrk_r>
   22694:	99000217 	ldw	r4,8(r19)
   22698:	014003c4 	movi	r5,15
   2269c:	1107c83a 	sub	r3,r2,r4
   226a0:	28ffdd0e 	bge	r5,r3,22618 <_malloc_trim_r+0x70>
   226a4:	014000b4 	movhi	r5,2
   226a8:	2954c604 	addi	r5,r5,21272
   226ac:	29400017 	ldw	r5,0(r5)
   226b0:	18c00054 	ori	r3,r3,1
   226b4:	20c00115 	stw	r3,4(r4)
   226b8:	00c000b4 	movhi	r3,2
   226bc:	1145c83a 	sub	r2,r2,r5
   226c0:	18d76104 	addi	r3,r3,23940
   226c4:	18800015 	stw	r2,0(r3)
   226c8:	003fd306 	br	22618 <_malloc_trim_r+0x70>

000226cc <_free_r>:
   226cc:	28004126 	beq	r5,zero,227d4 <_free_r+0x108>
   226d0:	defffd04 	addi	sp,sp,-12
   226d4:	dc400115 	stw	r17,4(sp)
   226d8:	dc000015 	stw	r16,0(sp)
   226dc:	2023883a 	mov	r17,r4
   226e0:	2821883a 	mov	r16,r5
   226e4:	dfc00215 	stw	ra,8(sp)
   226e8:	00234800 	call	23480 <__malloc_lock>
   226ec:	81ffff17 	ldw	r7,-4(r16)
   226f0:	00bfff84 	movi	r2,-2
   226f4:	010000b4 	movhi	r4,2
   226f8:	81bffe04 	addi	r6,r16,-8
   226fc:	3884703a 	and	r2,r7,r2
   22700:	21134d04 	addi	r4,r4,19764
   22704:	308b883a 	add	r5,r6,r2
   22708:	2a400117 	ldw	r9,4(r5)
   2270c:	22000217 	ldw	r8,8(r4)
   22710:	00ffff04 	movi	r3,-4
   22714:	48c6703a 	and	r3,r9,r3
   22718:	2a005726 	beq	r5,r8,22878 <_free_r+0x1ac>
   2271c:	28c00115 	stw	r3,4(r5)
   22720:	39c0004c 	andi	r7,r7,1
   22724:	3800091e 	bne	r7,zero,2274c <_free_r+0x80>
   22728:	823ffe17 	ldw	r8,-8(r16)
   2272c:	22400204 	addi	r9,r4,8
   22730:	320dc83a 	sub	r6,r6,r8
   22734:	31c00217 	ldw	r7,8(r6)
   22738:	1205883a 	add	r2,r2,r8
   2273c:	3a406526 	beq	r7,r9,228d4 <_free_r+0x208>
   22740:	32000317 	ldw	r8,12(r6)
   22744:	3a000315 	stw	r8,12(r7)
   22748:	41c00215 	stw	r7,8(r8)
   2274c:	28cf883a 	add	r7,r5,r3
   22750:	39c00117 	ldw	r7,4(r7)
   22754:	39c0004c 	andi	r7,r7,1
   22758:	38003a26 	beq	r7,zero,22844 <_free_r+0x178>
   2275c:	10c00054 	ori	r3,r2,1
   22760:	30c00115 	stw	r3,4(r6)
   22764:	3087883a 	add	r3,r6,r2
   22768:	18800015 	stw	r2,0(r3)
   2276c:	00c07fc4 	movi	r3,511
   22770:	18801936 	bltu	r3,r2,227d8 <_free_r+0x10c>
   22774:	1004d0fa 	srli	r2,r2,3
   22778:	01c00044 	movi	r7,1
   2277c:	21400117 	ldw	r5,4(r4)
   22780:	10c00044 	addi	r3,r2,1
   22784:	18c7883a 	add	r3,r3,r3
   22788:	1005d0ba 	srai	r2,r2,2
   2278c:	18c7883a 	add	r3,r3,r3
   22790:	18c7883a 	add	r3,r3,r3
   22794:	1907883a 	add	r3,r3,r4
   22798:	3884983a 	sll	r2,r7,r2
   2279c:	19c00017 	ldw	r7,0(r3)
   227a0:	1a3ffe04 	addi	r8,r3,-8
   227a4:	1144b03a 	or	r2,r2,r5
   227a8:	32000315 	stw	r8,12(r6)
   227ac:	31c00215 	stw	r7,8(r6)
   227b0:	20800115 	stw	r2,4(r4)
   227b4:	19800015 	stw	r6,0(r3)
   227b8:	39800315 	stw	r6,12(r7)
   227bc:	8809883a 	mov	r4,r17
   227c0:	dfc00217 	ldw	ra,8(sp)
   227c4:	dc400117 	ldw	r17,4(sp)
   227c8:	dc000017 	ldw	r16,0(sp)
   227cc:	dec00304 	addi	sp,sp,12
   227d0:	00234a41 	jmpi	234a4 <__malloc_unlock>
   227d4:	f800283a 	ret
   227d8:	100ad27a 	srli	r5,r2,9
   227dc:	00c00104 	movi	r3,4
   227e0:	19404a36 	bltu	r3,r5,2290c <_free_r+0x240>
   227e4:	100ad1ba 	srli	r5,r2,6
   227e8:	28c00e44 	addi	r3,r5,57
   227ec:	18c7883a 	add	r3,r3,r3
   227f0:	29400e04 	addi	r5,r5,56
   227f4:	18c7883a 	add	r3,r3,r3
   227f8:	18c7883a 	add	r3,r3,r3
   227fc:	1909883a 	add	r4,r3,r4
   22800:	20c00017 	ldw	r3,0(r4)
   22804:	01c000b4 	movhi	r7,2
   22808:	213ffe04 	addi	r4,r4,-8
   2280c:	39d34d04 	addi	r7,r7,19764
   22810:	20c04426 	beq	r4,r3,22924 <_free_r+0x258>
   22814:	01ffff04 	movi	r7,-4
   22818:	19400117 	ldw	r5,4(r3)
   2281c:	29ca703a 	and	r5,r5,r7
   22820:	1140022e 	bgeu	r2,r5,2282c <_free_r+0x160>
   22824:	18c00217 	ldw	r3,8(r3)
   22828:	20fffb1e 	bne	r4,r3,22818 <_free_r+0x14c>
   2282c:	19000317 	ldw	r4,12(r3)
   22830:	31000315 	stw	r4,12(r6)
   22834:	30c00215 	stw	r3,8(r6)
   22838:	21800215 	stw	r6,8(r4)
   2283c:	19800315 	stw	r6,12(r3)
   22840:	003fde06 	br	227bc <_free_r+0xf0>
   22844:	29c00217 	ldw	r7,8(r5)
   22848:	10c5883a 	add	r2,r2,r3
   2284c:	00c000b4 	movhi	r3,2
   22850:	18d34f04 	addi	r3,r3,19772
   22854:	38c03b26 	beq	r7,r3,22944 <_free_r+0x278>
   22858:	2a000317 	ldw	r8,12(r5)
   2285c:	11400054 	ori	r5,r2,1
   22860:	3087883a 	add	r3,r6,r2
   22864:	3a000315 	stw	r8,12(r7)
   22868:	41c00215 	stw	r7,8(r8)
   2286c:	31400115 	stw	r5,4(r6)
   22870:	18800015 	stw	r2,0(r3)
   22874:	003fbd06 	br	2276c <_free_r+0xa0>
   22878:	39c0004c 	andi	r7,r7,1
   2287c:	10c5883a 	add	r2,r2,r3
   22880:	3800071e 	bne	r7,zero,228a0 <_free_r+0x1d4>
   22884:	81fffe17 	ldw	r7,-8(r16)
   22888:	31cdc83a 	sub	r6,r6,r7
   2288c:	30c00317 	ldw	r3,12(r6)
   22890:	31400217 	ldw	r5,8(r6)
   22894:	11c5883a 	add	r2,r2,r7
   22898:	28c00315 	stw	r3,12(r5)
   2289c:	19400215 	stw	r5,8(r3)
   228a0:	10c00054 	ori	r3,r2,1
   228a4:	30c00115 	stw	r3,4(r6)
   228a8:	00c000b4 	movhi	r3,2
   228ac:	18d4c704 	addi	r3,r3,21276
   228b0:	18c00017 	ldw	r3,0(r3)
   228b4:	21800215 	stw	r6,8(r4)
   228b8:	10ffc036 	bltu	r2,r3,227bc <_free_r+0xf0>
   228bc:	008000b4 	movhi	r2,2
   228c0:	10975c04 	addi	r2,r2,23920
   228c4:	11400017 	ldw	r5,0(r2)
   228c8:	8809883a 	mov	r4,r17
   228cc:	00225a80 	call	225a8 <_malloc_trim_r>
   228d0:	003fba06 	br	227bc <_free_r+0xf0>
   228d4:	28c9883a 	add	r4,r5,r3
   228d8:	21000117 	ldw	r4,4(r4)
   228dc:	2100004c 	andi	r4,r4,1
   228e0:	2000391e 	bne	r4,zero,229c8 <_free_r+0x2fc>
   228e4:	29c00217 	ldw	r7,8(r5)
   228e8:	29000317 	ldw	r4,12(r5)
   228ec:	1885883a 	add	r2,r3,r2
   228f0:	10c00054 	ori	r3,r2,1
   228f4:	39000315 	stw	r4,12(r7)
   228f8:	21c00215 	stw	r7,8(r4)
   228fc:	30c00115 	stw	r3,4(r6)
   22900:	308d883a 	add	r6,r6,r2
   22904:	30800015 	stw	r2,0(r6)
   22908:	003fac06 	br	227bc <_free_r+0xf0>
   2290c:	00c00504 	movi	r3,20
   22910:	19401536 	bltu	r3,r5,22968 <_free_r+0x29c>
   22914:	28c01704 	addi	r3,r5,92
   22918:	18c7883a 	add	r3,r3,r3
   2291c:	294016c4 	addi	r5,r5,91
   22920:	003fb406 	br	227f4 <_free_r+0x128>
   22924:	280bd0ba 	srai	r5,r5,2
   22928:	00c00044 	movi	r3,1
   2292c:	38800117 	ldw	r2,4(r7)
   22930:	194a983a 	sll	r5,r3,r5
   22934:	2007883a 	mov	r3,r4
   22938:	2884b03a 	or	r2,r5,r2
   2293c:	38800115 	stw	r2,4(r7)
   22940:	003fbb06 	br	22830 <_free_r+0x164>
   22944:	21800515 	stw	r6,20(r4)
   22948:	21800415 	stw	r6,16(r4)
   2294c:	10c00054 	ori	r3,r2,1
   22950:	31c00315 	stw	r7,12(r6)
   22954:	31c00215 	stw	r7,8(r6)
   22958:	30c00115 	stw	r3,4(r6)
   2295c:	308d883a 	add	r6,r6,r2
   22960:	30800015 	stw	r2,0(r6)
   22964:	003f9506 	br	227bc <_free_r+0xf0>
   22968:	00c01504 	movi	r3,84
   2296c:	19400536 	bltu	r3,r5,22984 <_free_r+0x2b8>
   22970:	100ad33a 	srli	r5,r2,12
   22974:	28c01bc4 	addi	r3,r5,111
   22978:	18c7883a 	add	r3,r3,r3
   2297c:	29401b84 	addi	r5,r5,110
   22980:	003f9c06 	br	227f4 <_free_r+0x128>
   22984:	00c05504 	movi	r3,340
   22988:	19400536 	bltu	r3,r5,229a0 <_free_r+0x2d4>
   2298c:	100ad3fa 	srli	r5,r2,15
   22990:	28c01e04 	addi	r3,r5,120
   22994:	18c7883a 	add	r3,r3,r3
   22998:	29401dc4 	addi	r5,r5,119
   2299c:	003f9506 	br	227f4 <_free_r+0x128>
   229a0:	00c15504 	movi	r3,1364
   229a4:	19400536 	bltu	r3,r5,229bc <_free_r+0x2f0>
   229a8:	100ad4ba 	srli	r5,r2,18
   229ac:	28c01f44 	addi	r3,r5,125
   229b0:	18c7883a 	add	r3,r3,r3
   229b4:	29401f04 	addi	r5,r5,124
   229b8:	003f8e06 	br	227f4 <_free_r+0x128>
   229bc:	00c03f84 	movi	r3,254
   229c0:	01401f84 	movi	r5,126
   229c4:	003f8b06 	br	227f4 <_free_r+0x128>
   229c8:	10c00054 	ori	r3,r2,1
   229cc:	30c00115 	stw	r3,4(r6)
   229d0:	308d883a 	add	r6,r6,r2
   229d4:	30800015 	stw	r2,0(r6)
   229d8:	003f7806 	br	227bc <_free_r+0xf0>

000229dc <_lseek_r>:
   229dc:	defffd04 	addi	sp,sp,-12
   229e0:	2805883a 	mov	r2,r5
   229e4:	dc000015 	stw	r16,0(sp)
   229e8:	040000b4 	movhi	r16,2
   229ec:	dc400115 	stw	r17,4(sp)
   229f0:	300b883a 	mov	r5,r6
   229f4:	84175d04 	addi	r16,r16,23924
   229f8:	2023883a 	mov	r17,r4
   229fc:	380d883a 	mov	r6,r7
   22a00:	1009883a 	mov	r4,r2
   22a04:	dfc00215 	stw	ra,8(sp)
   22a08:	80000015 	stw	zero,0(r16)
   22a0c:	00233280 	call	23328 <lseek>
   22a10:	00ffffc4 	movi	r3,-1
   22a14:	10c00526 	beq	r2,r3,22a2c <_lseek_r+0x50>
   22a18:	dfc00217 	ldw	ra,8(sp)
   22a1c:	dc400117 	ldw	r17,4(sp)
   22a20:	dc000017 	ldw	r16,0(sp)
   22a24:	dec00304 	addi	sp,sp,12
   22a28:	f800283a 	ret
   22a2c:	80c00017 	ldw	r3,0(r16)
   22a30:	183ff926 	beq	r3,zero,22a18 <_lseek_r+0x3c>
   22a34:	88c00015 	stw	r3,0(r17)
   22a38:	003ff706 	br	22a18 <_lseek_r+0x3c>

00022a3c <__smakebuf_r>:
   22a3c:	2880030b 	ldhu	r2,12(r5)
   22a40:	10c0008c 	andi	r3,r2,2
   22a44:	1800411e 	bne	r3,zero,22b4c <__smakebuf_r+0x110>
   22a48:	deffec04 	addi	sp,sp,-80
   22a4c:	dc000f15 	stw	r16,60(sp)
   22a50:	2821883a 	mov	r16,r5
   22a54:	2940038f 	ldh	r5,14(r5)
   22a58:	dc401015 	stw	r17,64(sp)
   22a5c:	dfc01315 	stw	ra,76(sp)
   22a60:	dcc01215 	stw	r19,72(sp)
   22a64:	dc801115 	stw	r18,68(sp)
   22a68:	2023883a 	mov	r17,r4
   22a6c:	28001c16 	blt	r5,zero,22ae0 <__smakebuf_r+0xa4>
   22a70:	d80d883a 	mov	r6,sp
   22a74:	0022c580 	call	22c58 <_fstat_r>
   22a78:	10001816 	blt	r2,zero,22adc <__smakebuf_r+0xa0>
   22a7c:	d8800117 	ldw	r2,4(sp)
   22a80:	00e00014 	movui	r3,32768
   22a84:	10bc000c 	andi	r2,r2,61440
   22a88:	14c80020 	cmpeqi	r19,r2,8192
   22a8c:	10c03726 	beq	r2,r3,22b6c <__smakebuf_r+0x130>
   22a90:	80c0030b 	ldhu	r3,12(r16)
   22a94:	18c20014 	ori	r3,r3,2048
   22a98:	80c0030d 	sth	r3,12(r16)
   22a9c:	00c80004 	movi	r3,8192
   22aa0:	10c0521e 	bne	r2,r3,22bec <__smakebuf_r+0x1b0>
   22aa4:	8140038f 	ldh	r5,14(r16)
   22aa8:	8809883a 	mov	r4,r17
   22aac:	0022cb40 	call	22cb4 <_isatty_r>
   22ab0:	10004c26 	beq	r2,zero,22be4 <__smakebuf_r+0x1a8>
   22ab4:	8080030b 	ldhu	r2,12(r16)
   22ab8:	80c010c4 	addi	r3,r16,67
   22abc:	80c00015 	stw	r3,0(r16)
   22ac0:	10800054 	ori	r2,r2,1
   22ac4:	8080030d 	sth	r2,12(r16)
   22ac8:	00800044 	movi	r2,1
   22acc:	80c00415 	stw	r3,16(r16)
   22ad0:	80800515 	stw	r2,20(r16)
   22ad4:	04810004 	movi	r18,1024
   22ad8:	00000706 	br	22af8 <__smakebuf_r+0xbc>
   22adc:	8080030b 	ldhu	r2,12(r16)
   22ae0:	10c0200c 	andi	r3,r2,128
   22ae4:	18001f1e 	bne	r3,zero,22b64 <__smakebuf_r+0x128>
   22ae8:	04810004 	movi	r18,1024
   22aec:	10820014 	ori	r2,r2,2048
   22af0:	8080030d 	sth	r2,12(r16)
   22af4:	0027883a 	mov	r19,zero
   22af8:	900b883a 	mov	r5,r18
   22afc:	8809883a 	mov	r4,r17
   22b00:	0020c440 	call	20c44 <_malloc_r>
   22b04:	10002c26 	beq	r2,zero,22bb8 <__smakebuf_r+0x17c>
   22b08:	80c0030b 	ldhu	r3,12(r16)
   22b0c:	010000b4 	movhi	r4,2
   22b10:	21009304 	addi	r4,r4,588
   22b14:	89000f15 	stw	r4,60(r17)
   22b18:	18c02014 	ori	r3,r3,128
   22b1c:	80c0030d 	sth	r3,12(r16)
   22b20:	80800015 	stw	r2,0(r16)
   22b24:	80800415 	stw	r2,16(r16)
   22b28:	84800515 	stw	r18,20(r16)
   22b2c:	98001a1e 	bne	r19,zero,22b98 <__smakebuf_r+0x15c>
   22b30:	dfc01317 	ldw	ra,76(sp)
   22b34:	dcc01217 	ldw	r19,72(sp)
   22b38:	dc801117 	ldw	r18,68(sp)
   22b3c:	dc401017 	ldw	r17,64(sp)
   22b40:	dc000f17 	ldw	r16,60(sp)
   22b44:	dec01404 	addi	sp,sp,80
   22b48:	f800283a 	ret
   22b4c:	288010c4 	addi	r2,r5,67
   22b50:	28800015 	stw	r2,0(r5)
   22b54:	28800415 	stw	r2,16(r5)
   22b58:	00800044 	movi	r2,1
   22b5c:	28800515 	stw	r2,20(r5)
   22b60:	f800283a 	ret
   22b64:	04801004 	movi	r18,64
   22b68:	003fe006 	br	22aec <__smakebuf_r+0xb0>
   22b6c:	81000a17 	ldw	r4,40(r16)
   22b70:	00c000b4 	movhi	r3,2
   22b74:	18c7e404 	addi	r3,r3,8080
   22b78:	20ffc51e 	bne	r4,r3,22a90 <__smakebuf_r+0x54>
   22b7c:	8080030b 	ldhu	r2,12(r16)
   22b80:	04810004 	movi	r18,1024
   22b84:	84801315 	stw	r18,76(r16)
   22b88:	1484b03a 	or	r2,r2,r18
   22b8c:	8080030d 	sth	r2,12(r16)
   22b90:	0027883a 	mov	r19,zero
   22b94:	003fd806 	br	22af8 <__smakebuf_r+0xbc>
   22b98:	8140038f 	ldh	r5,14(r16)
   22b9c:	8809883a 	mov	r4,r17
   22ba0:	0022cb40 	call	22cb4 <_isatty_r>
   22ba4:	103fe226 	beq	r2,zero,22b30 <__smakebuf_r+0xf4>
   22ba8:	8080030b 	ldhu	r2,12(r16)
   22bac:	10800054 	ori	r2,r2,1
   22bb0:	8080030d 	sth	r2,12(r16)
   22bb4:	003fde06 	br	22b30 <__smakebuf_r+0xf4>
   22bb8:	8080030b 	ldhu	r2,12(r16)
   22bbc:	10c0800c 	andi	r3,r2,512
   22bc0:	183fdb1e 	bne	r3,zero,22b30 <__smakebuf_r+0xf4>
   22bc4:	10800094 	ori	r2,r2,2
   22bc8:	80c010c4 	addi	r3,r16,67
   22bcc:	8080030d 	sth	r2,12(r16)
   22bd0:	00800044 	movi	r2,1
   22bd4:	80c00015 	stw	r3,0(r16)
   22bd8:	80c00415 	stw	r3,16(r16)
   22bdc:	80800515 	stw	r2,20(r16)
   22be0:	003fd306 	br	22b30 <__smakebuf_r+0xf4>
   22be4:	04810004 	movi	r18,1024
   22be8:	003fc306 	br	22af8 <__smakebuf_r+0xbc>
   22bec:	0027883a 	mov	r19,zero
   22bf0:	04810004 	movi	r18,1024
   22bf4:	003fc006 	br	22af8 <__smakebuf_r+0xbc>

00022bf8 <_read_r>:
   22bf8:	defffd04 	addi	sp,sp,-12
   22bfc:	2805883a 	mov	r2,r5
   22c00:	dc000015 	stw	r16,0(sp)
   22c04:	040000b4 	movhi	r16,2
   22c08:	dc400115 	stw	r17,4(sp)
   22c0c:	300b883a 	mov	r5,r6
   22c10:	84175d04 	addi	r16,r16,23924
   22c14:	2023883a 	mov	r17,r4
   22c18:	380d883a 	mov	r6,r7
   22c1c:	1009883a 	mov	r4,r2
   22c20:	dfc00215 	stw	ra,8(sp)
   22c24:	80000015 	stw	zero,0(r16)
   22c28:	00235040 	call	23504 <read>
   22c2c:	00ffffc4 	movi	r3,-1
   22c30:	10c00526 	beq	r2,r3,22c48 <_read_r+0x50>
   22c34:	dfc00217 	ldw	ra,8(sp)
   22c38:	dc400117 	ldw	r17,4(sp)
   22c3c:	dc000017 	ldw	r16,0(sp)
   22c40:	dec00304 	addi	sp,sp,12
   22c44:	f800283a 	ret
   22c48:	80c00017 	ldw	r3,0(r16)
   22c4c:	183ff926 	beq	r3,zero,22c34 <_read_r+0x3c>
   22c50:	88c00015 	stw	r3,0(r17)
   22c54:	003ff706 	br	22c34 <_read_r+0x3c>

00022c58 <_fstat_r>:
   22c58:	defffd04 	addi	sp,sp,-12
   22c5c:	2805883a 	mov	r2,r5
   22c60:	dc000015 	stw	r16,0(sp)
   22c64:	040000b4 	movhi	r16,2
   22c68:	dc400115 	stw	r17,4(sp)
   22c6c:	84175d04 	addi	r16,r16,23924
   22c70:	2023883a 	mov	r17,r4
   22c74:	300b883a 	mov	r5,r6
   22c78:	1009883a 	mov	r4,r2
   22c7c:	dfc00215 	stw	ra,8(sp)
   22c80:	80000015 	stw	zero,0(r16)
   22c84:	00230600 	call	23060 <fstat>
   22c88:	00ffffc4 	movi	r3,-1
   22c8c:	10c00526 	beq	r2,r3,22ca4 <_fstat_r+0x4c>
   22c90:	dfc00217 	ldw	ra,8(sp)
   22c94:	dc400117 	ldw	r17,4(sp)
   22c98:	dc000017 	ldw	r16,0(sp)
   22c9c:	dec00304 	addi	sp,sp,12
   22ca0:	f800283a 	ret
   22ca4:	80c00017 	ldw	r3,0(r16)
   22ca8:	183ff926 	beq	r3,zero,22c90 <_fstat_r+0x38>
   22cac:	88c00015 	stw	r3,0(r17)
   22cb0:	003ff706 	br	22c90 <_fstat_r+0x38>

00022cb4 <_isatty_r>:
   22cb4:	defffd04 	addi	sp,sp,-12
   22cb8:	dc000015 	stw	r16,0(sp)
   22cbc:	040000b4 	movhi	r16,2
   22cc0:	dc400115 	stw	r17,4(sp)
   22cc4:	84175d04 	addi	r16,r16,23924
   22cc8:	2023883a 	mov	r17,r4
   22ccc:	2809883a 	mov	r4,r5
   22cd0:	dfc00215 	stw	ra,8(sp)
   22cd4:	80000015 	stw	zero,0(r16)
   22cd8:	00231540 	call	23154 <isatty>
   22cdc:	00ffffc4 	movi	r3,-1
   22ce0:	10c00526 	beq	r2,r3,22cf8 <_isatty_r+0x44>
   22ce4:	dfc00217 	ldw	ra,8(sp)
   22ce8:	dc400117 	ldw	r17,4(sp)
   22cec:	dc000017 	ldw	r16,0(sp)
   22cf0:	dec00304 	addi	sp,sp,12
   22cf4:	f800283a 	ret
   22cf8:	80c00017 	ldw	r3,0(r16)
   22cfc:	183ff926 	beq	r3,zero,22ce4 <_isatty_r+0x30>
   22d00:	88c00015 	stw	r3,0(r17)
   22d04:	003ff706 	br	22ce4 <_isatty_r+0x30>

00022d08 <__divsi3>:
   22d08:	20001b16 	blt	r4,zero,22d78 <__divsi3+0x70>
   22d0c:	000f883a 	mov	r7,zero
   22d10:	28001616 	blt	r5,zero,22d6c <__divsi3+0x64>
   22d14:	200d883a 	mov	r6,r4
   22d18:	29001a2e 	bgeu	r5,r4,22d84 <__divsi3+0x7c>
   22d1c:	00800804 	movi	r2,32
   22d20:	00c00044 	movi	r3,1
   22d24:	00000106 	br	22d2c <__divsi3+0x24>
   22d28:	10000d26 	beq	r2,zero,22d60 <__divsi3+0x58>
   22d2c:	294b883a 	add	r5,r5,r5
   22d30:	10bfffc4 	addi	r2,r2,-1
   22d34:	18c7883a 	add	r3,r3,r3
   22d38:	293ffb36 	bltu	r5,r4,22d28 <__divsi3+0x20>
   22d3c:	0005883a 	mov	r2,zero
   22d40:	18000726 	beq	r3,zero,22d60 <__divsi3+0x58>
   22d44:	0005883a 	mov	r2,zero
   22d48:	31400236 	bltu	r6,r5,22d54 <__divsi3+0x4c>
   22d4c:	314dc83a 	sub	r6,r6,r5
   22d50:	10c4b03a 	or	r2,r2,r3
   22d54:	1806d07a 	srli	r3,r3,1
   22d58:	280ad07a 	srli	r5,r5,1
   22d5c:	183ffa1e 	bne	r3,zero,22d48 <__divsi3+0x40>
   22d60:	38000126 	beq	r7,zero,22d68 <__divsi3+0x60>
   22d64:	0085c83a 	sub	r2,zero,r2
   22d68:	f800283a 	ret
   22d6c:	014bc83a 	sub	r5,zero,r5
   22d70:	39c0005c 	xori	r7,r7,1
   22d74:	003fe706 	br	22d14 <__divsi3+0xc>
   22d78:	0109c83a 	sub	r4,zero,r4
   22d7c:	01c00044 	movi	r7,1
   22d80:	003fe306 	br	22d10 <__divsi3+0x8>
   22d84:	00c00044 	movi	r3,1
   22d88:	003fee06 	br	22d44 <__divsi3+0x3c>

00022d8c <__modsi3>:
   22d8c:	20001716 	blt	r4,zero,22dec <__modsi3+0x60>
   22d90:	000f883a 	mov	r7,zero
   22d94:	2005883a 	mov	r2,r4
   22d98:	28001216 	blt	r5,zero,22de4 <__modsi3+0x58>
   22d9c:	2900162e 	bgeu	r5,r4,22df8 <__modsi3+0x6c>
   22da0:	01800804 	movi	r6,32
   22da4:	00c00044 	movi	r3,1
   22da8:	00000106 	br	22db0 <__modsi3+0x24>
   22dac:	30000a26 	beq	r6,zero,22dd8 <__modsi3+0x4c>
   22db0:	294b883a 	add	r5,r5,r5
   22db4:	31bfffc4 	addi	r6,r6,-1
   22db8:	18c7883a 	add	r3,r3,r3
   22dbc:	293ffb36 	bltu	r5,r4,22dac <__modsi3+0x20>
   22dc0:	18000526 	beq	r3,zero,22dd8 <__modsi3+0x4c>
   22dc4:	1806d07a 	srli	r3,r3,1
   22dc8:	11400136 	bltu	r2,r5,22dd0 <__modsi3+0x44>
   22dcc:	1145c83a 	sub	r2,r2,r5
   22dd0:	280ad07a 	srli	r5,r5,1
   22dd4:	183ffb1e 	bne	r3,zero,22dc4 <__modsi3+0x38>
   22dd8:	38000126 	beq	r7,zero,22de0 <__modsi3+0x54>
   22ddc:	0085c83a 	sub	r2,zero,r2
   22de0:	f800283a 	ret
   22de4:	014bc83a 	sub	r5,zero,r5
   22de8:	003fec06 	br	22d9c <__modsi3+0x10>
   22dec:	0109c83a 	sub	r4,zero,r4
   22df0:	01c00044 	movi	r7,1
   22df4:	003fe706 	br	22d94 <__modsi3+0x8>
   22df8:	00c00044 	movi	r3,1
   22dfc:	003ff106 	br	22dc4 <__modsi3+0x38>

00022e00 <__udivsi3>:
   22e00:	200d883a 	mov	r6,r4
   22e04:	2900152e 	bgeu	r5,r4,22e5c <__udivsi3+0x5c>
   22e08:	28001416 	blt	r5,zero,22e5c <__udivsi3+0x5c>
   22e0c:	00800804 	movi	r2,32
   22e10:	00c00044 	movi	r3,1
   22e14:	00000206 	br	22e20 <__udivsi3+0x20>
   22e18:	10000e26 	beq	r2,zero,22e54 <__udivsi3+0x54>
   22e1c:	28000516 	blt	r5,zero,22e34 <__udivsi3+0x34>
   22e20:	294b883a 	add	r5,r5,r5
   22e24:	10bfffc4 	addi	r2,r2,-1
   22e28:	18c7883a 	add	r3,r3,r3
   22e2c:	293ffa36 	bltu	r5,r4,22e18 <__udivsi3+0x18>
   22e30:	18000826 	beq	r3,zero,22e54 <__udivsi3+0x54>
   22e34:	0005883a 	mov	r2,zero
   22e38:	31400236 	bltu	r6,r5,22e44 <__udivsi3+0x44>
   22e3c:	314dc83a 	sub	r6,r6,r5
   22e40:	10c4b03a 	or	r2,r2,r3
   22e44:	1806d07a 	srli	r3,r3,1
   22e48:	280ad07a 	srli	r5,r5,1
   22e4c:	183ffa1e 	bne	r3,zero,22e38 <__udivsi3+0x38>
   22e50:	f800283a 	ret
   22e54:	0005883a 	mov	r2,zero
   22e58:	f800283a 	ret
   22e5c:	00c00044 	movi	r3,1
   22e60:	003ff406 	br	22e34 <__udivsi3+0x34>

00022e64 <__umodsi3>:
   22e64:	2005883a 	mov	r2,r4
   22e68:	2900122e 	bgeu	r5,r4,22eb4 <__umodsi3+0x50>
   22e6c:	28001116 	blt	r5,zero,22eb4 <__umodsi3+0x50>
   22e70:	01800804 	movi	r6,32
   22e74:	00c00044 	movi	r3,1
   22e78:	00000206 	br	22e84 <__umodsi3+0x20>
   22e7c:	30000c26 	beq	r6,zero,22eb0 <__umodsi3+0x4c>
   22e80:	28000516 	blt	r5,zero,22e98 <__umodsi3+0x34>
   22e84:	294b883a 	add	r5,r5,r5
   22e88:	31bfffc4 	addi	r6,r6,-1
   22e8c:	18c7883a 	add	r3,r3,r3
   22e90:	293ffa36 	bltu	r5,r4,22e7c <__umodsi3+0x18>
   22e94:	18000626 	beq	r3,zero,22eb0 <__umodsi3+0x4c>
   22e98:	1806d07a 	srli	r3,r3,1
   22e9c:	11400136 	bltu	r2,r5,22ea4 <__umodsi3+0x40>
   22ea0:	1145c83a 	sub	r2,r2,r5
   22ea4:	280ad07a 	srli	r5,r5,1
   22ea8:	183ffb1e 	bne	r3,zero,22e98 <__umodsi3+0x34>
   22eac:	f800283a 	ret
   22eb0:	f800283a 	ret
   22eb4:	00c00044 	movi	r3,1
   22eb8:	003ff706 	br	22e98 <__umodsi3+0x34>

00022ebc <__mulsi3>:
   22ebc:	0005883a 	mov	r2,zero
   22ec0:	20000726 	beq	r4,zero,22ee0 <__mulsi3+0x24>
   22ec4:	20c0004c 	andi	r3,r4,1
   22ec8:	2008d07a 	srli	r4,r4,1
   22ecc:	18000126 	beq	r3,zero,22ed4 <__mulsi3+0x18>
   22ed0:	1145883a 	add	r2,r2,r5
   22ed4:	294b883a 	add	r5,r5,r5
   22ed8:	203ffa1e 	bne	r4,zero,22ec4 <__mulsi3+0x8>
   22edc:	f800283a 	ret
   22ee0:	f800283a 	ret

00022ee4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22ee4:	defffe04 	addi	sp,sp,-8
   22ee8:	dfc00115 	stw	ra,4(sp)
   22eec:	df000015 	stw	fp,0(sp)
   22ef0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22ef4:	d0a00917 	ldw	r2,-32732(gp)
   22ef8:	10000326 	beq	r2,zero,22f08 <alt_get_errno+0x24>
   22efc:	d0a00917 	ldw	r2,-32732(gp)
   22f00:	103ee83a 	callr	r2
   22f04:	00000106 	br	22f0c <alt_get_errno+0x28>
   22f08:	d0a29904 	addi	r2,gp,-30108
}
   22f0c:	e037883a 	mov	sp,fp
   22f10:	dfc00117 	ldw	ra,4(sp)
   22f14:	df000017 	ldw	fp,0(sp)
   22f18:	dec00204 	addi	sp,sp,8
   22f1c:	f800283a 	ret

00022f20 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   22f20:	defffb04 	addi	sp,sp,-20
   22f24:	dfc00415 	stw	ra,16(sp)
   22f28:	df000315 	stw	fp,12(sp)
   22f2c:	df000304 	addi	fp,sp,12
   22f30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   22f34:	e0bfff17 	ldw	r2,-4(fp)
   22f38:	10000816 	blt	r2,zero,22f5c <close+0x3c>
   22f3c:	01400304 	movi	r5,12
   22f40:	e13fff17 	ldw	r4,-4(fp)
   22f44:	0022ebc0 	call	22ebc <__mulsi3>
   22f48:	1007883a 	mov	r3,r2
   22f4c:	008000b4 	movhi	r2,2
   22f50:	10945904 	addi	r2,r2,20836
   22f54:	1885883a 	add	r2,r3,r2
   22f58:	00000106 	br	22f60 <close+0x40>
   22f5c:	0005883a 	mov	r2,zero
   22f60:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   22f64:	e0bffd17 	ldw	r2,-12(fp)
   22f68:	10001926 	beq	r2,zero,22fd0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   22f6c:	e0bffd17 	ldw	r2,-12(fp)
   22f70:	10800017 	ldw	r2,0(r2)
   22f74:	10800417 	ldw	r2,16(r2)
   22f78:	10000626 	beq	r2,zero,22f94 <close+0x74>
   22f7c:	e0bffd17 	ldw	r2,-12(fp)
   22f80:	10800017 	ldw	r2,0(r2)
   22f84:	10800417 	ldw	r2,16(r2)
   22f88:	e13ffd17 	ldw	r4,-12(fp)
   22f8c:	103ee83a 	callr	r2
   22f90:	00000106 	br	22f98 <close+0x78>
   22f94:	0005883a 	mov	r2,zero
   22f98:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   22f9c:	e13fff17 	ldw	r4,-4(fp)
   22fa0:	00236080 	call	23608 <alt_release_fd>
    if (rval < 0)
   22fa4:	e0bffe17 	ldw	r2,-8(fp)
   22fa8:	1000070e 	bge	r2,zero,22fc8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   22fac:	0022ee40 	call	22ee4 <alt_get_errno>
   22fb0:	1007883a 	mov	r3,r2
   22fb4:	e0bffe17 	ldw	r2,-8(fp)
   22fb8:	0085c83a 	sub	r2,zero,r2
   22fbc:	18800015 	stw	r2,0(r3)
      return -1;
   22fc0:	00bfffc4 	movi	r2,-1
   22fc4:	00000706 	br	22fe4 <close+0xc4>
    }
    return 0;
   22fc8:	0005883a 	mov	r2,zero
   22fcc:	00000506 	br	22fe4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22fd0:	0022ee40 	call	22ee4 <alt_get_errno>
   22fd4:	1007883a 	mov	r3,r2
   22fd8:	00801444 	movi	r2,81
   22fdc:	18800015 	stw	r2,0(r3)
    return -1;
   22fe0:	00bfffc4 	movi	r2,-1
  }
}
   22fe4:	e037883a 	mov	sp,fp
   22fe8:	dfc00117 	ldw	ra,4(sp)
   22fec:	df000017 	ldw	fp,0(sp)
   22ff0:	dec00204 	addi	sp,sp,8
   22ff4:	f800283a 	ret

00022ff8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   22ff8:	defffc04 	addi	sp,sp,-16
   22ffc:	df000315 	stw	fp,12(sp)
   23000:	df000304 	addi	fp,sp,12
   23004:	e13ffd15 	stw	r4,-12(fp)
   23008:	e17ffe15 	stw	r5,-8(fp)
   2300c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   23010:	e0bfff17 	ldw	r2,-4(fp)
}
   23014:	e037883a 	mov	sp,fp
   23018:	df000017 	ldw	fp,0(sp)
   2301c:	dec00104 	addi	sp,sp,4
   23020:	f800283a 	ret

00023024 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23024:	defffe04 	addi	sp,sp,-8
   23028:	dfc00115 	stw	ra,4(sp)
   2302c:	df000015 	stw	fp,0(sp)
   23030:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23034:	d0a00917 	ldw	r2,-32732(gp)
   23038:	10000326 	beq	r2,zero,23048 <alt_get_errno+0x24>
   2303c:	d0a00917 	ldw	r2,-32732(gp)
   23040:	103ee83a 	callr	r2
   23044:	00000106 	br	2304c <alt_get_errno+0x28>
   23048:	d0a29904 	addi	r2,gp,-30108
}
   2304c:	e037883a 	mov	sp,fp
   23050:	dfc00117 	ldw	ra,4(sp)
   23054:	df000017 	ldw	fp,0(sp)
   23058:	dec00204 	addi	sp,sp,8
   2305c:	f800283a 	ret

00023060 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   23060:	defffb04 	addi	sp,sp,-20
   23064:	dfc00415 	stw	ra,16(sp)
   23068:	df000315 	stw	fp,12(sp)
   2306c:	df000304 	addi	fp,sp,12
   23070:	e13ffe15 	stw	r4,-8(fp)
   23074:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23078:	e0bffe17 	ldw	r2,-8(fp)
   2307c:	10000816 	blt	r2,zero,230a0 <fstat+0x40>
   23080:	01400304 	movi	r5,12
   23084:	e13ffe17 	ldw	r4,-8(fp)
   23088:	0022ebc0 	call	22ebc <__mulsi3>
   2308c:	1007883a 	mov	r3,r2
   23090:	008000b4 	movhi	r2,2
   23094:	10945904 	addi	r2,r2,20836
   23098:	1885883a 	add	r2,r3,r2
   2309c:	00000106 	br	230a4 <fstat+0x44>
   230a0:	0005883a 	mov	r2,zero
   230a4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   230a8:	e0bffd17 	ldw	r2,-12(fp)
   230ac:	10001026 	beq	r2,zero,230f0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   230b0:	e0bffd17 	ldw	r2,-12(fp)
   230b4:	10800017 	ldw	r2,0(r2)
   230b8:	10800817 	ldw	r2,32(r2)
   230bc:	10000726 	beq	r2,zero,230dc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   230c0:	e0bffd17 	ldw	r2,-12(fp)
   230c4:	10800017 	ldw	r2,0(r2)
   230c8:	10800817 	ldw	r2,32(r2)
   230cc:	e17fff17 	ldw	r5,-4(fp)
   230d0:	e13ffd17 	ldw	r4,-12(fp)
   230d4:	103ee83a 	callr	r2
   230d8:	00000a06 	br	23104 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   230dc:	e0bfff17 	ldw	r2,-4(fp)
   230e0:	00c80004 	movi	r3,8192
   230e4:	10c00115 	stw	r3,4(r2)
      return 0;
   230e8:	0005883a 	mov	r2,zero
   230ec:	00000506 	br	23104 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   230f0:	00230240 	call	23024 <alt_get_errno>
   230f4:	1007883a 	mov	r3,r2
   230f8:	00801444 	movi	r2,81
   230fc:	18800015 	stw	r2,0(r3)
    return -1;
   23100:	00bfffc4 	movi	r2,-1
  }
}
   23104:	e037883a 	mov	sp,fp
   23108:	dfc00117 	ldw	ra,4(sp)
   2310c:	df000017 	ldw	fp,0(sp)
   23110:	dec00204 	addi	sp,sp,8
   23114:	f800283a 	ret

00023118 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23118:	defffe04 	addi	sp,sp,-8
   2311c:	dfc00115 	stw	ra,4(sp)
   23120:	df000015 	stw	fp,0(sp)
   23124:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23128:	d0a00917 	ldw	r2,-32732(gp)
   2312c:	10000326 	beq	r2,zero,2313c <alt_get_errno+0x24>
   23130:	d0a00917 	ldw	r2,-32732(gp)
   23134:	103ee83a 	callr	r2
   23138:	00000106 	br	23140 <alt_get_errno+0x28>
   2313c:	d0a29904 	addi	r2,gp,-30108
}
   23140:	e037883a 	mov	sp,fp
   23144:	dfc00117 	ldw	ra,4(sp)
   23148:	df000017 	ldw	fp,0(sp)
   2314c:	dec00204 	addi	sp,sp,8
   23150:	f800283a 	ret

00023154 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   23154:	deffed04 	addi	sp,sp,-76
   23158:	dfc01215 	stw	ra,72(sp)
   2315c:	df001115 	stw	fp,68(sp)
   23160:	df001104 	addi	fp,sp,68
   23164:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23168:	e0bfff17 	ldw	r2,-4(fp)
   2316c:	10000816 	blt	r2,zero,23190 <isatty+0x3c>
   23170:	01400304 	movi	r5,12
   23174:	e13fff17 	ldw	r4,-4(fp)
   23178:	0022ebc0 	call	22ebc <__mulsi3>
   2317c:	1007883a 	mov	r3,r2
   23180:	008000b4 	movhi	r2,2
   23184:	10945904 	addi	r2,r2,20836
   23188:	1885883a 	add	r2,r3,r2
   2318c:	00000106 	br	23194 <isatty+0x40>
   23190:	0005883a 	mov	r2,zero
   23194:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   23198:	e0bfef17 	ldw	r2,-68(fp)
   2319c:	10000e26 	beq	r2,zero,231d8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   231a0:	e0bfef17 	ldw	r2,-68(fp)
   231a4:	10800017 	ldw	r2,0(r2)
   231a8:	10800817 	ldw	r2,32(r2)
   231ac:	1000021e 	bne	r2,zero,231b8 <isatty+0x64>
    {
      return 1;
   231b0:	00800044 	movi	r2,1
   231b4:	00000d06 	br	231ec <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   231b8:	e0bff004 	addi	r2,fp,-64
   231bc:	100b883a 	mov	r5,r2
   231c0:	e13fff17 	ldw	r4,-4(fp)
   231c4:	00230600 	call	23060 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   231c8:	e0bff117 	ldw	r2,-60(fp)
   231cc:	10880020 	cmpeqi	r2,r2,8192
   231d0:	10803fcc 	andi	r2,r2,255
   231d4:	00000506 	br	231ec <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   231d8:	00231180 	call	23118 <alt_get_errno>
   231dc:	1007883a 	mov	r3,r2
   231e0:	00801444 	movi	r2,81
   231e4:	18800015 	stw	r2,0(r3)
    return 0;
   231e8:	0005883a 	mov	r2,zero
  }
}
   231ec:	e037883a 	mov	sp,fp
   231f0:	dfc00117 	ldw	ra,4(sp)
   231f4:	df000017 	ldw	fp,0(sp)
   231f8:	dec00204 	addi	sp,sp,8
   231fc:	f800283a 	ret

00023200 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23200:	defffc04 	addi	sp,sp,-16
   23204:	df000315 	stw	fp,12(sp)
   23208:	df000304 	addi	fp,sp,12
   2320c:	e13ffd15 	stw	r4,-12(fp)
   23210:	e17ffe15 	stw	r5,-8(fp)
   23214:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   23218:	e0fffe17 	ldw	r3,-8(fp)
   2321c:	e0bffd17 	ldw	r2,-12(fp)
   23220:	18800c26 	beq	r3,r2,23254 <alt_load_section+0x54>
  {
    while( to != end )
   23224:	00000806 	br	23248 <alt_load_section+0x48>
    {
      *to++ = *from++;
   23228:	e0bffe17 	ldw	r2,-8(fp)
   2322c:	10c00104 	addi	r3,r2,4
   23230:	e0fffe15 	stw	r3,-8(fp)
   23234:	e0fffd17 	ldw	r3,-12(fp)
   23238:	19000104 	addi	r4,r3,4
   2323c:	e13ffd15 	stw	r4,-12(fp)
   23240:	18c00017 	ldw	r3,0(r3)
   23244:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   23248:	e0fffe17 	ldw	r3,-8(fp)
   2324c:	e0bfff17 	ldw	r2,-4(fp)
   23250:	18bff51e 	bne	r3,r2,23228 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   23254:	0001883a 	nop
   23258:	e037883a 	mov	sp,fp
   2325c:	df000017 	ldw	fp,0(sp)
   23260:	dec00104 	addi	sp,sp,4
   23264:	f800283a 	ret

00023268 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23268:	defffe04 	addi	sp,sp,-8
   2326c:	dfc00115 	stw	ra,4(sp)
   23270:	df000015 	stw	fp,0(sp)
   23274:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23278:	018000b4 	movhi	r6,2
   2327c:	3194cf04 	addi	r6,r6,21308
   23280:	014000b4 	movhi	r5,2
   23284:	29524404 	addi	r5,r5,18704
   23288:	010000b4 	movhi	r4,2
   2328c:	2114cf04 	addi	r4,r4,21308
   23290:	00232000 	call	23200 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23294:	018000b4 	movhi	r6,2
   23298:	31800804 	addi	r6,r6,32
   2329c:	014000b4 	movhi	r5,2
   232a0:	29400804 	addi	r5,r5,32
   232a4:	010000b4 	movhi	r4,2
   232a8:	21000804 	addi	r4,r4,32
   232ac:	00232000 	call	23200 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   232b0:	018000b4 	movhi	r6,2
   232b4:	31924404 	addi	r6,r6,18704
   232b8:	014000b4 	movhi	r5,2
   232bc:	29522e04 	addi	r5,r5,18616
   232c0:	010000b4 	movhi	r4,2
   232c4:	21122e04 	addi	r4,r4,18616
   232c8:	00232000 	call	23200 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   232cc:	0023ce00 	call	23ce0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   232d0:	0023ea00 	call	23ea0 <alt_icache_flush_all>
}
   232d4:	0001883a 	nop
   232d8:	e037883a 	mov	sp,fp
   232dc:	dfc00117 	ldw	ra,4(sp)
   232e0:	df000017 	ldw	fp,0(sp)
   232e4:	dec00204 	addi	sp,sp,8
   232e8:	f800283a 	ret

000232ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   232ec:	defffe04 	addi	sp,sp,-8
   232f0:	dfc00115 	stw	ra,4(sp)
   232f4:	df000015 	stw	fp,0(sp)
   232f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   232fc:	d0a00917 	ldw	r2,-32732(gp)
   23300:	10000326 	beq	r2,zero,23310 <alt_get_errno+0x24>
   23304:	d0a00917 	ldw	r2,-32732(gp)
   23308:	103ee83a 	callr	r2
   2330c:	00000106 	br	23314 <alt_get_errno+0x28>
   23310:	d0a29904 	addi	r2,gp,-30108
}
   23314:	e037883a 	mov	sp,fp
   23318:	dfc00117 	ldw	ra,4(sp)
   2331c:	df000017 	ldw	fp,0(sp)
   23320:	dec00204 	addi	sp,sp,8
   23324:	f800283a 	ret

00023328 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   23328:	defff904 	addi	sp,sp,-28
   2332c:	dfc00615 	stw	ra,24(sp)
   23330:	df000515 	stw	fp,20(sp)
   23334:	df000504 	addi	fp,sp,20
   23338:	e13ffd15 	stw	r4,-12(fp)
   2333c:	e17ffe15 	stw	r5,-8(fp)
   23340:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   23344:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23348:	e0bffd17 	ldw	r2,-12(fp)
   2334c:	10000816 	blt	r2,zero,23370 <lseek+0x48>
   23350:	01400304 	movi	r5,12
   23354:	e13ffd17 	ldw	r4,-12(fp)
   23358:	0022ebc0 	call	22ebc <__mulsi3>
   2335c:	1007883a 	mov	r3,r2
   23360:	008000b4 	movhi	r2,2
   23364:	10945904 	addi	r2,r2,20836
   23368:	1885883a 	add	r2,r3,r2
   2336c:	00000106 	br	23374 <lseek+0x4c>
   23370:	0005883a 	mov	r2,zero
   23374:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   23378:	e0bffc17 	ldw	r2,-16(fp)
   2337c:	10001026 	beq	r2,zero,233c0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23380:	e0bffc17 	ldw	r2,-16(fp)
   23384:	10800017 	ldw	r2,0(r2)
   23388:	10800717 	ldw	r2,28(r2)
   2338c:	10000926 	beq	r2,zero,233b4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23390:	e0bffc17 	ldw	r2,-16(fp)
   23394:	10800017 	ldw	r2,0(r2)
   23398:	10800717 	ldw	r2,28(r2)
   2339c:	e1bfff17 	ldw	r6,-4(fp)
   233a0:	e17ffe17 	ldw	r5,-8(fp)
   233a4:	e13ffc17 	ldw	r4,-16(fp)
   233a8:	103ee83a 	callr	r2
   233ac:	e0bffb15 	stw	r2,-20(fp)
   233b0:	00000506 	br	233c8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   233b4:	00bfde84 	movi	r2,-134
   233b8:	e0bffb15 	stw	r2,-20(fp)
   233bc:	00000206 	br	233c8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   233c0:	00bfebc4 	movi	r2,-81
   233c4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   233c8:	e0bffb17 	ldw	r2,-20(fp)
   233cc:	1000070e 	bge	r2,zero,233ec <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   233d0:	00232ec0 	call	232ec <alt_get_errno>
   233d4:	1007883a 	mov	r3,r2
   233d8:	e0bffb17 	ldw	r2,-20(fp)
   233dc:	0085c83a 	sub	r2,zero,r2
   233e0:	18800015 	stw	r2,0(r3)
    rc = -1;
   233e4:	00bfffc4 	movi	r2,-1
   233e8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   233ec:	e0bffb17 	ldw	r2,-20(fp)
}
   233f0:	e037883a 	mov	sp,fp
   233f4:	dfc00117 	ldw	ra,4(sp)
   233f8:	df000017 	ldw	fp,0(sp)
   233fc:	dec00204 	addi	sp,sp,8
   23400:	f800283a 	ret

00023404 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23404:	defffd04 	addi	sp,sp,-12
   23408:	dfc00215 	stw	ra,8(sp)
   2340c:	df000115 	stw	fp,4(sp)
   23410:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23414:	0009883a 	mov	r4,zero
   23418:	00238dc0 	call	238dc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2341c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23420:	00239140 	call	23914 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   23424:	018000b4 	movhi	r6,2
   23428:	31923a04 	addi	r6,r6,18664
   2342c:	014000b4 	movhi	r5,2
   23430:	29523a04 	addi	r5,r5,18664
   23434:	010000b4 	movhi	r4,2
   23438:	21123a04 	addi	r4,r4,18664
   2343c:	0023fa40 	call	23fa4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23440:	0023de00 	call	23de0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   23444:	010000b4 	movhi	r4,2
   23448:	210f9004 	addi	r4,r4,15936
   2344c:	00245240 	call	24524 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23450:	d0a29a17 	ldw	r2,-30104(gp)
   23454:	d0e29b17 	ldw	r3,-30100(gp)
   23458:	d1229c17 	ldw	r4,-30096(gp)
   2345c:	200d883a 	mov	r6,r4
   23460:	180b883a 	mov	r5,r3
   23464:	1009883a 	mov	r4,r2
   23468:	002005c0 	call	2005c <main>
   2346c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23470:	01000044 	movi	r4,1
   23474:	0022f200 	call	22f20 <close>
  exit (result);
   23478:	e13fff17 	ldw	r4,-4(fp)
   2347c:	00245380 	call	24538 <exit>

00023480 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23480:	defffe04 	addi	sp,sp,-8
   23484:	df000115 	stw	fp,4(sp)
   23488:	df000104 	addi	fp,sp,4
   2348c:	e13fff15 	stw	r4,-4(fp)
}
   23490:	0001883a 	nop
   23494:	e037883a 	mov	sp,fp
   23498:	df000017 	ldw	fp,0(sp)
   2349c:	dec00104 	addi	sp,sp,4
   234a0:	f800283a 	ret

000234a4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   234a4:	defffe04 	addi	sp,sp,-8
   234a8:	df000115 	stw	fp,4(sp)
   234ac:	df000104 	addi	fp,sp,4
   234b0:	e13fff15 	stw	r4,-4(fp)
}
   234b4:	0001883a 	nop
   234b8:	e037883a 	mov	sp,fp
   234bc:	df000017 	ldw	fp,0(sp)
   234c0:	dec00104 	addi	sp,sp,4
   234c4:	f800283a 	ret

000234c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   234c8:	defffe04 	addi	sp,sp,-8
   234cc:	dfc00115 	stw	ra,4(sp)
   234d0:	df000015 	stw	fp,0(sp)
   234d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   234d8:	d0a00917 	ldw	r2,-32732(gp)
   234dc:	10000326 	beq	r2,zero,234ec <alt_get_errno+0x24>
   234e0:	d0a00917 	ldw	r2,-32732(gp)
   234e4:	103ee83a 	callr	r2
   234e8:	00000106 	br	234f0 <alt_get_errno+0x28>
   234ec:	d0a29904 	addi	r2,gp,-30108
}
   234f0:	e037883a 	mov	sp,fp
   234f4:	dfc00117 	ldw	ra,4(sp)
   234f8:	df000017 	ldw	fp,0(sp)
   234fc:	dec00204 	addi	sp,sp,8
   23500:	f800283a 	ret

00023504 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   23504:	defff904 	addi	sp,sp,-28
   23508:	dfc00615 	stw	ra,24(sp)
   2350c:	df000515 	stw	fp,20(sp)
   23510:	df000504 	addi	fp,sp,20
   23514:	e13ffd15 	stw	r4,-12(fp)
   23518:	e17ffe15 	stw	r5,-8(fp)
   2351c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23520:	e0bffd17 	ldw	r2,-12(fp)
   23524:	10000816 	blt	r2,zero,23548 <read+0x44>
   23528:	01400304 	movi	r5,12
   2352c:	e13ffd17 	ldw	r4,-12(fp)
   23530:	0022ebc0 	call	22ebc <__mulsi3>
   23534:	1007883a 	mov	r3,r2
   23538:	008000b4 	movhi	r2,2
   2353c:	10945904 	addi	r2,r2,20836
   23540:	1885883a 	add	r2,r3,r2
   23544:	00000106 	br	2354c <read+0x48>
   23548:	0005883a 	mov	r2,zero
   2354c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23550:	e0bffb17 	ldw	r2,-20(fp)
   23554:	10002226 	beq	r2,zero,235e0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23558:	e0bffb17 	ldw	r2,-20(fp)
   2355c:	10800217 	ldw	r2,8(r2)
   23560:	108000cc 	andi	r2,r2,3
   23564:	10800060 	cmpeqi	r2,r2,1
   23568:	1000181e 	bne	r2,zero,235cc <read+0xc8>
        (fd->dev->read))
   2356c:	e0bffb17 	ldw	r2,-20(fp)
   23570:	10800017 	ldw	r2,0(r2)
   23574:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23578:	10001426 	beq	r2,zero,235cc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2357c:	e0bffb17 	ldw	r2,-20(fp)
   23580:	10800017 	ldw	r2,0(r2)
   23584:	10800517 	ldw	r2,20(r2)
   23588:	e0ffff17 	ldw	r3,-4(fp)
   2358c:	180d883a 	mov	r6,r3
   23590:	e17ffe17 	ldw	r5,-8(fp)
   23594:	e13ffb17 	ldw	r4,-20(fp)
   23598:	103ee83a 	callr	r2
   2359c:	e0bffc15 	stw	r2,-16(fp)
   235a0:	e0bffc17 	ldw	r2,-16(fp)
   235a4:	1000070e 	bge	r2,zero,235c4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   235a8:	00234c80 	call	234c8 <alt_get_errno>
   235ac:	1007883a 	mov	r3,r2
   235b0:	e0bffc17 	ldw	r2,-16(fp)
   235b4:	0085c83a 	sub	r2,zero,r2
   235b8:	18800015 	stw	r2,0(r3)
          return -1;
   235bc:	00bfffc4 	movi	r2,-1
   235c0:	00000c06 	br	235f4 <read+0xf0>
        }
        return rval;
   235c4:	e0bffc17 	ldw	r2,-16(fp)
   235c8:	00000a06 	br	235f4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   235cc:	00234c80 	call	234c8 <alt_get_errno>
   235d0:	1007883a 	mov	r3,r2
   235d4:	00800344 	movi	r2,13
   235d8:	18800015 	stw	r2,0(r3)
   235dc:	00000406 	br	235f0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   235e0:	00234c80 	call	234c8 <alt_get_errno>
   235e4:	1007883a 	mov	r3,r2
   235e8:	00801444 	movi	r2,81
   235ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
   235f0:	00bfffc4 	movi	r2,-1
}
   235f4:	e037883a 	mov	sp,fp
   235f8:	dfc00117 	ldw	ra,4(sp)
   235fc:	df000017 	ldw	fp,0(sp)
   23600:	dec00204 	addi	sp,sp,8
   23604:	f800283a 	ret

00023608 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23608:	defffc04 	addi	sp,sp,-16
   2360c:	dfc00315 	stw	ra,12(sp)
   23610:	df000215 	stw	fp,8(sp)
   23614:	dc000115 	stw	r16,4(sp)
   23618:	df000204 	addi	fp,sp,8
   2361c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   23620:	e0bffe17 	ldw	r2,-8(fp)
   23624:	108000d0 	cmplti	r2,r2,3
   23628:	1000111e 	bne	r2,zero,23670 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2362c:	040000b4 	movhi	r16,2
   23630:	84145904 	addi	r16,r16,20836
   23634:	e0bffe17 	ldw	r2,-8(fp)
   23638:	01400304 	movi	r5,12
   2363c:	1009883a 	mov	r4,r2
   23640:	0022ebc0 	call	22ebc <__mulsi3>
   23644:	8085883a 	add	r2,r16,r2
   23648:	10800204 	addi	r2,r2,8
   2364c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23650:	040000b4 	movhi	r16,2
   23654:	84145904 	addi	r16,r16,20836
   23658:	e0bffe17 	ldw	r2,-8(fp)
   2365c:	01400304 	movi	r5,12
   23660:	1009883a 	mov	r4,r2
   23664:	0022ebc0 	call	22ebc <__mulsi3>
   23668:	8085883a 	add	r2,r16,r2
   2366c:	10000015 	stw	zero,0(r2)
  }
}
   23670:	0001883a 	nop
   23674:	e6ffff04 	addi	sp,fp,-4
   23678:	dfc00217 	ldw	ra,8(sp)
   2367c:	df000117 	ldw	fp,4(sp)
   23680:	dc000017 	ldw	r16,0(sp)
   23684:	dec00304 	addi	sp,sp,12
   23688:	f800283a 	ret

0002368c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2368c:	defff904 	addi	sp,sp,-28
   23690:	df000615 	stw	fp,24(sp)
   23694:	df000604 	addi	fp,sp,24
   23698:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2369c:	0005303a 	rdctl	r2,status
   236a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   236a4:	e0fffe17 	ldw	r3,-8(fp)
   236a8:	00bfff84 	movi	r2,-2
   236ac:	1884703a 	and	r2,r3,r2
   236b0:	1001703a 	wrctl	status,r2
  
  return context;
   236b4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   236b8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   236bc:	d0a00a17 	ldw	r2,-32728(gp)
   236c0:	10c000c4 	addi	r3,r2,3
   236c4:	00bfff04 	movi	r2,-4
   236c8:	1884703a 	and	r2,r3,r2
   236cc:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   236d0:	d0e00a17 	ldw	r3,-32728(gp)
   236d4:	e0bfff17 	ldw	r2,-4(fp)
   236d8:	1887883a 	add	r3,r3,r2
   236dc:	00800134 	movhi	r2,4
   236e0:	10800004 	addi	r2,r2,0
   236e4:	10c0062e 	bgeu	r2,r3,23700 <sbrk+0x74>
   236e8:	e0bffb17 	ldw	r2,-20(fp)
   236ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   236f0:	e0bffa17 	ldw	r2,-24(fp)
   236f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   236f8:	00bfffc4 	movi	r2,-1
   236fc:	00000b06 	br	2372c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   23700:	d0a00a17 	ldw	r2,-32728(gp)
   23704:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   23708:	d0e00a17 	ldw	r3,-32728(gp)
   2370c:	e0bfff17 	ldw	r2,-4(fp)
   23710:	1885883a 	add	r2,r3,r2
   23714:	d0a00a15 	stw	r2,-32728(gp)
   23718:	e0bffb17 	ldw	r2,-20(fp)
   2371c:	e0bffc15 	stw	r2,-16(fp)
   23720:	e0bffc17 	ldw	r2,-16(fp)
   23724:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23728:	e0bffd17 	ldw	r2,-12(fp)
} 
   2372c:	e037883a 	mov	sp,fp
   23730:	df000017 	ldw	fp,0(sp)
   23734:	dec00104 	addi	sp,sp,4
   23738:	f800283a 	ret

0002373c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   2373c:	defffd04 	addi	sp,sp,-12
   23740:	dfc00215 	stw	ra,8(sp)
   23744:	df000115 	stw	fp,4(sp)
   23748:	df000104 	addi	fp,sp,4
   2374c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   23750:	e13fff17 	ldw	r4,-4(fp)
   23754:	0023b880 	call	23b88 <alt_busy_sleep>
}
   23758:	e037883a 	mov	sp,fp
   2375c:	dfc00117 	ldw	ra,4(sp)
   23760:	df000017 	ldw	fp,0(sp)
   23764:	dec00204 	addi	sp,sp,8
   23768:	f800283a 	ret

0002376c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2376c:	defffe04 	addi	sp,sp,-8
   23770:	dfc00115 	stw	ra,4(sp)
   23774:	df000015 	stw	fp,0(sp)
   23778:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2377c:	d0a00917 	ldw	r2,-32732(gp)
   23780:	10000326 	beq	r2,zero,23790 <alt_get_errno+0x24>
   23784:	d0a00917 	ldw	r2,-32732(gp)
   23788:	103ee83a 	callr	r2
   2378c:	00000106 	br	23794 <alt_get_errno+0x28>
   23790:	d0a29904 	addi	r2,gp,-30108
}
   23794:	e037883a 	mov	sp,fp
   23798:	dfc00117 	ldw	ra,4(sp)
   2379c:	df000017 	ldw	fp,0(sp)
   237a0:	dec00204 	addi	sp,sp,8
   237a4:	f800283a 	ret

000237a8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   237a8:	defff904 	addi	sp,sp,-28
   237ac:	dfc00615 	stw	ra,24(sp)
   237b0:	df000515 	stw	fp,20(sp)
   237b4:	df000504 	addi	fp,sp,20
   237b8:	e13ffd15 	stw	r4,-12(fp)
   237bc:	e17ffe15 	stw	r5,-8(fp)
   237c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   237c4:	e0bffd17 	ldw	r2,-12(fp)
   237c8:	10000816 	blt	r2,zero,237ec <write+0x44>
   237cc:	01400304 	movi	r5,12
   237d0:	e13ffd17 	ldw	r4,-12(fp)
   237d4:	0022ebc0 	call	22ebc <__mulsi3>
   237d8:	1007883a 	mov	r3,r2
   237dc:	008000b4 	movhi	r2,2
   237e0:	10945904 	addi	r2,r2,20836
   237e4:	1885883a 	add	r2,r3,r2
   237e8:	00000106 	br	237f0 <write+0x48>
   237ec:	0005883a 	mov	r2,zero
   237f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   237f4:	e0bffb17 	ldw	r2,-20(fp)
   237f8:	10002126 	beq	r2,zero,23880 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   237fc:	e0bffb17 	ldw	r2,-20(fp)
   23800:	10800217 	ldw	r2,8(r2)
   23804:	108000cc 	andi	r2,r2,3
   23808:	10001826 	beq	r2,zero,2386c <write+0xc4>
   2380c:	e0bffb17 	ldw	r2,-20(fp)
   23810:	10800017 	ldw	r2,0(r2)
   23814:	10800617 	ldw	r2,24(r2)
   23818:	10001426 	beq	r2,zero,2386c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2381c:	e0bffb17 	ldw	r2,-20(fp)
   23820:	10800017 	ldw	r2,0(r2)
   23824:	10800617 	ldw	r2,24(r2)
   23828:	e0ffff17 	ldw	r3,-4(fp)
   2382c:	180d883a 	mov	r6,r3
   23830:	e17ffe17 	ldw	r5,-8(fp)
   23834:	e13ffb17 	ldw	r4,-20(fp)
   23838:	103ee83a 	callr	r2
   2383c:	e0bffc15 	stw	r2,-16(fp)
   23840:	e0bffc17 	ldw	r2,-16(fp)
   23844:	1000070e 	bge	r2,zero,23864 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   23848:	002376c0 	call	2376c <alt_get_errno>
   2384c:	1007883a 	mov	r3,r2
   23850:	e0bffc17 	ldw	r2,-16(fp)
   23854:	0085c83a 	sub	r2,zero,r2
   23858:	18800015 	stw	r2,0(r3)
        return -1;
   2385c:	00bfffc4 	movi	r2,-1
   23860:	00000c06 	br	23894 <write+0xec>
      }
      return rval;
   23864:	e0bffc17 	ldw	r2,-16(fp)
   23868:	00000a06 	br	23894 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2386c:	002376c0 	call	2376c <alt_get_errno>
   23870:	1007883a 	mov	r3,r2
   23874:	00800344 	movi	r2,13
   23878:	18800015 	stw	r2,0(r3)
   2387c:	00000406 	br	23890 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23880:	002376c0 	call	2376c <alt_get_errno>
   23884:	1007883a 	mov	r3,r2
   23888:	00801444 	movi	r2,81
   2388c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23890:	00bfffc4 	movi	r2,-1
}
   23894:	e037883a 	mov	sp,fp
   23898:	dfc00117 	ldw	ra,4(sp)
   2389c:	df000017 	ldw	fp,0(sp)
   238a0:	dec00204 	addi	sp,sp,8
   238a4:	f800283a 	ret

000238a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   238a8:	defffd04 	addi	sp,sp,-12
   238ac:	dfc00215 	stw	ra,8(sp)
   238b0:	df000115 	stw	fp,4(sp)
   238b4:	df000104 	addi	fp,sp,4
   238b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   238bc:	d1600604 	addi	r5,gp,-32744
   238c0:	e13fff17 	ldw	r4,-4(fp)
   238c4:	0023d3c0 	call	23d3c <alt_dev_llist_insert>
}
   238c8:	e037883a 	mov	sp,fp
   238cc:	dfc00117 	ldw	ra,4(sp)
   238d0:	df000017 	ldw	fp,0(sp)
   238d4:	dec00204 	addi	sp,sp,8
   238d8:	f800283a 	ret

000238dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   238dc:	defffd04 	addi	sp,sp,-12
   238e0:	dfc00215 	stw	ra,8(sp)
   238e4:	df000115 	stw	fp,4(sp)
   238e8:	df000104 	addi	fp,sp,4
   238ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   238f0:	00242a40 	call	242a4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   238f4:	00800044 	movi	r2,1
   238f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   238fc:	0001883a 	nop
   23900:	e037883a 	mov	sp,fp
   23904:	dfc00117 	ldw	ra,4(sp)
   23908:	df000017 	ldw	fp,0(sp)
   2390c:	dec00204 	addi	sp,sp,8
   23910:	f800283a 	ret

00023914 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23914:	defffe04 	addi	sp,sp,-8
   23918:	dfc00115 	stw	ra,4(sp)
   2391c:	df000015 	stw	fp,0(sp)
   23920:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   23924:	010000b4 	movhi	r4,2
   23928:	2114b904 	addi	r4,r4,21220
   2392c:	00238a80 	call	238a8 <alt_dev_reg>
}
   23930:	0001883a 	nop
   23934:	e037883a 	mov	sp,fp
   23938:	dfc00117 	ldw	ra,4(sp)
   2393c:	df000017 	ldw	fp,0(sp)
   23940:	dec00204 	addi	sp,sp,8
   23944:	f800283a 	ret

00023948 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23948:	defffa04 	addi	sp,sp,-24
   2394c:	dfc00515 	stw	ra,20(sp)
   23950:	df000415 	stw	fp,16(sp)
   23954:	df000404 	addi	fp,sp,16
   23958:	e13ffd15 	stw	r4,-12(fp)
   2395c:	e17ffe15 	stw	r5,-8(fp)
   23960:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23964:	e0bffd17 	ldw	r2,-12(fp)
   23968:	10800017 	ldw	r2,0(r2)
   2396c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23970:	e0bffc17 	ldw	r2,-16(fp)
   23974:	10c00a04 	addi	r3,r2,40
   23978:	e0bffd17 	ldw	r2,-12(fp)
   2397c:	10800217 	ldw	r2,8(r2)
   23980:	100f883a 	mov	r7,r2
   23984:	e1bfff17 	ldw	r6,-4(fp)
   23988:	e17ffe17 	ldw	r5,-8(fp)
   2398c:	1809883a 	mov	r4,r3
   23990:	0023a080 	call	23a08 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23994:	e037883a 	mov	sp,fp
   23998:	dfc00117 	ldw	ra,4(sp)
   2399c:	df000017 	ldw	fp,0(sp)
   239a0:	dec00204 	addi	sp,sp,8
   239a4:	f800283a 	ret

000239a8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   239a8:	defffa04 	addi	sp,sp,-24
   239ac:	dfc00515 	stw	ra,20(sp)
   239b0:	df000415 	stw	fp,16(sp)
   239b4:	df000404 	addi	fp,sp,16
   239b8:	e13ffd15 	stw	r4,-12(fp)
   239bc:	e17ffe15 	stw	r5,-8(fp)
   239c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   239c4:	e0bffd17 	ldw	r2,-12(fp)
   239c8:	10800017 	ldw	r2,0(r2)
   239cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   239d0:	e0bffc17 	ldw	r2,-16(fp)
   239d4:	10c00a04 	addi	r3,r2,40
   239d8:	e0bffd17 	ldw	r2,-12(fp)
   239dc:	10800217 	ldw	r2,8(r2)
   239e0:	100f883a 	mov	r7,r2
   239e4:	e1bfff17 	ldw	r6,-4(fp)
   239e8:	e17ffe17 	ldw	r5,-8(fp)
   239ec:	1809883a 	mov	r4,r3
   239f0:	0023af40 	call	23af4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   239f4:	e037883a 	mov	sp,fp
   239f8:	dfc00117 	ldw	ra,4(sp)
   239fc:	df000017 	ldw	fp,0(sp)
   23a00:	dec00204 	addi	sp,sp,8
   23a04:	f800283a 	ret

00023a08 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   23a08:	defff704 	addi	sp,sp,-36
   23a0c:	df000815 	stw	fp,32(sp)
   23a10:	df000804 	addi	fp,sp,32
   23a14:	e13ffc15 	stw	r4,-16(fp)
   23a18:	e17ffd15 	stw	r5,-12(fp)
   23a1c:	e1bffe15 	stw	r6,-8(fp)
   23a20:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23a24:	e0bffc17 	ldw	r2,-16(fp)
   23a28:	10800017 	ldw	r2,0(r2)
   23a2c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   23a30:	e0bffd17 	ldw	r2,-12(fp)
   23a34:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   23a38:	e0bffe17 	ldw	r2,-8(fp)
   23a3c:	e0fffd17 	ldw	r3,-12(fp)
   23a40:	1885883a 	add	r2,r3,r2
   23a44:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   23a48:	00001206 	br	23a94 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23a4c:	e0bff917 	ldw	r2,-28(fp)
   23a50:	10800037 	ldwio	r2,0(r2)
   23a54:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   23a58:	e0bffb17 	ldw	r2,-20(fp)
   23a5c:	10a0000c 	andi	r2,r2,32768
   23a60:	10000626 	beq	r2,zero,23a7c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23a64:	e0bff817 	ldw	r2,-32(fp)
   23a68:	10c00044 	addi	r3,r2,1
   23a6c:	e0fff815 	stw	r3,-32(fp)
   23a70:	e0fffb17 	ldw	r3,-20(fp)
   23a74:	10c00005 	stb	r3,0(r2)
   23a78:	00000606 	br	23a94 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   23a7c:	e0fff817 	ldw	r3,-32(fp)
   23a80:	e0bffd17 	ldw	r2,-12(fp)
   23a84:	1880071e 	bne	r3,r2,23aa4 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   23a88:	e0bfff17 	ldw	r2,-4(fp)
   23a8c:	1090000c 	andi	r2,r2,16384
   23a90:	1000061e 	bne	r2,zero,23aac <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   23a94:	e0fff817 	ldw	r3,-32(fp)
   23a98:	e0bffa17 	ldw	r2,-24(fp)
   23a9c:	18bfeb36 	bltu	r3,r2,23a4c <altera_avalon_jtag_uart_read+0x44>
   23aa0:	00000306 	br	23ab0 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   23aa4:	0001883a 	nop
   23aa8:	00000106 	br	23ab0 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   23aac:	0001883a 	nop
    
  }

  if (ptr != buffer)
   23ab0:	e0fff817 	ldw	r3,-32(fp)
   23ab4:	e0bffd17 	ldw	r2,-12(fp)
   23ab8:	18800426 	beq	r3,r2,23acc <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   23abc:	e0fff817 	ldw	r3,-32(fp)
   23ac0:	e0bffd17 	ldw	r2,-12(fp)
   23ac4:	1885c83a 	sub	r2,r3,r2
   23ac8:	00000606 	br	23ae4 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   23acc:	e0bfff17 	ldw	r2,-4(fp)
   23ad0:	1090000c 	andi	r2,r2,16384
   23ad4:	10000226 	beq	r2,zero,23ae0 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   23ad8:	00bffd44 	movi	r2,-11
   23adc:	00000106 	br	23ae4 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   23ae0:	00bffec4 	movi	r2,-5
}
   23ae4:	e037883a 	mov	sp,fp
   23ae8:	df000017 	ldw	fp,0(sp)
   23aec:	dec00104 	addi	sp,sp,4
   23af0:	f800283a 	ret

00023af4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   23af4:	defff904 	addi	sp,sp,-28
   23af8:	df000615 	stw	fp,24(sp)
   23afc:	df000604 	addi	fp,sp,24
   23b00:	e13ffc15 	stw	r4,-16(fp)
   23b04:	e17ffd15 	stw	r5,-12(fp)
   23b08:	e1bffe15 	stw	r6,-8(fp)
   23b0c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23b10:	e0bffc17 	ldw	r2,-16(fp)
   23b14:	10800017 	ldw	r2,0(r2)
   23b18:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   23b1c:	e0bffe17 	ldw	r2,-8(fp)
   23b20:	e0fffd17 	ldw	r3,-12(fp)
   23b24:	1885883a 	add	r2,r3,r2
   23b28:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   23b2c:	00000e06 	br	23b68 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   23b30:	e0bffa17 	ldw	r2,-24(fp)
   23b34:	10800104 	addi	r2,r2,4
   23b38:	10800037 	ldwio	r2,0(r2)
   23b3c:	10bfffec 	andhi	r2,r2,65535
   23b40:	10000926 	beq	r2,zero,23b68 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   23b44:	e0fffa17 	ldw	r3,-24(fp)
   23b48:	e0bffd17 	ldw	r2,-12(fp)
   23b4c:	11000044 	addi	r4,r2,1
   23b50:	e13ffd15 	stw	r4,-12(fp)
   23b54:	10800003 	ldbu	r2,0(r2)
   23b58:	10803fcc 	andi	r2,r2,255
   23b5c:	1080201c 	xori	r2,r2,128
   23b60:	10bfe004 	addi	r2,r2,-128
   23b64:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   23b68:	e0fffd17 	ldw	r3,-12(fp)
   23b6c:	e0bffb17 	ldw	r2,-20(fp)
   23b70:	18bfef36 	bltu	r3,r2,23b30 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   23b74:	e0bffe17 	ldw	r2,-8(fp)
}
   23b78:	e037883a 	mov	sp,fp
   23b7c:	df000017 	ldw	fp,0(sp)
   23b80:	dec00104 	addi	sp,sp,4
   23b84:	f800283a 	ret

00023b88 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   23b88:	defffa04 	addi	sp,sp,-24
   23b8c:	dfc00515 	stw	ra,20(sp)
   23b90:	df000415 	stw	fp,16(sp)
   23b94:	df000404 	addi	fp,sp,16
   23b98:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   23b9c:	00800244 	movi	r2,9
   23ba0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   23ba4:	014003f4 	movhi	r5,15
   23ba8:	29509004 	addi	r5,r5,16960
   23bac:	e13ffd17 	ldw	r4,-12(fp)
   23bb0:	0022ebc0 	call	22ebc <__mulsi3>
   23bb4:	100b883a 	mov	r5,r2
   23bb8:	0100bef4 	movhi	r4,763
   23bbc:	213c2004 	addi	r4,r4,-3968
   23bc0:	0022e000 	call	22e00 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   23bc4:	100b883a 	mov	r5,r2
   23bc8:	01200034 	movhi	r4,32768
   23bcc:	213fffc4 	addi	r4,r4,-1
   23bd0:	0022e000 	call	22e00 <__udivsi3>
   23bd4:	100b883a 	mov	r5,r2
   23bd8:	e13fff17 	ldw	r4,-4(fp)
   23bdc:	0022e000 	call	22e00 <__udivsi3>
   23be0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   23be4:	e0bffe17 	ldw	r2,-8(fp)
   23be8:	10002a26 	beq	r2,zero,23c94 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   23bec:	e03ffc15 	stw	zero,-16(fp)
   23bf0:	00001706 	br	23c50 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   23bf4:	00a00034 	movhi	r2,32768
   23bf8:	10bfffc4 	addi	r2,r2,-1
   23bfc:	10bfffc4 	addi	r2,r2,-1
   23c00:	103ffe1e 	bne	r2,zero,23bfc <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   23c04:	014003f4 	movhi	r5,15
   23c08:	29509004 	addi	r5,r5,16960
   23c0c:	e13ffd17 	ldw	r4,-12(fp)
   23c10:	0022ebc0 	call	22ebc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   23c14:	100b883a 	mov	r5,r2
   23c18:	0100bef4 	movhi	r4,763
   23c1c:	213c2004 	addi	r4,r4,-3968
   23c20:	0022e000 	call	22e00 <__udivsi3>
   23c24:	100b883a 	mov	r5,r2
   23c28:	01200034 	movhi	r4,32768
   23c2c:	213fffc4 	addi	r4,r4,-1
   23c30:	0022e000 	call	22e00 <__udivsi3>
   23c34:	1007883a 	mov	r3,r2
   23c38:	e0bfff17 	ldw	r2,-4(fp)
   23c3c:	10c5c83a 	sub	r2,r2,r3
   23c40:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   23c44:	e0bffc17 	ldw	r2,-16(fp)
   23c48:	10800044 	addi	r2,r2,1
   23c4c:	e0bffc15 	stw	r2,-16(fp)
   23c50:	e0fffc17 	ldw	r3,-16(fp)
   23c54:	e0bffe17 	ldw	r2,-8(fp)
   23c58:	18bfe616 	blt	r3,r2,23bf4 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   23c5c:	014003f4 	movhi	r5,15
   23c60:	29509004 	addi	r5,r5,16960
   23c64:	e13ffd17 	ldw	r4,-12(fp)
   23c68:	0022ebc0 	call	22ebc <__mulsi3>
   23c6c:	100b883a 	mov	r5,r2
   23c70:	0100bef4 	movhi	r4,763
   23c74:	213c2004 	addi	r4,r4,-3968
   23c78:	0022e000 	call	22e00 <__udivsi3>
   23c7c:	e17fff17 	ldw	r5,-4(fp)
   23c80:	1009883a 	mov	r4,r2
   23c84:	0022ebc0 	call	22ebc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   23c88:	10bfffc4 	addi	r2,r2,-1
   23c8c:	103ffe1e 	bne	r2,zero,23c88 <alt_busy_sleep+0x100>
   23c90:	00000d06 	br	23cc8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   23c94:	014003f4 	movhi	r5,15
   23c98:	29509004 	addi	r5,r5,16960
   23c9c:	e13ffd17 	ldw	r4,-12(fp)
   23ca0:	0022ebc0 	call	22ebc <__mulsi3>
   23ca4:	100b883a 	mov	r5,r2
   23ca8:	0100bef4 	movhi	r4,763
   23cac:	213c2004 	addi	r4,r4,-3968
   23cb0:	0022e000 	call	22e00 <__udivsi3>
   23cb4:	e17fff17 	ldw	r5,-4(fp)
   23cb8:	1009883a 	mov	r4,r2
   23cbc:	0022ebc0 	call	22ebc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   23cc0:	10bfffc4 	addi	r2,r2,-1
   23cc4:	00bffe16 	blt	zero,r2,23cc0 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   23cc8:	0005883a 	mov	r2,zero
}
   23ccc:	e037883a 	mov	sp,fp
   23cd0:	dfc00117 	ldw	ra,4(sp)
   23cd4:	df000017 	ldw	fp,0(sp)
   23cd8:	dec00204 	addi	sp,sp,8
   23cdc:	f800283a 	ret

00023ce0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   23ce0:	deffff04 	addi	sp,sp,-4
   23ce4:	df000015 	stw	fp,0(sp)
   23ce8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   23cec:	0001883a 	nop
   23cf0:	e037883a 	mov	sp,fp
   23cf4:	df000017 	ldw	fp,0(sp)
   23cf8:	dec00104 	addi	sp,sp,4
   23cfc:	f800283a 	ret

00023d00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23d00:	defffe04 	addi	sp,sp,-8
   23d04:	dfc00115 	stw	ra,4(sp)
   23d08:	df000015 	stw	fp,0(sp)
   23d0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23d10:	d0a00917 	ldw	r2,-32732(gp)
   23d14:	10000326 	beq	r2,zero,23d24 <alt_get_errno+0x24>
   23d18:	d0a00917 	ldw	r2,-32732(gp)
   23d1c:	103ee83a 	callr	r2
   23d20:	00000106 	br	23d28 <alt_get_errno+0x28>
   23d24:	d0a29904 	addi	r2,gp,-30108
}
   23d28:	e037883a 	mov	sp,fp
   23d2c:	dfc00117 	ldw	ra,4(sp)
   23d30:	df000017 	ldw	fp,0(sp)
   23d34:	dec00204 	addi	sp,sp,8
   23d38:	f800283a 	ret

00023d3c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   23d3c:	defffa04 	addi	sp,sp,-24
   23d40:	dfc00515 	stw	ra,20(sp)
   23d44:	df000415 	stw	fp,16(sp)
   23d48:	df000404 	addi	fp,sp,16
   23d4c:	e13ffe15 	stw	r4,-8(fp)
   23d50:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   23d54:	e0bffe17 	ldw	r2,-8(fp)
   23d58:	10000326 	beq	r2,zero,23d68 <alt_dev_llist_insert+0x2c>
   23d5c:	e0bffe17 	ldw	r2,-8(fp)
   23d60:	10800217 	ldw	r2,8(r2)
   23d64:	1000061e 	bne	r2,zero,23d80 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   23d68:	0023d000 	call	23d00 <alt_get_errno>
   23d6c:	1007883a 	mov	r3,r2
   23d70:	00800584 	movi	r2,22
   23d74:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   23d78:	00bffa84 	movi	r2,-22
   23d7c:	00001306 	br	23dcc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   23d80:	e0bffe17 	ldw	r2,-8(fp)
   23d84:	e0ffff17 	ldw	r3,-4(fp)
   23d88:	e0fffc15 	stw	r3,-16(fp)
   23d8c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   23d90:	e0bffd17 	ldw	r2,-12(fp)
   23d94:	e0fffc17 	ldw	r3,-16(fp)
   23d98:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   23d9c:	e0bffc17 	ldw	r2,-16(fp)
   23da0:	10c00017 	ldw	r3,0(r2)
   23da4:	e0bffd17 	ldw	r2,-12(fp)
   23da8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   23dac:	e0bffc17 	ldw	r2,-16(fp)
   23db0:	10800017 	ldw	r2,0(r2)
   23db4:	e0fffd17 	ldw	r3,-12(fp)
   23db8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   23dbc:	e0bffc17 	ldw	r2,-16(fp)
   23dc0:	e0fffd17 	ldw	r3,-12(fp)
   23dc4:	10c00015 	stw	r3,0(r2)

  return 0;  
   23dc8:	0005883a 	mov	r2,zero
}
   23dcc:	e037883a 	mov	sp,fp
   23dd0:	dfc00117 	ldw	ra,4(sp)
   23dd4:	df000017 	ldw	fp,0(sp)
   23dd8:	dec00204 	addi	sp,sp,8
   23ddc:	f800283a 	ret

00023de0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   23de0:	defffd04 	addi	sp,sp,-12
   23de4:	dfc00215 	stw	ra,8(sp)
   23de8:	df000115 	stw	fp,4(sp)
   23dec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23df0:	008000b4 	movhi	r2,2
   23df4:	10922d04 	addi	r2,r2,18612
   23df8:	e0bfff15 	stw	r2,-4(fp)
   23dfc:	00000606 	br	23e18 <_do_ctors+0x38>
        (*ctor) (); 
   23e00:	e0bfff17 	ldw	r2,-4(fp)
   23e04:	10800017 	ldw	r2,0(r2)
   23e08:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23e0c:	e0bfff17 	ldw	r2,-4(fp)
   23e10:	10bfff04 	addi	r2,r2,-4
   23e14:	e0bfff15 	stw	r2,-4(fp)
   23e18:	e0ffff17 	ldw	r3,-4(fp)
   23e1c:	008000b4 	movhi	r2,2
   23e20:	10922e04 	addi	r2,r2,18616
   23e24:	18bff62e 	bgeu	r3,r2,23e00 <_do_ctors+0x20>
        (*ctor) (); 
}
   23e28:	0001883a 	nop
   23e2c:	e037883a 	mov	sp,fp
   23e30:	dfc00117 	ldw	ra,4(sp)
   23e34:	df000017 	ldw	fp,0(sp)
   23e38:	dec00204 	addi	sp,sp,8
   23e3c:	f800283a 	ret

00023e40 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   23e40:	defffd04 	addi	sp,sp,-12
   23e44:	dfc00215 	stw	ra,8(sp)
   23e48:	df000115 	stw	fp,4(sp)
   23e4c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23e50:	008000b4 	movhi	r2,2
   23e54:	10922d04 	addi	r2,r2,18612
   23e58:	e0bfff15 	stw	r2,-4(fp)
   23e5c:	00000606 	br	23e78 <_do_dtors+0x38>
        (*dtor) (); 
   23e60:	e0bfff17 	ldw	r2,-4(fp)
   23e64:	10800017 	ldw	r2,0(r2)
   23e68:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23e6c:	e0bfff17 	ldw	r2,-4(fp)
   23e70:	10bfff04 	addi	r2,r2,-4
   23e74:	e0bfff15 	stw	r2,-4(fp)
   23e78:	e0ffff17 	ldw	r3,-4(fp)
   23e7c:	008000b4 	movhi	r2,2
   23e80:	10922e04 	addi	r2,r2,18616
   23e84:	18bff62e 	bgeu	r3,r2,23e60 <_do_dtors+0x20>
        (*dtor) (); 
}
   23e88:	0001883a 	nop
   23e8c:	e037883a 	mov	sp,fp
   23e90:	dfc00117 	ldw	ra,4(sp)
   23e94:	df000017 	ldw	fp,0(sp)
   23e98:	dec00204 	addi	sp,sp,8
   23e9c:	f800283a 	ret

00023ea0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   23ea0:	deffff04 	addi	sp,sp,-4
   23ea4:	df000015 	stw	fp,0(sp)
   23ea8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   23eac:	0001883a 	nop
   23eb0:	e037883a 	mov	sp,fp
   23eb4:	df000017 	ldw	fp,0(sp)
   23eb8:	dec00104 	addi	sp,sp,4
   23ebc:	f800283a 	ret

00023ec0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   23ec0:	defff804 	addi	sp,sp,-32
   23ec4:	dfc00715 	stw	ra,28(sp)
   23ec8:	df000615 	stw	fp,24(sp)
   23ecc:	dc000515 	stw	r16,20(sp)
   23ed0:	df000604 	addi	fp,sp,24
   23ed4:	e13ffb15 	stw	r4,-20(fp)
   23ed8:	e17ffc15 	stw	r5,-16(fp)
   23edc:	e1bffd15 	stw	r6,-12(fp)
   23ee0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   23ee4:	e1bffe17 	ldw	r6,-8(fp)
   23ee8:	e17ffd17 	ldw	r5,-12(fp)
   23eec:	e13ffc17 	ldw	r4,-16(fp)
   23ef0:	00241480 	call	24148 <open>
   23ef4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   23ef8:	e0bffa17 	ldw	r2,-24(fp)
   23efc:	10002216 	blt	r2,zero,23f88 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   23f00:	040000b4 	movhi	r16,2
   23f04:	84145904 	addi	r16,r16,20836
   23f08:	e0bffa17 	ldw	r2,-24(fp)
   23f0c:	01400304 	movi	r5,12
   23f10:	1009883a 	mov	r4,r2
   23f14:	0022ebc0 	call	22ebc <__mulsi3>
   23f18:	8085883a 	add	r2,r16,r2
   23f1c:	10c00017 	ldw	r3,0(r2)
   23f20:	e0bffb17 	ldw	r2,-20(fp)
   23f24:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   23f28:	040000b4 	movhi	r16,2
   23f2c:	84145904 	addi	r16,r16,20836
   23f30:	e0bffa17 	ldw	r2,-24(fp)
   23f34:	01400304 	movi	r5,12
   23f38:	1009883a 	mov	r4,r2
   23f3c:	0022ebc0 	call	22ebc <__mulsi3>
   23f40:	8085883a 	add	r2,r16,r2
   23f44:	10800104 	addi	r2,r2,4
   23f48:	10c00017 	ldw	r3,0(r2)
   23f4c:	e0bffb17 	ldw	r2,-20(fp)
   23f50:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   23f54:	040000b4 	movhi	r16,2
   23f58:	84145904 	addi	r16,r16,20836
   23f5c:	e0bffa17 	ldw	r2,-24(fp)
   23f60:	01400304 	movi	r5,12
   23f64:	1009883a 	mov	r4,r2
   23f68:	0022ebc0 	call	22ebc <__mulsi3>
   23f6c:	8085883a 	add	r2,r16,r2
   23f70:	10800204 	addi	r2,r2,8
   23f74:	10c00017 	ldw	r3,0(r2)
   23f78:	e0bffb17 	ldw	r2,-20(fp)
   23f7c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   23f80:	e13ffa17 	ldw	r4,-24(fp)
   23f84:	00236080 	call	23608 <alt_release_fd>
  }
} 
   23f88:	0001883a 	nop
   23f8c:	e6ffff04 	addi	sp,fp,-4
   23f90:	dfc00217 	ldw	ra,8(sp)
   23f94:	df000117 	ldw	fp,4(sp)
   23f98:	dc000017 	ldw	r16,0(sp)
   23f9c:	dec00304 	addi	sp,sp,12
   23fa0:	f800283a 	ret

00023fa4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   23fa4:	defffb04 	addi	sp,sp,-20
   23fa8:	dfc00415 	stw	ra,16(sp)
   23fac:	df000315 	stw	fp,12(sp)
   23fb0:	df000304 	addi	fp,sp,12
   23fb4:	e13ffd15 	stw	r4,-12(fp)
   23fb8:	e17ffe15 	stw	r5,-8(fp)
   23fbc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   23fc0:	01c07fc4 	movi	r7,511
   23fc4:	01800044 	movi	r6,1
   23fc8:	e17ffd17 	ldw	r5,-12(fp)
   23fcc:	010000b4 	movhi	r4,2
   23fd0:	21145c04 	addi	r4,r4,20848
   23fd4:	0023ec00 	call	23ec0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   23fd8:	01c07fc4 	movi	r7,511
   23fdc:	000d883a 	mov	r6,zero
   23fe0:	e17ffe17 	ldw	r5,-8(fp)
   23fe4:	010000b4 	movhi	r4,2
   23fe8:	21145904 	addi	r4,r4,20836
   23fec:	0023ec00 	call	23ec0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   23ff0:	01c07fc4 	movi	r7,511
   23ff4:	01800044 	movi	r6,1
   23ff8:	e17fff17 	ldw	r5,-4(fp)
   23ffc:	010000b4 	movhi	r4,2
   24000:	21145f04 	addi	r4,r4,20860
   24004:	0023ec00 	call	23ec0 <alt_open_fd>
}  
   24008:	0001883a 	nop
   2400c:	e037883a 	mov	sp,fp
   24010:	dfc00117 	ldw	ra,4(sp)
   24014:	df000017 	ldw	fp,0(sp)
   24018:	dec00204 	addi	sp,sp,8
   2401c:	f800283a 	ret

00024020 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24020:	defffe04 	addi	sp,sp,-8
   24024:	dfc00115 	stw	ra,4(sp)
   24028:	df000015 	stw	fp,0(sp)
   2402c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24030:	d0a00917 	ldw	r2,-32732(gp)
   24034:	10000326 	beq	r2,zero,24044 <alt_get_errno+0x24>
   24038:	d0a00917 	ldw	r2,-32732(gp)
   2403c:	103ee83a 	callr	r2
   24040:	00000106 	br	24048 <alt_get_errno+0x28>
   24044:	d0a29904 	addi	r2,gp,-30108
}
   24048:	e037883a 	mov	sp,fp
   2404c:	dfc00117 	ldw	ra,4(sp)
   24050:	df000017 	ldw	fp,0(sp)
   24054:	dec00204 	addi	sp,sp,8
   24058:	f800283a 	ret

0002405c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2405c:	defffb04 	addi	sp,sp,-20
   24060:	dfc00415 	stw	ra,16(sp)
   24064:	df000315 	stw	fp,12(sp)
   24068:	dc000215 	stw	r16,8(sp)
   2406c:	df000304 	addi	fp,sp,12
   24070:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   24074:	e0bffe17 	ldw	r2,-8(fp)
   24078:	10800217 	ldw	r2,8(r2)
   2407c:	10d00034 	orhi	r3,r2,16384
   24080:	e0bffe17 	ldw	r2,-8(fp)
   24084:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24088:	e03ffd15 	stw	zero,-12(fp)
   2408c:	00002306 	br	2411c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24090:	040000b4 	movhi	r16,2
   24094:	84145904 	addi	r16,r16,20836
   24098:	e0bffd17 	ldw	r2,-12(fp)
   2409c:	01400304 	movi	r5,12
   240a0:	1009883a 	mov	r4,r2
   240a4:	0022ebc0 	call	22ebc <__mulsi3>
   240a8:	8085883a 	add	r2,r16,r2
   240ac:	10c00017 	ldw	r3,0(r2)
   240b0:	e0bffe17 	ldw	r2,-8(fp)
   240b4:	10800017 	ldw	r2,0(r2)
   240b8:	1880151e 	bne	r3,r2,24110 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   240bc:	040000b4 	movhi	r16,2
   240c0:	84145904 	addi	r16,r16,20836
   240c4:	e0bffd17 	ldw	r2,-12(fp)
   240c8:	01400304 	movi	r5,12
   240cc:	1009883a 	mov	r4,r2
   240d0:	0022ebc0 	call	22ebc <__mulsi3>
   240d4:	8085883a 	add	r2,r16,r2
   240d8:	10800204 	addi	r2,r2,8
   240dc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   240e0:	10000b0e 	bge	r2,zero,24110 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   240e4:	01400304 	movi	r5,12
   240e8:	e13ffd17 	ldw	r4,-12(fp)
   240ec:	0022ebc0 	call	22ebc <__mulsi3>
   240f0:	1007883a 	mov	r3,r2
   240f4:	008000b4 	movhi	r2,2
   240f8:	10945904 	addi	r2,r2,20836
   240fc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24100:	e0bffe17 	ldw	r2,-8(fp)
   24104:	18800226 	beq	r3,r2,24110 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   24108:	00bffcc4 	movi	r2,-13
   2410c:	00000806 	br	24130 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24110:	e0bffd17 	ldw	r2,-12(fp)
   24114:	10800044 	addi	r2,r2,1
   24118:	e0bffd15 	stw	r2,-12(fp)
   2411c:	d0a00817 	ldw	r2,-32736(gp)
   24120:	1007883a 	mov	r3,r2
   24124:	e0bffd17 	ldw	r2,-12(fp)
   24128:	18bfd92e 	bgeu	r3,r2,24090 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2412c:	0005883a 	mov	r2,zero
}
   24130:	e6ffff04 	addi	sp,fp,-4
   24134:	dfc00217 	ldw	ra,8(sp)
   24138:	df000117 	ldw	fp,4(sp)
   2413c:	dc000017 	ldw	r16,0(sp)
   24140:	dec00304 	addi	sp,sp,12
   24144:	f800283a 	ret

00024148 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24148:	defff604 	addi	sp,sp,-40
   2414c:	dfc00915 	stw	ra,36(sp)
   24150:	df000815 	stw	fp,32(sp)
   24154:	df000804 	addi	fp,sp,32
   24158:	e13ffd15 	stw	r4,-12(fp)
   2415c:	e17ffe15 	stw	r5,-8(fp)
   24160:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24164:	00bfffc4 	movi	r2,-1
   24168:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2416c:	00bffb44 	movi	r2,-19
   24170:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   24174:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24178:	d1600604 	addi	r5,gp,-32744
   2417c:	e13ffd17 	ldw	r4,-12(fp)
   24180:	00242c80 	call	242c8 <alt_find_dev>
   24184:	e0bff815 	stw	r2,-32(fp)
   24188:	e0bff817 	ldw	r2,-32(fp)
   2418c:	1000051e 	bne	r2,zero,241a4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   24190:	e13ffd17 	ldw	r4,-12(fp)
   24194:	00243580 	call	24358 <alt_find_file>
   24198:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2419c:	00800044 	movi	r2,1
   241a0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   241a4:	e0bff817 	ldw	r2,-32(fp)
   241a8:	10002b26 	beq	r2,zero,24258 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   241ac:	e13ff817 	ldw	r4,-32(fp)
   241b0:	00244600 	call	24460 <alt_get_fd>
   241b4:	e0bff915 	stw	r2,-28(fp)
   241b8:	e0bff917 	ldw	r2,-28(fp)
   241bc:	1000030e 	bge	r2,zero,241cc <open+0x84>
    {
      status = index;
   241c0:	e0bff917 	ldw	r2,-28(fp)
   241c4:	e0bffa15 	stw	r2,-24(fp)
   241c8:	00002506 	br	24260 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   241cc:	01400304 	movi	r5,12
   241d0:	e13ff917 	ldw	r4,-28(fp)
   241d4:	0022ebc0 	call	22ebc <__mulsi3>
   241d8:	1007883a 	mov	r3,r2
   241dc:	008000b4 	movhi	r2,2
   241e0:	10945904 	addi	r2,r2,20836
   241e4:	1885883a 	add	r2,r3,r2
   241e8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   241ec:	e0fffe17 	ldw	r3,-8(fp)
   241f0:	00900034 	movhi	r2,16384
   241f4:	10bfffc4 	addi	r2,r2,-1
   241f8:	1886703a 	and	r3,r3,r2
   241fc:	e0bffc17 	ldw	r2,-16(fp)
   24200:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24204:	e0bffb17 	ldw	r2,-20(fp)
   24208:	1000051e 	bne	r2,zero,24220 <open+0xd8>
   2420c:	e13ffc17 	ldw	r4,-16(fp)
   24210:	002405c0 	call	2405c <alt_file_locked>
   24214:	e0bffa15 	stw	r2,-24(fp)
   24218:	e0bffa17 	ldw	r2,-24(fp)
   2421c:	10001016 	blt	r2,zero,24260 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24220:	e0bff817 	ldw	r2,-32(fp)
   24224:	10800317 	ldw	r2,12(r2)
   24228:	10000826 	beq	r2,zero,2424c <open+0x104>
   2422c:	e0bff817 	ldw	r2,-32(fp)
   24230:	10800317 	ldw	r2,12(r2)
   24234:	e1ffff17 	ldw	r7,-4(fp)
   24238:	e1bffe17 	ldw	r6,-8(fp)
   2423c:	e17ffd17 	ldw	r5,-12(fp)
   24240:	e13ffc17 	ldw	r4,-16(fp)
   24244:	103ee83a 	callr	r2
   24248:	00000106 	br	24250 <open+0x108>
   2424c:	0005883a 	mov	r2,zero
   24250:	e0bffa15 	stw	r2,-24(fp)
   24254:	00000206 	br	24260 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24258:	00bffb44 	movi	r2,-19
   2425c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24260:	e0bffa17 	ldw	r2,-24(fp)
   24264:	1000090e 	bge	r2,zero,2428c <open+0x144>
  {
    alt_release_fd (index);  
   24268:	e13ff917 	ldw	r4,-28(fp)
   2426c:	00236080 	call	23608 <alt_release_fd>
    ALT_ERRNO = -status;
   24270:	00240200 	call	24020 <alt_get_errno>
   24274:	1007883a 	mov	r3,r2
   24278:	e0bffa17 	ldw	r2,-24(fp)
   2427c:	0085c83a 	sub	r2,zero,r2
   24280:	18800015 	stw	r2,0(r3)
    return -1;
   24284:	00bfffc4 	movi	r2,-1
   24288:	00000106 	br	24290 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   2428c:	e0bff917 	ldw	r2,-28(fp)
}
   24290:	e037883a 	mov	sp,fp
   24294:	dfc00117 	ldw	ra,4(sp)
   24298:	df000017 	ldw	fp,0(sp)
   2429c:	dec00204 	addi	sp,sp,8
   242a0:	f800283a 	ret

000242a4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   242a4:	deffff04 	addi	sp,sp,-4
   242a8:	df000015 	stw	fp,0(sp)
   242ac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   242b0:	000170fa 	wrctl	ienable,zero
}
   242b4:	0001883a 	nop
   242b8:	e037883a 	mov	sp,fp
   242bc:	df000017 	ldw	fp,0(sp)
   242c0:	dec00104 	addi	sp,sp,4
   242c4:	f800283a 	ret

000242c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   242c8:	defffa04 	addi	sp,sp,-24
   242cc:	dfc00515 	stw	ra,20(sp)
   242d0:	df000415 	stw	fp,16(sp)
   242d4:	df000404 	addi	fp,sp,16
   242d8:	e13ffe15 	stw	r4,-8(fp)
   242dc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   242e0:	e0bfff17 	ldw	r2,-4(fp)
   242e4:	10800017 	ldw	r2,0(r2)
   242e8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   242ec:	e13ffe17 	ldw	r4,-8(fp)
   242f0:	00201ac0 	call	201ac <strlen>
   242f4:	10800044 	addi	r2,r2,1
   242f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   242fc:	00000d06 	br	24334 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24300:	e0bffc17 	ldw	r2,-16(fp)
   24304:	10800217 	ldw	r2,8(r2)
   24308:	e0fffd17 	ldw	r3,-12(fp)
   2430c:	180d883a 	mov	r6,r3
   24310:	e17ffe17 	ldw	r5,-8(fp)
   24314:	1009883a 	mov	r4,r2
   24318:	00245700 	call	24570 <memcmp>
   2431c:	1000021e 	bne	r2,zero,24328 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24320:	e0bffc17 	ldw	r2,-16(fp)
   24324:	00000706 	br	24344 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24328:	e0bffc17 	ldw	r2,-16(fp)
   2432c:	10800017 	ldw	r2,0(r2)
   24330:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24334:	e0fffc17 	ldw	r3,-16(fp)
   24338:	e0bfff17 	ldw	r2,-4(fp)
   2433c:	18bff01e 	bne	r3,r2,24300 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   24340:	0005883a 	mov	r2,zero
}
   24344:	e037883a 	mov	sp,fp
   24348:	dfc00117 	ldw	ra,4(sp)
   2434c:	df000017 	ldw	fp,0(sp)
   24350:	dec00204 	addi	sp,sp,8
   24354:	f800283a 	ret

00024358 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24358:	defffb04 	addi	sp,sp,-20
   2435c:	dfc00415 	stw	ra,16(sp)
   24360:	df000315 	stw	fp,12(sp)
   24364:	df000304 	addi	fp,sp,12
   24368:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2436c:	d0a00417 	ldw	r2,-32752(gp)
   24370:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24374:	00003106 	br	2443c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   24378:	e0bffd17 	ldw	r2,-12(fp)
   2437c:	10800217 	ldw	r2,8(r2)
   24380:	1009883a 	mov	r4,r2
   24384:	00201ac0 	call	201ac <strlen>
   24388:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2438c:	e0bffd17 	ldw	r2,-12(fp)
   24390:	10c00217 	ldw	r3,8(r2)
   24394:	e0bffe17 	ldw	r2,-8(fp)
   24398:	10bfffc4 	addi	r2,r2,-1
   2439c:	1885883a 	add	r2,r3,r2
   243a0:	10800003 	ldbu	r2,0(r2)
   243a4:	10803fcc 	andi	r2,r2,255
   243a8:	1080201c 	xori	r2,r2,128
   243ac:	10bfe004 	addi	r2,r2,-128
   243b0:	10800bd8 	cmpnei	r2,r2,47
   243b4:	1000031e 	bne	r2,zero,243c4 <alt_find_file+0x6c>
    {
      len -= 1;
   243b8:	e0bffe17 	ldw	r2,-8(fp)
   243bc:	10bfffc4 	addi	r2,r2,-1
   243c0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   243c4:	e0bffe17 	ldw	r2,-8(fp)
   243c8:	e0ffff17 	ldw	r3,-4(fp)
   243cc:	1885883a 	add	r2,r3,r2
   243d0:	10800003 	ldbu	r2,0(r2)
   243d4:	10803fcc 	andi	r2,r2,255
   243d8:	1080201c 	xori	r2,r2,128
   243dc:	10bfe004 	addi	r2,r2,-128
   243e0:	10800be0 	cmpeqi	r2,r2,47
   243e4:	1000081e 	bne	r2,zero,24408 <alt_find_file+0xb0>
   243e8:	e0bffe17 	ldw	r2,-8(fp)
   243ec:	e0ffff17 	ldw	r3,-4(fp)
   243f0:	1885883a 	add	r2,r3,r2
   243f4:	10800003 	ldbu	r2,0(r2)
   243f8:	10803fcc 	andi	r2,r2,255
   243fc:	1080201c 	xori	r2,r2,128
   24400:	10bfe004 	addi	r2,r2,-128
   24404:	10000a1e 	bne	r2,zero,24430 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   24408:	e0bffd17 	ldw	r2,-12(fp)
   2440c:	10800217 	ldw	r2,8(r2)
   24410:	e0fffe17 	ldw	r3,-8(fp)
   24414:	180d883a 	mov	r6,r3
   24418:	e17fff17 	ldw	r5,-4(fp)
   2441c:	1009883a 	mov	r4,r2
   24420:	00245700 	call	24570 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24424:	1000021e 	bne	r2,zero,24430 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   24428:	e0bffd17 	ldw	r2,-12(fp)
   2442c:	00000706 	br	2444c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   24430:	e0bffd17 	ldw	r2,-12(fp)
   24434:	10800017 	ldw	r2,0(r2)
   24438:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2443c:	e0fffd17 	ldw	r3,-12(fp)
   24440:	d0a00404 	addi	r2,gp,-32752
   24444:	18bfcc1e 	bne	r3,r2,24378 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   24448:	0005883a 	mov	r2,zero
}
   2444c:	e037883a 	mov	sp,fp
   24450:	dfc00117 	ldw	ra,4(sp)
   24454:	df000017 	ldw	fp,0(sp)
   24458:	dec00204 	addi	sp,sp,8
   2445c:	f800283a 	ret

00024460 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24460:	defffa04 	addi	sp,sp,-24
   24464:	dfc00515 	stw	ra,20(sp)
   24468:	df000415 	stw	fp,16(sp)
   2446c:	dc000315 	stw	r16,12(sp)
   24470:	df000404 	addi	fp,sp,16
   24474:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   24478:	00bffa04 	movi	r2,-24
   2447c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24480:	e03ffc15 	stw	zero,-16(fp)
   24484:	00001d06 	br	244fc <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   24488:	040000b4 	movhi	r16,2
   2448c:	84145904 	addi	r16,r16,20836
   24490:	e0bffc17 	ldw	r2,-16(fp)
   24494:	01400304 	movi	r5,12
   24498:	1009883a 	mov	r4,r2
   2449c:	0022ebc0 	call	22ebc <__mulsi3>
   244a0:	8085883a 	add	r2,r16,r2
   244a4:	10800017 	ldw	r2,0(r2)
   244a8:	1000111e 	bne	r2,zero,244f0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   244ac:	040000b4 	movhi	r16,2
   244b0:	84145904 	addi	r16,r16,20836
   244b4:	e0bffc17 	ldw	r2,-16(fp)
   244b8:	01400304 	movi	r5,12
   244bc:	1009883a 	mov	r4,r2
   244c0:	0022ebc0 	call	22ebc <__mulsi3>
   244c4:	8085883a 	add	r2,r16,r2
   244c8:	e0fffe17 	ldw	r3,-8(fp)
   244cc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   244d0:	d0e00817 	ldw	r3,-32736(gp)
   244d4:	e0bffc17 	ldw	r2,-16(fp)
   244d8:	1880020e 	bge	r3,r2,244e4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   244dc:	e0bffc17 	ldw	r2,-16(fp)
   244e0:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   244e4:	e0bffc17 	ldw	r2,-16(fp)
   244e8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   244ec:	00000606 	br	24508 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   244f0:	e0bffc17 	ldw	r2,-16(fp)
   244f4:	10800044 	addi	r2,r2,1
   244f8:	e0bffc15 	stw	r2,-16(fp)
   244fc:	e0bffc17 	ldw	r2,-16(fp)
   24500:	10800810 	cmplti	r2,r2,32
   24504:	103fe01e 	bne	r2,zero,24488 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   24508:	e0bffd17 	ldw	r2,-12(fp)
}
   2450c:	e6ffff04 	addi	sp,fp,-4
   24510:	dfc00217 	ldw	ra,8(sp)
   24514:	df000117 	ldw	fp,4(sp)
   24518:	dc000017 	ldw	r16,0(sp)
   2451c:	dec00304 	addi	sp,sp,12
   24520:	f800283a 	ret

00024524 <atexit>:
   24524:	200b883a 	mov	r5,r4
   24528:	000f883a 	mov	r7,zero
   2452c:	000d883a 	mov	r6,zero
   24530:	0009883a 	mov	r4,zero
   24534:	00245ec1 	jmpi	245ec <__register_exitproc>

00024538 <exit>:
   24538:	defffe04 	addi	sp,sp,-8
   2453c:	000b883a 	mov	r5,zero
   24540:	dc000015 	stw	r16,0(sp)
   24544:	dfc00115 	stw	ra,4(sp)
   24548:	2021883a 	mov	r16,r4
   2454c:	00247040 	call	24704 <__call_exitprocs>
   24550:	008000b4 	movhi	r2,2
   24554:	1094c404 	addi	r2,r2,21264
   24558:	11000017 	ldw	r4,0(r2)
   2455c:	20800f17 	ldw	r2,60(r4)
   24560:	10000126 	beq	r2,zero,24568 <exit+0x30>
   24564:	103ee83a 	callr	r2
   24568:	8009883a 	mov	r4,r16
   2456c:	00248840 	call	24884 <_exit>

00024570 <memcmp>:
   24570:	01c000c4 	movi	r7,3
   24574:	3980192e 	bgeu	r7,r6,245dc <memcmp+0x6c>
   24578:	2144b03a 	or	r2,r4,r5
   2457c:	11c4703a 	and	r2,r2,r7
   24580:	10000f26 	beq	r2,zero,245c0 <memcmp+0x50>
   24584:	20800003 	ldbu	r2,0(r4)
   24588:	28c00003 	ldbu	r3,0(r5)
   2458c:	10c0151e 	bne	r2,r3,245e4 <memcmp+0x74>
   24590:	31bfff84 	addi	r6,r6,-2
   24594:	01ffffc4 	movi	r7,-1
   24598:	00000406 	br	245ac <memcmp+0x3c>
   2459c:	20800003 	ldbu	r2,0(r4)
   245a0:	28c00003 	ldbu	r3,0(r5)
   245a4:	31bfffc4 	addi	r6,r6,-1
   245a8:	10c00e1e 	bne	r2,r3,245e4 <memcmp+0x74>
   245ac:	21000044 	addi	r4,r4,1
   245b0:	29400044 	addi	r5,r5,1
   245b4:	31fff91e 	bne	r6,r7,2459c <memcmp+0x2c>
   245b8:	0005883a 	mov	r2,zero
   245bc:	f800283a 	ret
   245c0:	20c00017 	ldw	r3,0(r4)
   245c4:	28800017 	ldw	r2,0(r5)
   245c8:	18bfee1e 	bne	r3,r2,24584 <memcmp+0x14>
   245cc:	31bfff04 	addi	r6,r6,-4
   245d0:	21000104 	addi	r4,r4,4
   245d4:	29400104 	addi	r5,r5,4
   245d8:	39bff936 	bltu	r7,r6,245c0 <memcmp+0x50>
   245dc:	303fe91e 	bne	r6,zero,24584 <memcmp+0x14>
   245e0:	003ff506 	br	245b8 <memcmp+0x48>
   245e4:	10c5c83a 	sub	r2,r2,r3
   245e8:	f800283a 	ret

000245ec <__register_exitproc>:
   245ec:	defffa04 	addi	sp,sp,-24
   245f0:	dc000315 	stw	r16,12(sp)
   245f4:	040000b4 	movhi	r16,2
   245f8:	8414c404 	addi	r16,r16,21264
   245fc:	80c00017 	ldw	r3,0(r16)
   24600:	dc400415 	stw	r17,16(sp)
   24604:	dfc00515 	stw	ra,20(sp)
   24608:	18805217 	ldw	r2,328(r3)
   2460c:	2023883a 	mov	r17,r4
   24610:	10003726 	beq	r2,zero,246f0 <__register_exitproc+0x104>
   24614:	10c00117 	ldw	r3,4(r2)
   24618:	010007c4 	movi	r4,31
   2461c:	20c00e16 	blt	r4,r3,24658 <__register_exitproc+0x6c>
   24620:	1a000044 	addi	r8,r3,1
   24624:	8800221e 	bne	r17,zero,246b0 <__register_exitproc+0xc4>
   24628:	18c00084 	addi	r3,r3,2
   2462c:	18c7883a 	add	r3,r3,r3
   24630:	18c7883a 	add	r3,r3,r3
   24634:	12000115 	stw	r8,4(r2)
   24638:	10c7883a 	add	r3,r2,r3
   2463c:	19400015 	stw	r5,0(r3)
   24640:	0005883a 	mov	r2,zero
   24644:	dfc00517 	ldw	ra,20(sp)
   24648:	dc400417 	ldw	r17,16(sp)
   2464c:	dc000317 	ldw	r16,12(sp)
   24650:	dec00604 	addi	sp,sp,24
   24654:	f800283a 	ret
   24658:	00800034 	movhi	r2,0
   2465c:	10800004 	addi	r2,r2,0
   24660:	10002626 	beq	r2,zero,246fc <__register_exitproc+0x110>
   24664:	01006404 	movi	r4,400
   24668:	d9400015 	stw	r5,0(sp)
   2466c:	d9800115 	stw	r6,4(sp)
   24670:	d9c00215 	stw	r7,8(sp)
   24674:	00000000 	call	0 <__alt_mem_onchip_memory2_1-0x20000>
   24678:	d9400017 	ldw	r5,0(sp)
   2467c:	d9800117 	ldw	r6,4(sp)
   24680:	d9c00217 	ldw	r7,8(sp)
   24684:	10001d26 	beq	r2,zero,246fc <__register_exitproc+0x110>
   24688:	81000017 	ldw	r4,0(r16)
   2468c:	10000115 	stw	zero,4(r2)
   24690:	02000044 	movi	r8,1
   24694:	22405217 	ldw	r9,328(r4)
   24698:	0007883a 	mov	r3,zero
   2469c:	12400015 	stw	r9,0(r2)
   246a0:	20805215 	stw	r2,328(r4)
   246a4:	10006215 	stw	zero,392(r2)
   246a8:	10006315 	stw	zero,396(r2)
   246ac:	883fde26 	beq	r17,zero,24628 <__register_exitproc+0x3c>
   246b0:	18c9883a 	add	r4,r3,r3
   246b4:	2109883a 	add	r4,r4,r4
   246b8:	1109883a 	add	r4,r2,r4
   246bc:	21802215 	stw	r6,136(r4)
   246c0:	01800044 	movi	r6,1
   246c4:	12406217 	ldw	r9,392(r2)
   246c8:	30cc983a 	sll	r6,r6,r3
   246cc:	4992b03a 	or	r9,r9,r6
   246d0:	12406215 	stw	r9,392(r2)
   246d4:	21c04215 	stw	r7,264(r4)
   246d8:	01000084 	movi	r4,2
   246dc:	893fd21e 	bne	r17,r4,24628 <__register_exitproc+0x3c>
   246e0:	11006317 	ldw	r4,396(r2)
   246e4:	218cb03a 	or	r6,r4,r6
   246e8:	11806315 	stw	r6,396(r2)
   246ec:	003fce06 	br	24628 <__register_exitproc+0x3c>
   246f0:	18805304 	addi	r2,r3,332
   246f4:	18805215 	stw	r2,328(r3)
   246f8:	003fc606 	br	24614 <__register_exitproc+0x28>
   246fc:	00bfffc4 	movi	r2,-1
   24700:	003fd006 	br	24644 <__register_exitproc+0x58>

00024704 <__call_exitprocs>:
   24704:	defff504 	addi	sp,sp,-44
   24708:	df000915 	stw	fp,36(sp)
   2470c:	dd400615 	stw	r21,24(sp)
   24710:	dc800315 	stw	r18,12(sp)
   24714:	dfc00a15 	stw	ra,40(sp)
   24718:	ddc00815 	stw	r23,32(sp)
   2471c:	dd800715 	stw	r22,28(sp)
   24720:	dd000515 	stw	r20,20(sp)
   24724:	dcc00415 	stw	r19,16(sp)
   24728:	dc400215 	stw	r17,8(sp)
   2472c:	dc000115 	stw	r16,4(sp)
   24730:	d9000015 	stw	r4,0(sp)
   24734:	2839883a 	mov	fp,r5
   24738:	04800044 	movi	r18,1
   2473c:	057fffc4 	movi	r21,-1
   24740:	008000b4 	movhi	r2,2
   24744:	1094c404 	addi	r2,r2,21264
   24748:	12000017 	ldw	r8,0(r2)
   2474c:	45005217 	ldw	r20,328(r8)
   24750:	44c05204 	addi	r19,r8,328
   24754:	a0001c26 	beq	r20,zero,247c8 <__call_exitprocs+0xc4>
   24758:	a0800117 	ldw	r2,4(r20)
   2475c:	15ffffc4 	addi	r23,r2,-1
   24760:	b8000d16 	blt	r23,zero,24798 <__call_exitprocs+0x94>
   24764:	14000044 	addi	r16,r2,1
   24768:	8421883a 	add	r16,r16,r16
   2476c:	8421883a 	add	r16,r16,r16
   24770:	84402004 	addi	r17,r16,128
   24774:	a463883a 	add	r17,r20,r17
   24778:	a421883a 	add	r16,r20,r16
   2477c:	e0001e26 	beq	fp,zero,247f8 <__call_exitprocs+0xf4>
   24780:	80804017 	ldw	r2,256(r16)
   24784:	e0801c26 	beq	fp,r2,247f8 <__call_exitprocs+0xf4>
   24788:	bdffffc4 	addi	r23,r23,-1
   2478c:	843fff04 	addi	r16,r16,-4
   24790:	8c7fff04 	addi	r17,r17,-4
   24794:	bd7ff91e 	bne	r23,r21,2477c <__call_exitprocs+0x78>
   24798:	00800034 	movhi	r2,0
   2479c:	10800004 	addi	r2,r2,0
   247a0:	10000926 	beq	r2,zero,247c8 <__call_exitprocs+0xc4>
   247a4:	a0800117 	ldw	r2,4(r20)
   247a8:	1000301e 	bne	r2,zero,2486c <__call_exitprocs+0x168>
   247ac:	a0800017 	ldw	r2,0(r20)
   247b0:	10003226 	beq	r2,zero,2487c <__call_exitprocs+0x178>
   247b4:	a009883a 	mov	r4,r20
   247b8:	98800015 	stw	r2,0(r19)
   247bc:	00000000 	call	0 <__alt_mem_onchip_memory2_1-0x20000>
   247c0:	9d000017 	ldw	r20,0(r19)
   247c4:	a03fe41e 	bne	r20,zero,24758 <__call_exitprocs+0x54>
   247c8:	dfc00a17 	ldw	ra,40(sp)
   247cc:	df000917 	ldw	fp,36(sp)
   247d0:	ddc00817 	ldw	r23,32(sp)
   247d4:	dd800717 	ldw	r22,28(sp)
   247d8:	dd400617 	ldw	r21,24(sp)
   247dc:	dd000517 	ldw	r20,20(sp)
   247e0:	dcc00417 	ldw	r19,16(sp)
   247e4:	dc800317 	ldw	r18,12(sp)
   247e8:	dc400217 	ldw	r17,8(sp)
   247ec:	dc000117 	ldw	r16,4(sp)
   247f0:	dec00b04 	addi	sp,sp,44
   247f4:	f800283a 	ret
   247f8:	a0800117 	ldw	r2,4(r20)
   247fc:	80c00017 	ldw	r3,0(r16)
   24800:	10bfffc4 	addi	r2,r2,-1
   24804:	15c01426 	beq	r2,r23,24858 <__call_exitprocs+0x154>
   24808:	80000015 	stw	zero,0(r16)
   2480c:	183fde26 	beq	r3,zero,24788 <__call_exitprocs+0x84>
   24810:	95c8983a 	sll	r4,r18,r23
   24814:	a0806217 	ldw	r2,392(r20)
   24818:	a5800117 	ldw	r22,4(r20)
   2481c:	2084703a 	and	r2,r4,r2
   24820:	10000b26 	beq	r2,zero,24850 <__call_exitprocs+0x14c>
   24824:	a0806317 	ldw	r2,396(r20)
   24828:	2088703a 	and	r4,r4,r2
   2482c:	20000c1e 	bne	r4,zero,24860 <__call_exitprocs+0x15c>
   24830:	89400017 	ldw	r5,0(r17)
   24834:	d9000017 	ldw	r4,0(sp)
   24838:	183ee83a 	callr	r3
   2483c:	a0800117 	ldw	r2,4(r20)
   24840:	15bfbf1e 	bne	r2,r22,24740 <__call_exitprocs+0x3c>
   24844:	98800017 	ldw	r2,0(r19)
   24848:	153fcf26 	beq	r2,r20,24788 <__call_exitprocs+0x84>
   2484c:	003fbc06 	br	24740 <__call_exitprocs+0x3c>
   24850:	183ee83a 	callr	r3
   24854:	003ff906 	br	2483c <__call_exitprocs+0x138>
   24858:	a5c00115 	stw	r23,4(r20)
   2485c:	003feb06 	br	2480c <__call_exitprocs+0x108>
   24860:	89000017 	ldw	r4,0(r17)
   24864:	183ee83a 	callr	r3
   24868:	003ff406 	br	2483c <__call_exitprocs+0x138>
   2486c:	a0800017 	ldw	r2,0(r20)
   24870:	a027883a 	mov	r19,r20
   24874:	1029883a 	mov	r20,r2
   24878:	003fb606 	br	24754 <__call_exitprocs+0x50>
   2487c:	0005883a 	mov	r2,zero
   24880:	003ffb06 	br	24870 <__call_exitprocs+0x16c>

00024884 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   24884:	defffd04 	addi	sp,sp,-12
   24888:	df000215 	stw	fp,8(sp)
   2488c:	df000204 	addi	fp,sp,8
   24890:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   24894:	0001883a 	nop
   24898:	e0bfff17 	ldw	r2,-4(fp)
   2489c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   248a0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   248a4:	10000226 	beq	r2,zero,248b0 <_exit+0x2c>
    ALT_SIM_FAIL();
   248a8:	002af070 	cmpltui	zero,zero,43969
   248ac:	00000106 	br	248b4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   248b0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   248b4:	003fff06 	br	248b4 <_exit+0x30>
